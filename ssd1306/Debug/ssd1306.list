
ssd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a0c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b44  08005bd0  08005bd0  00006bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007714  08007714  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007714  08007714  00008714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800771c  0800771c  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800771c  0800771c  0000871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007720  08007720  00008720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007724  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  2000001c  08007740  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08007740  00009540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5a6  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002193  00000000  00000000  000165f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00018788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f9  00000000  00000000  00019300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a99  00000000  00000000  00019bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff15  00000000  00000000  0003b692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cac7b  00000000  00000000  0004b5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116222  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa0  00000000  00000000  00116268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00119208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005bb8 	.word	0x08005bb8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08005bb8 	.word	0x08005bb8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08c      	sub	sp, #48	@ 0x30
 80004f8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f001 f8b5 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f8a1 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f989 	bl	8000818 <MX_GPIO_Init>
  MX_DMA_Init();
 8000506:	f000 f967 	bl	80007d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f93b 	bl	8000784 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800050e:	f000 f90b 	bl	8000728 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

/* USER CODE END Includes */

/* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000512:	f000 f9f5 	bl	8000900 <SSD1306_Init>
  SSD1306_GotoXY (0,0);
 8000516:	2100      	movs	r1, #0
 8000518:	2000      	movs	r0, #0
 800051a:	f000 fb5b 	bl	8000bd4 <SSD1306_GotoXY>
  SSD1306_Puts ("System initiating", &Font_7x10, 1);
 800051e:	2201      	movs	r2, #1
 8000520:	4942      	ldr	r1, [pc, #264]	@ (800062c <main+0x138>)
 8000522:	4843      	ldr	r0, [pc, #268]	@ (8000630 <main+0x13c>)
 8000524:	f000 fbea 	bl	8000cfc <SSD1306_Puts>
  SSD1306_GotoXY (0, 16);
 8000528:	2110      	movs	r1, #16
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fb52 	bl	8000bd4 <SSD1306_GotoXY>
  SSD1306_Puts ("Written by Tori", &Font_7x10, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	493e      	ldr	r1, [pc, #248]	@ (800062c <main+0x138>)
 8000534:	483f      	ldr	r0, [pc, #252]	@ (8000634 <main+0x140>)
 8000536:	f000 fbe1 	bl	8000cfc <SSD1306_Puts>
  SSD1306_GotoXY (0, 32);
 800053a:	2120      	movs	r1, #32
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fb49 	bl	8000bd4 <SSD1306_GotoXY>
  SSD1306_Puts ("Rbite Co.Ltd", &Font_7x10, 1);
 8000542:	2201      	movs	r2, #1
 8000544:	4939      	ldr	r1, [pc, #228]	@ (800062c <main+0x138>)
 8000546:	483c      	ldr	r0, [pc, #240]	@ (8000638 <main+0x144>)
 8000548:	f000 fbd8 	bl	8000cfc <SSD1306_Puts>
  SSD1306_GotoXY (0, 48);
 800054c:	2130      	movs	r1, #48	@ 0x30
 800054e:	2000      	movs	r0, #0
 8000550:	f000 fb40 	bl	8000bd4 <SSD1306_GotoXY>
  SSD1306_Puts ("Testing code!", &Font_7x10, 1);
 8000554:	2201      	movs	r2, #1
 8000556:	4935      	ldr	r1, [pc, #212]	@ (800062c <main+0x138>)
 8000558:	4838      	ldr	r0, [pc, #224]	@ (800063c <main+0x148>)
 800055a:	f000 fbcf 	bl	8000cfc <SSD1306_Puts>
  SSD1306_UpdateScreen();
 800055e:	f000 fa93 	bl	8000a88 <SSD1306_UpdateScreen>
  HAL_Delay (5000);
 8000562:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000566:	f001 f8f1 	bl	800174c <HAL_Delay>
  SSD1306_Clear();
 800056a:	f000 fe56 	bl	800121a <SSD1306_Clear>

  int num=2024;
 800056e:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
 8000572:	61bb      	str	r3, [r7, #24]
  char snum[5];
  SSD1306_GotoXY (30,20);
 8000574:	2114      	movs	r1, #20
 8000576:	201e      	movs	r0, #30
 8000578:	f000 fb2c 	bl	8000bd4 <SSD1306_GotoXY>
  itoa(num, snum, 10);
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	220a      	movs	r2, #10
 8000582:	4619      	mov	r1, r3
 8000584:	69b8      	ldr	r0, [r7, #24]
 8000586:	f005 faa7 	bl	8005ad8 <itoa>
  SSD1306_Puts (snum, &Font_16x26, 1);
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	2201      	movs	r2, #1
 8000590:	492b      	ldr	r1, [pc, #172]	@ (8000640 <main+0x14c>)
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fbb2 	bl	8000cfc <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000598:	f000 fa76 	bl	8000a88 <SSD1306_UpdateScreen>

  //SSD1306_DrawLine(POINT1 X, POINT1 Y, POINT2 X, POINT2 Y, 1);
  SSD1306_DrawLine(1,54,126,54,1);
 800059c:	2301      	movs	r3, #1
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2336      	movs	r3, #54	@ 0x36
 80005a2:	227e      	movs	r2, #126	@ 0x7e
 80005a4:	2136      	movs	r1, #54	@ 0x36
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 fbcd 	bl	8000d46 <SSD1306_DrawLine>
  SSD1306_UpdateScreen();
 80005ac:	f000 fa6c 	bl	8000a88 <SSD1306_UpdateScreen>
  HAL_Delay (5000);
 80005b0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80005b4:	f001 f8ca 	bl	800174c <HAL_Delay>
  SSD1306_Clear();
 80005b8:	f000 fe2f 	bl	800121a <SSD1306_Clear>

  // For Rectangle, we need to use two corner points
  // SSD1306_DrawRectangle(POINT1 X, POINT1 Y, POINT2 X, POINT2 Y, 1);
  SSD1306_DrawRectangle(17,1,115,14,1);
 80005bc:	2301      	movs	r3, #1
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	230e      	movs	r3, #14
 80005c2:	2273      	movs	r2, #115	@ 0x73
 80005c4:	2101      	movs	r1, #1
 80005c6:	2011      	movs	r0, #17
 80005c8:	f000 fcb8 	bl	8000f3c <SSD1306_DrawRectangle>
  // SSD1306_DrawTriangle(POINT1X, POINT1Y, POINT2X, POINT2Y, POINT3X, POINT3Y, 1);
  SSD1306_DrawTriangle(73,22,124,62,74,54,1);
 80005cc:	2301      	movs	r3, #1
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	2336      	movs	r3, #54	@ 0x36
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	234a      	movs	r3, #74	@ 0x4a
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	233e      	movs	r3, #62	@ 0x3e
 80005da:	227c      	movs	r2, #124	@ 0x7c
 80005dc:	2116      	movs	r1, #22
 80005de:	2049      	movs	r0, #73	@ 0x49
 80005e0:	f000 fd16 	bl	8001010 <SSD1306_DrawTriangle>
  // SSD1306_DrawCircle(CENTER POINT X, CENTER POINT Y, RADIUS, 1);
  SSD1306_DrawCircle(34,50,13,1);
 80005e4:	2301      	movs	r3, #1
 80005e6:	220d      	movs	r2, #13
 80005e8:	2132      	movs	r1, #50	@ 0x32
 80005ea:	2022      	movs	r0, #34	@ 0x22
 80005ec:	f000 fd41 	bl	8001072 <SSD1306_DrawCircle>
  SSD1306_UpdateScreen();
 80005f0:	f000 fa4a 	bl	8000a88 <SSD1306_UpdateScreen>

  int counter = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SSD1306_Clear();
 80005f8:	f000 fe0f 	bl	800121a <SSD1306_Clear>
	  SSD1306_GotoXY (64,32);
 80005fc:	2120      	movs	r1, #32
 80005fe:	2040      	movs	r0, #64	@ 0x40
 8000600:	f000 fae8 	bl	8000bd4 <SSD1306_GotoXY>
	  itoa(counter, buffer, 10);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	220a      	movs	r2, #10
 8000608:	4619      	mov	r1, r3
 800060a:	69f8      	ldr	r0, [r7, #28]
 800060c:	f005 fa64 	bl	8005ad8 <itoa>
	  SSD1306_Puts (snum, &Font_16x26, 1);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	2201      	movs	r2, #1
 8000616:	490a      	ldr	r1, [pc, #40]	@ (8000640 <main+0x14c>)
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fb6f 	bl	8000cfc <SSD1306_Puts>
	  counter++;
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	3301      	adds	r3, #1
 8000622:	61fb      	str	r3, [r7, #28]
	  SSD1306_UpdateScreen();
 8000624:	f000 fa30 	bl	8000a88 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 8000628:	bf00      	nop
 800062a:	e7e5      	b.n	80005f8 <main+0x104>
 800062c:	20000000 	.word	0x20000000
 8000630:	08005bd0 	.word	0x08005bd0
 8000634:	08005be4 	.word	0x08005be4
 8000638:	08005bf4 	.word	0x08005bf4
 800063c:	08005c04 	.word	0x08005c04
 8000640:	20000008 	.word	0x20000008

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	@ 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 fa84 	bl	8005b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b2c      	ldr	r3, [pc, #176]	@ (8000720 <SystemClock_Config+0xdc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a2b      	ldr	r2, [pc, #172]	@ (8000720 <SystemClock_Config+0xdc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <SystemClock_Config+0xdc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <SystemClock_Config+0xe0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a25      	ldr	r2, [pc, #148]	@ (8000724 <SystemClock_Config+0xe0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <SystemClock_Config+0xe0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006b8:	23b4      	movs	r3, #180	@ 0xb4
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 fc89 	bl	8004fe4 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d8:	f000 f90c 	bl	80008f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006dc:	f004 f8e8 	bl	80048b0 <HAL_PWREx_EnableOverDrive>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006e6:	f000 f905 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2105      	movs	r1, #5
 8000708:	4618      	mov	r0, r3
 800070a:	f004 f921 	bl	8004950 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000714:	f000 f8ee 	bl	80008f4 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	@ 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_I2C1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	@ (8000780 <MX_I2C1_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	@ (8000778 <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_I2C1_Init+0x50>)
 8000766:	f001 fdef 	bl	8002348 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f8c0 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000038 	.word	0x20000038
 800077c:	40005400 	.word	0x40005400
 8000780:	00061a80 	.word	0x00061a80

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_USART2_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007bc:	f004 feb0 	bl	8005520 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f895 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000ec 	.word	0x200000ec
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_DMA_Init+0x3c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000814 <MX_DMA_Init+0x3c>)
 80007e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_DMA_Init+0x3c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2011      	movs	r0, #17
 8000800:	f001 f8a3 	bl	800194a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000804:	2011      	movs	r0, #17
 8000806:	f001 f8bc 	bl	8001982 <HAL_NVIC_EnableIRQ>

}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b2d      	ldr	r3, [pc, #180]	@ (80008e8 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a2c      	ldr	r2, [pc, #176]	@ (80008e8 <MX_GPIO_Init+0xd0>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b2a      	ldr	r3, [pc, #168]	@ (80008e8 <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b26      	ldr	r3, [pc, #152]	@ (80008e8 <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a25      	ldr	r2, [pc, #148]	@ (80008e8 <MX_GPIO_Init+0xd0>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a1e      	ldr	r2, [pc, #120]	@ (80008e8 <MX_GPIO_Init+0xd0>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a17      	ldr	r2, [pc, #92]	@ (80008e8 <MX_GPIO_Init+0xd0>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2120      	movs	r1, #32
 80008a2:	4812      	ldr	r0, [pc, #72]	@ (80008ec <MX_GPIO_Init+0xd4>)
 80008a4:	f001 fd36 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <MX_GPIO_Init+0xd8>)
 80008c0:	f001 fb94 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c4:	2320      	movs	r3, #32
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_GPIO_Init+0xd4>)
 80008dc:	f001 fb86 	bl	8001fec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	@ 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020800 	.word	0x40020800

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000906:	f000 fc91 	bl	800122c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800090a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800090e:	2201      	movs	r2, #1
 8000910:	2178      	movs	r1, #120	@ 0x78
 8000912:	485b      	ldr	r0, [pc, #364]	@ (8000a80 <SSD1306_Init+0x180>)
 8000914:	f001 ff70 	bl	80027f8 <HAL_I2C_IsDeviceReady>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800091e:	2300      	movs	r3, #0
 8000920:	e0a9      	b.n	8000a76 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000922:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000926:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000928:	e002      	b.n	8000930 <SSD1306_Init+0x30>
		p--;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3b01      	subs	r3, #1
 800092e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1f9      	bne.n	800092a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000936:	22ae      	movs	r2, #174	@ 0xae
 8000938:	2100      	movs	r1, #0
 800093a:	2078      	movs	r0, #120	@ 0x78
 800093c:	f000 fcf2 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000940:	2220      	movs	r2, #32
 8000942:	2100      	movs	r1, #0
 8000944:	2078      	movs	r0, #120	@ 0x78
 8000946:	f000 fced 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800094a:	2210      	movs	r2, #16
 800094c:	2100      	movs	r1, #0
 800094e:	2078      	movs	r0, #120	@ 0x78
 8000950:	f000 fce8 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000954:	22b0      	movs	r2, #176	@ 0xb0
 8000956:	2100      	movs	r1, #0
 8000958:	2078      	movs	r0, #120	@ 0x78
 800095a:	f000 fce3 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800095e:	22c8      	movs	r2, #200	@ 0xc8
 8000960:	2100      	movs	r1, #0
 8000962:	2078      	movs	r0, #120	@ 0x78
 8000964:	f000 fcde 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2078      	movs	r0, #120	@ 0x78
 800096e:	f000 fcd9 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000972:	2210      	movs	r2, #16
 8000974:	2100      	movs	r1, #0
 8000976:	2078      	movs	r0, #120	@ 0x78
 8000978:	f000 fcd4 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800097c:	2240      	movs	r2, #64	@ 0x40
 800097e:	2100      	movs	r1, #0
 8000980:	2078      	movs	r0, #120	@ 0x78
 8000982:	f000 fccf 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000986:	2281      	movs	r2, #129	@ 0x81
 8000988:	2100      	movs	r1, #0
 800098a:	2078      	movs	r0, #120	@ 0x78
 800098c:	f000 fcca 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000990:	22ff      	movs	r2, #255	@ 0xff
 8000992:	2100      	movs	r1, #0
 8000994:	2078      	movs	r0, #120	@ 0x78
 8000996:	f000 fcc5 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800099a:	22a1      	movs	r2, #161	@ 0xa1
 800099c:	2100      	movs	r1, #0
 800099e:	2078      	movs	r0, #120	@ 0x78
 80009a0:	f000 fcc0 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80009a4:	22a6      	movs	r2, #166	@ 0xa6
 80009a6:	2100      	movs	r1, #0
 80009a8:	2078      	movs	r0, #120	@ 0x78
 80009aa:	f000 fcbb 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80009ae:	22a8      	movs	r2, #168	@ 0xa8
 80009b0:	2100      	movs	r1, #0
 80009b2:	2078      	movs	r0, #120	@ 0x78
 80009b4:	f000 fcb6 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80009b8:	223f      	movs	r2, #63	@ 0x3f
 80009ba:	2100      	movs	r1, #0
 80009bc:	2078      	movs	r0, #120	@ 0x78
 80009be:	f000 fcb1 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009c2:	22a4      	movs	r2, #164	@ 0xa4
 80009c4:	2100      	movs	r1, #0
 80009c6:	2078      	movs	r0, #120	@ 0x78
 80009c8:	f000 fcac 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80009cc:	22d3      	movs	r2, #211	@ 0xd3
 80009ce:	2100      	movs	r1, #0
 80009d0:	2078      	movs	r0, #120	@ 0x78
 80009d2:	f000 fca7 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2078      	movs	r0, #120	@ 0x78
 80009dc:	f000 fca2 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80009e0:	22d5      	movs	r2, #213	@ 0xd5
 80009e2:	2100      	movs	r1, #0
 80009e4:	2078      	movs	r0, #120	@ 0x78
 80009e6:	f000 fc9d 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80009ea:	22f0      	movs	r2, #240	@ 0xf0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2078      	movs	r0, #120	@ 0x78
 80009f0:	f000 fc98 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80009f4:	22d9      	movs	r2, #217	@ 0xd9
 80009f6:	2100      	movs	r1, #0
 80009f8:	2078      	movs	r0, #120	@ 0x78
 80009fa:	f000 fc93 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80009fe:	2222      	movs	r2, #34	@ 0x22
 8000a00:	2100      	movs	r1, #0
 8000a02:	2078      	movs	r0, #120	@ 0x78
 8000a04:	f000 fc8e 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000a08:	22da      	movs	r2, #218	@ 0xda
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2078      	movs	r0, #120	@ 0x78
 8000a0e:	f000 fc89 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000a12:	2212      	movs	r2, #18
 8000a14:	2100      	movs	r1, #0
 8000a16:	2078      	movs	r0, #120	@ 0x78
 8000a18:	f000 fc84 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000a1c:	22db      	movs	r2, #219	@ 0xdb
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2078      	movs	r0, #120	@ 0x78
 8000a22:	f000 fc7f 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000a26:	2220      	movs	r2, #32
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2078      	movs	r0, #120	@ 0x78
 8000a2c:	f000 fc7a 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000a30:	228d      	movs	r2, #141	@ 0x8d
 8000a32:	2100      	movs	r1, #0
 8000a34:	2078      	movs	r0, #120	@ 0x78
 8000a36:	f000 fc75 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a3a:	2214      	movs	r2, #20
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2078      	movs	r0, #120	@ 0x78
 8000a40:	f000 fc70 	bl	8001324 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a44:	22af      	movs	r2, #175	@ 0xaf
 8000a46:	2100      	movs	r1, #0
 8000a48:	2078      	movs	r0, #120	@ 0x78
 8000a4a:	f000 fc6b 	bl	8001324 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a4e:	222e      	movs	r2, #46	@ 0x2e
 8000a50:	2100      	movs	r1, #0
 8000a52:	2078      	movs	r0, #120	@ 0x78
 8000a54:	f000 fc66 	bl	8001324 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f000 f843 	bl	8000ae4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000a5e:	f000 f813 	bl	8000a88 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <SSD1306_Init+0x184>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <SSD1306_Init+0x184>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a6e:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <SSD1306_Init+0x184>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000a74:	2301      	movs	r3, #1
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000038 	.word	0x20000038
 8000a84:	20000534 	.word	0x20000534

08000a88 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000a8e:	2300      	movs	r3, #0
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	e01d      	b.n	8000ad0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	3b50      	subs	r3, #80	@ 0x50
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2078      	movs	r0, #120	@ 0x78
 8000aa0:	f000 fc40 	bl	8001324 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2078      	movs	r0, #120	@ 0x78
 8000aaa:	f000 fc3b 	bl	8001324 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000aae:	2210      	movs	r2, #16
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2078      	movs	r0, #120	@ 0x78
 8000ab4:	f000 fc36 	bl	8001324 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	01db      	lsls	r3, r3, #7
 8000abc:	4a08      	ldr	r2, [pc, #32]	@ (8000ae0 <SSD1306_UpdateScreen+0x58>)
 8000abe:	441a      	add	r2, r3
 8000ac0:	2380      	movs	r3, #128	@ 0x80
 8000ac2:	2140      	movs	r1, #64	@ 0x40
 8000ac4:	2078      	movs	r0, #120	@ 0x78
 8000ac6:	f000 fbc7 	bl	8001258 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	3301      	adds	r3, #1
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	2b07      	cmp	r3, #7
 8000ad4:	d9de      	bls.n	8000a94 <SSD1306_UpdateScreen+0xc>
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000134 	.word	0x20000134

08000ae4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d101      	bne.n	8000af8 <SSD1306_Fill+0x14>
 8000af4:	2300      	movs	r3, #0
 8000af6:	e000      	b.n	8000afa <SSD1306_Fill+0x16>
 8000af8:	23ff      	movs	r3, #255	@ 0xff
 8000afa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000afe:	4619      	mov	r1, r3
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <SSD1306_Fill+0x2c>)
 8000b02:	f005 f82d 	bl	8005b60 <memset>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000134 	.word	0x20000134

08000b14 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80fb      	strh	r3, [r7, #6]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	80bb      	strh	r3, [r7, #4]
 8000b22:	4613      	mov	r3, r2
 8000b24:	70fb      	strb	r3, [r7, #3]
	if (
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b2a:	d848      	bhi.n	8000bbe <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b30:	d845      	bhi.n	8000bbe <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b32:	4b26      	ldr	r3, [pc, #152]	@ (8000bcc <SSD1306_DrawPixel+0xb8>)
 8000b34:	791b      	ldrb	r3, [r3, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d006      	beq.n	8000b48 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	bf0c      	ite	eq
 8000b40:	2301      	moveq	r3, #1
 8000b42:	2300      	movne	r3, #0
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d11a      	bne.n	8000b84 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b4e:	88fa      	ldrh	r2, [r7, #6]
 8000b50:	88bb      	ldrh	r3, [r7, #4]
 8000b52:	08db      	lsrs	r3, r3, #3
 8000b54:	b298      	uxth	r0, r3
 8000b56:	4603      	mov	r3, r0
 8000b58:	01db      	lsls	r3, r3, #7
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd0 <SSD1306_DrawPixel+0xbc>)
 8000b5e:	5cd3      	ldrb	r3, [r2, r3]
 8000b60:	b25a      	sxtb	r2, r3
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	f003 0307 	and.w	r3, r3, #7
 8000b68:	2101      	movs	r1, #1
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b259      	sxtb	r1, r3
 8000b74:	88fa      	ldrh	r2, [r7, #6]
 8000b76:	4603      	mov	r3, r0
 8000b78:	01db      	lsls	r3, r3, #7
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b2c9      	uxtb	r1, r1
 8000b7e:	4a14      	ldr	r2, [pc, #80]	@ (8000bd0 <SSD1306_DrawPixel+0xbc>)
 8000b80:	54d1      	strb	r1, [r2, r3]
 8000b82:	e01d      	b.n	8000bc0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b84:	88fa      	ldrh	r2, [r7, #6]
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	b298      	uxth	r0, r3
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	01db      	lsls	r3, r3, #7
 8000b90:	4413      	add	r3, r2
 8000b92:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd0 <SSD1306_DrawPixel+0xbc>)
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	b25a      	sxtb	r2, r3
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	4013      	ands	r3, r2
 8000bac:	b259      	sxtb	r1, r3
 8000bae:	88fa      	ldrh	r2, [r7, #6]
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	01db      	lsls	r3, r3, #7
 8000bb4:	4413      	add	r3, r2
 8000bb6:	b2c9      	uxtb	r1, r1
 8000bb8:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <SSD1306_DrawPixel+0xbc>)
 8000bba:	54d1      	strb	r1, [r2, r3]
 8000bbc:	e000      	b.n	8000bc0 <SSD1306_DrawPixel+0xac>
		return;
 8000bbe:	bf00      	nop
	}
}
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000534 	.word	0x20000534
 8000bd0:	20000134 	.word	0x20000134

08000bd4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	460a      	mov	r2, r1
 8000bde:	80fb      	strh	r3, [r7, #6]
 8000be0:	4613      	mov	r3, r2
 8000be2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000be4:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <SSD1306_GotoXY+0x28>)
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000bea:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <SSD1306_GotoXY+0x28>)
 8000bec:	88bb      	ldrh	r3, [r7, #4]
 8000bee:	8053      	strh	r3, [r2, #2]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	20000534 	.word	0x20000534

08000c00 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c10:	4b39      	ldr	r3, [pc, #228]	@ (8000cf8 <SSD1306_Putc+0xf8>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
	if (
 8000c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c1e:	dc07      	bgt.n	8000c30 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000c20:	4b35      	ldr	r3, [pc, #212]	@ (8000cf8 <SSD1306_Putc+0xf8>)
 8000c22:	885b      	ldrh	r3, [r3, #2]
 8000c24:	461a      	mov	r2, r3
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c2e:	dd01      	ble.n	8000c34 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	e05d      	b.n	8000cf0 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	e04b      	b.n	8000cd2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	3b20      	subs	r3, #32
 8000c42:	6839      	ldr	r1, [r7, #0]
 8000c44:	7849      	ldrb	r1, [r1, #1]
 8000c46:	fb01 f303 	mul.w	r3, r1, r3
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	440b      	add	r3, r1
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	e030      	b.n	8000cc0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d010      	beq.n	8000c90 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c6e:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <SSD1306_Putc+0xf8>)
 8000c70:	881a      	ldrh	r2, [r3, #0]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	4413      	add	r3, r2
 8000c78:	b298      	uxth	r0, r3
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <SSD1306_Putc+0xf8>)
 8000c7c:	885a      	ldrh	r2, [r3, #2]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	4413      	add	r3, r2
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	79ba      	ldrb	r2, [r7, #6]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f7ff ff43 	bl	8000b14 <SSD1306_DrawPixel>
 8000c8e:	e014      	b.n	8000cba <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <SSD1306_Putc+0xf8>)
 8000c92:	881a      	ldrh	r2, [r3, #0]
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4413      	add	r3, r2
 8000c9a:	b298      	uxth	r0, r3
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <SSD1306_Putc+0xf8>)
 8000c9e:	885a      	ldrh	r2, [r3, #2]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b299      	uxth	r1, r3
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf0c      	ite	eq
 8000cae:	2301      	moveq	r3, #1
 8000cb0:	2300      	movne	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f7ff ff2d 	bl	8000b14 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d3c8      	bcc.n	8000c5e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	785b      	ldrb	r3, [r3, #1]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d3ad      	bcc.n	8000c3a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <SSD1306_Putc+0xf8>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	7812      	ldrb	r2, [r2, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	4b03      	ldr	r3, [pc, #12]	@ (8000cf8 <SSD1306_Putc+0xf8>)
 8000cec:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000534 	.word	0x20000534

08000cfc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	4613      	mov	r3, r2
 8000d08:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000d0a:	e012      	b.n	8000d32 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	79fa      	ldrb	r2, [r7, #7]
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff73 	bl	8000c00 <SSD1306_Putc>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d002      	beq.n	8000d2c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	e008      	b.n	8000d3e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1e8      	bne.n	8000d0c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000d46:	b590      	push	{r4, r7, lr}
 8000d48:	b087      	sub	sp, #28
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	4611      	mov	r1, r2
 8000d52:	461a      	mov	r2, r3
 8000d54:	4623      	mov	r3, r4
 8000d56:	80fb      	strh	r3, [r7, #6]
 8000d58:	4603      	mov	r3, r0
 8000d5a:	80bb      	strh	r3, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
 8000d60:	4613      	mov	r3, r2
 8000d62:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d68:	d901      	bls.n	8000d6e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000d6a:	237f      	movs	r3, #127	@ 0x7f
 8000d6c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d72:	d901      	bls.n	8000d78 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000d74:	237f      	movs	r3, #127	@ 0x7f
 8000d76:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d7c:	d901      	bls.n	8000d82 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000d7e:	233f      	movs	r3, #63	@ 0x3f
 8000d80:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000d82:	883b      	ldrh	r3, [r7, #0]
 8000d84:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d86:	d901      	bls.n	8000d8c <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000d88:	233f      	movs	r3, #63	@ 0x3f
 8000d8a:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8000d8c:	88fa      	ldrh	r2, [r7, #6]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d205      	bcs.n	8000da0 <SSD1306_DrawLine+0x5a>
 8000d94:	887a      	ldrh	r2, [r7, #2]
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	e004      	b.n	8000daa <SSD1306_DrawLine+0x64>
 8000da0:	88fa      	ldrh	r2, [r7, #6]
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8000dac:	88ba      	ldrh	r2, [r7, #4]
 8000dae:	883b      	ldrh	r3, [r7, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d205      	bcs.n	8000dc0 <SSD1306_DrawLine+0x7a>
 8000db4:	883a      	ldrh	r2, [r7, #0]
 8000db6:	88bb      	ldrh	r3, [r7, #4]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	e004      	b.n	8000dca <SSD1306_DrawLine+0x84>
 8000dc0:	88ba      	ldrh	r2, [r7, #4]
 8000dc2:	883b      	ldrh	r3, [r7, #0]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8000dcc:	88fa      	ldrh	r2, [r7, #6]
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d201      	bcs.n	8000dd8 <SSD1306_DrawLine+0x92>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e001      	b.n	8000ddc <SSD1306_DrawLine+0x96>
 8000dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ddc:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8000dde:	88ba      	ldrh	r2, [r7, #4]
 8000de0:	883b      	ldrh	r3, [r7, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d201      	bcs.n	8000dea <SSD1306_DrawLine+0xa4>
 8000de6:	2301      	movs	r3, #1
 8000de8:	e001      	b.n	8000dee <SSD1306_DrawLine+0xa8>
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8000df0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000df4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dd06      	ble.n	8000e0a <SSD1306_DrawLine+0xc4>
 8000dfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e00:	0fda      	lsrs	r2, r3, #31
 8000e02:	4413      	add	r3, r2
 8000e04:	105b      	asrs	r3, r3, #1
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	e006      	b.n	8000e18 <SSD1306_DrawLine+0xd2>
 8000e0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e0e:	0fda      	lsrs	r2, r3, #31
 8000e10:	4413      	add	r3, r2
 8000e12:	105b      	asrs	r3, r3, #1
 8000e14:	425b      	negs	r3, r3
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000e1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d129      	bne.n	8000e76 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000e22:	883a      	ldrh	r2, [r7, #0]
 8000e24:	88bb      	ldrh	r3, [r7, #4]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d205      	bcs.n	8000e36 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000e2a:	883b      	ldrh	r3, [r7, #0]
 8000e2c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000e2e:	88bb      	ldrh	r3, [r7, #4]
 8000e30:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e32:	893b      	ldrh	r3, [r7, #8]
 8000e34:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000e36:	887a      	ldrh	r2, [r7, #2]
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d205      	bcs.n	8000e4a <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e46:	893b      	ldrh	r3, [r7, #8]
 8000e48:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	82bb      	strh	r3, [r7, #20]
 8000e4e:	e00c      	b.n	8000e6a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000e50:	8ab9      	ldrh	r1, [r7, #20]
 8000e52:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fe5b 	bl	8000b14 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000e5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	3301      	adds	r3, #1
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	82bb      	strh	r3, [r7, #20]
 8000e6a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e6e:	883b      	ldrh	r3, [r7, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dded      	ble.n	8000e50 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8000e74:	e05f      	b.n	8000f36 <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8000e76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d129      	bne.n	8000ed2 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000e7e:	883a      	ldrh	r2, [r7, #0]
 8000e80:	88bb      	ldrh	r3, [r7, #4]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d205      	bcs.n	8000e92 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000e86:	883b      	ldrh	r3, [r7, #0]
 8000e88:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e8e:	893b      	ldrh	r3, [r7, #8]
 8000e90:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d205      	bcs.n	8000ea6 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000ea2:	893b      	ldrh	r3, [r7, #8]
 8000ea4:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	82bb      	strh	r3, [r7, #20]
 8000eaa:	e00c      	b.n	8000ec6 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000eac:	8abb      	ldrh	r3, [r7, #20]
 8000eae:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000eb2:	88b9      	ldrh	r1, [r7, #4]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fe2d 	bl	8000b14 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000eba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	82bb      	strh	r3, [r7, #20]
 8000ec6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dded      	ble.n	8000eac <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8000ed0:	e031      	b.n	8000f36 <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000ed2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000ed6:	88b9      	ldrh	r1, [r7, #4]
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe1a 	bl	8000b14 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d103      	bne.n	8000ef0 <SSD1306_DrawLine+0x1aa>
 8000ee8:	88ba      	ldrh	r2, [r7, #4]
 8000eea:	883b      	ldrh	r3, [r7, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d021      	beq.n	8000f34 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8000ef0:	8afb      	ldrh	r3, [r7, #22]
 8000ef2:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000ef4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ef8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000efc:	425b      	negs	r3, r3
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dd08      	ble.n	8000f14 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000f02:	8afa      	ldrh	r2, [r7, #22]
 8000f04:	8a3b      	ldrh	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000f0c:	89fa      	ldrh	r2, [r7, #14]
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	4413      	add	r3, r2
 8000f12:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8000f14:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dad8      	bge.n	8000ed2 <SSD1306_DrawLine+0x18c>
			err += dx;
 8000f20:	8afa      	ldrh	r2, [r7, #22]
 8000f22:	8a7b      	ldrh	r3, [r7, #18]
 8000f24:	4413      	add	r3, r2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000f2a:	89ba      	ldrh	r2, [r7, #12]
 8000f2c:	88bb      	ldrh	r3, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000f32:	e7ce      	b.n	8000ed2 <SSD1306_DrawLine+0x18c>
			break;
 8000f34:	bf00      	nop
		}
	}
}
 8000f36:	371c      	adds	r7, #28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd90      	pop	{r4, r7, pc}

08000f3c <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	4604      	mov	r4, r0
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4623      	mov	r3, r4
 8000f4c:	80fb      	strh	r3, [r7, #6]
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80bb      	strh	r3, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	807b      	strh	r3, [r7, #2]
 8000f56:	4613      	mov	r3, r2
 8000f58:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f5e:	d853      	bhi.n	8001008 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f64:	d850      	bhi.n	8001008 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000f66:	88fa      	ldrh	r2, [r7, #6]
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f6e:	dd03      	ble.n	8000f78 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000f76:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000f78:	88ba      	ldrh	r2, [r7, #4]
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f80:	dd03      	ble.n	8000f8a <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000f88:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000f8a:	88fa      	ldrh	r2, [r7, #6]
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	4413      	add	r3, r2
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	88bc      	ldrh	r4, [r7, #4]
 8000f94:	88b9      	ldrh	r1, [r7, #4]
 8000f96:	88f8      	ldrh	r0, [r7, #6]
 8000f98:	7e3b      	ldrb	r3, [r7, #24]
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	4623      	mov	r3, r4
 8000f9e:	f7ff fed2 	bl	8000d46 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000fa2:	88ba      	ldrh	r2, [r7, #4]
 8000fa4:	883b      	ldrh	r3, [r7, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b299      	uxth	r1, r3
 8000faa:	88fa      	ldrh	r2, [r7, #6]
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b29c      	uxth	r4, r3
 8000fb2:	88ba      	ldrh	r2, [r7, #4]
 8000fb4:	883b      	ldrh	r3, [r7, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	88f8      	ldrh	r0, [r7, #6]
 8000fbc:	7e3b      	ldrb	r3, [r7, #24]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	4622      	mov	r2, r4
 8000fc4:	f7ff febf 	bl	8000d46 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000fc8:	88ba      	ldrh	r2, [r7, #4]
 8000fca:	883b      	ldrh	r3, [r7, #0]
 8000fcc:	4413      	add	r3, r2
 8000fce:	b29c      	uxth	r4, r3
 8000fd0:	88fa      	ldrh	r2, [r7, #6]
 8000fd2:	88b9      	ldrh	r1, [r7, #4]
 8000fd4:	88f8      	ldrh	r0, [r7, #6]
 8000fd6:	7e3b      	ldrb	r3, [r7, #24]
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	4623      	mov	r3, r4
 8000fdc:	f7ff feb3 	bl	8000d46 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000fe0:	88fa      	ldrh	r2, [r7, #6]
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b298      	uxth	r0, r3
 8000fe8:	88fa      	ldrh	r2, [r7, #6]
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	4413      	add	r3, r2
 8000fee:	b29c      	uxth	r4, r3
 8000ff0:	88ba      	ldrh	r2, [r7, #4]
 8000ff2:	883b      	ldrh	r3, [r7, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	88b9      	ldrh	r1, [r7, #4]
 8000ffa:	7e3b      	ldrb	r3, [r7, #24]
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	4613      	mov	r3, r2
 8001000:	4622      	mov	r2, r4
 8001002:	f7ff fea0 	bl	8000d46 <SSD1306_DrawLine>
 8001006:	e000      	b.n	800100a <SSD1306_DrawRectangle+0xce>
		return;
 8001008:	bf00      	nop
}
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}

08001010 <SSD1306_DrawTriangle>:
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}

void SSD1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b085      	sub	sp, #20
 8001014:	af02      	add	r7, sp, #8
 8001016:	4604      	mov	r4, r0
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4623      	mov	r3, r4
 8001020:	80fb      	strh	r3, [r7, #6]
 8001022:	4603      	mov	r3, r0
 8001024:	80bb      	strh	r3, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	4613      	mov	r3, r2
 800102c:	803b      	strh	r3, [r7, #0]
	/* Draw lines */
	SSD1306_DrawLine(x1, y1, x2, y2, color);
 800102e:	883c      	ldrh	r4, [r7, #0]
 8001030:	887a      	ldrh	r2, [r7, #2]
 8001032:	88b9      	ldrh	r1, [r7, #4]
 8001034:	88f8      	ldrh	r0, [r7, #6]
 8001036:	f897 3020 	ldrb.w	r3, [r7, #32]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	4623      	mov	r3, r4
 800103e:	f7ff fe82 	bl	8000d46 <SSD1306_DrawLine>
	SSD1306_DrawLine(x2, y2, x3, y3, color);
 8001042:	8bbc      	ldrh	r4, [r7, #28]
 8001044:	8b3a      	ldrh	r2, [r7, #24]
 8001046:	8839      	ldrh	r1, [r7, #0]
 8001048:	8878      	ldrh	r0, [r7, #2]
 800104a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	4623      	mov	r3, r4
 8001052:	f7ff fe78 	bl	8000d46 <SSD1306_DrawLine>
	SSD1306_DrawLine(x3, y3, x1, y1, color);
 8001056:	88bc      	ldrh	r4, [r7, #4]
 8001058:	88fa      	ldrh	r2, [r7, #6]
 800105a:	8bb9      	ldrh	r1, [r7, #28]
 800105c:	8b38      	ldrh	r0, [r7, #24]
 800105e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	4623      	mov	r3, r4
 8001066:	f7ff fe6e 	bl	8000d46 <SSD1306_DrawLine>
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}

08001072 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001072:	b590      	push	{r4, r7, lr}
 8001074:	b087      	sub	sp, #28
 8001076:	af00      	add	r7, sp, #0
 8001078:	4604      	mov	r4, r0
 800107a:	4608      	mov	r0, r1
 800107c:	4611      	mov	r1, r2
 800107e:	461a      	mov	r2, r3
 8001080:	4623      	mov	r3, r4
 8001082:	80fb      	strh	r3, [r7, #6]
 8001084:	4603      	mov	r3, r0
 8001086:	80bb      	strh	r3, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	f1c3 0301 	rsb	r3, r3, #1
 8001096:	b29b      	uxth	r3, r3
 8001098:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	461a      	mov	r2, r3
 80010a2:	03d2      	lsls	r2, r2, #15
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 80010b4:	88f8      	ldrh	r0, [r7, #6]
 80010b6:	88ba      	ldrh	r2, [r7, #4]
 80010b8:	887b      	ldrh	r3, [r7, #2]
 80010ba:	4413      	add	r3, r2
 80010bc:	b29b      	uxth	r3, r3
 80010be:	787a      	ldrb	r2, [r7, #1]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fd27 	bl	8000b14 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80010c6:	88f8      	ldrh	r0, [r7, #6]
 80010c8:	88ba      	ldrh	r2, [r7, #4]
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	787a      	ldrb	r2, [r7, #1]
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fd1e 	bl	8000b14 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 80010d8:	88fa      	ldrh	r2, [r7, #6]
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	4413      	add	r3, r2
 80010de:	b29b      	uxth	r3, r3
 80010e0:	88b9      	ldrh	r1, [r7, #4]
 80010e2:	787a      	ldrb	r2, [r7, #1]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fd15 	bl	8000b14 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80010ea:	88fa      	ldrh	r2, [r7, #6]
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	88b9      	ldrh	r1, [r7, #4]
 80010f4:	787a      	ldrb	r2, [r7, #1]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fd0c 	bl	8000b14 <SSD1306_DrawPixel>

    while (x < y) {
 80010fc:	e081      	b.n	8001202 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 80010fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0e      	blt.n	8001124 <SSD1306_DrawCircle+0xb2>
            y--;
 8001106:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800110a:	b29b      	uxth	r3, r3
 800110c:	3b01      	subs	r3, #1
 800110e:	b29b      	uxth	r3, r3
 8001110:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001112:	8a7b      	ldrh	r3, [r7, #18]
 8001114:	3302      	adds	r3, #2
 8001116:	b29b      	uxth	r3, r3
 8001118:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800111a:	8afa      	ldrh	r2, [r7, #22]
 800111c:	8a7b      	ldrh	r3, [r7, #18]
 800111e:	4413      	add	r3, r2
 8001120:	b29b      	uxth	r3, r3
 8001122:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001124:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001128:	b29b      	uxth	r3, r3
 800112a:	3301      	adds	r3, #1
 800112c:	b29b      	uxth	r3, r3
 800112e:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001130:	8abb      	ldrh	r3, [r7, #20]
 8001132:	3302      	adds	r3, #2
 8001134:	b29b      	uxth	r3, r3
 8001136:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8001138:	8afa      	ldrh	r2, [r7, #22]
 800113a:	8abb      	ldrh	r3, [r7, #20]
 800113c:	4413      	add	r3, r2
 800113e:	b29b      	uxth	r3, r3
 8001140:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8001142:	88fa      	ldrh	r2, [r7, #6]
 8001144:	8a3b      	ldrh	r3, [r7, #16]
 8001146:	4413      	add	r3, r2
 8001148:	b298      	uxth	r0, r3
 800114a:	88ba      	ldrh	r2, [r7, #4]
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	4413      	add	r3, r2
 8001150:	b29b      	uxth	r3, r3
 8001152:	787a      	ldrb	r2, [r7, #1]
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fcdd 	bl	8000b14 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	8a3b      	ldrh	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	b298      	uxth	r0, r3
 8001162:	88ba      	ldrh	r2, [r7, #4]
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	4413      	add	r3, r2
 8001168:	b29b      	uxth	r3, r3
 800116a:	787a      	ldrb	r2, [r7, #1]
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fcd1 	bl	8000b14 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8001172:	88fa      	ldrh	r2, [r7, #6]
 8001174:	8a3b      	ldrh	r3, [r7, #16]
 8001176:	4413      	add	r3, r2
 8001178:	b298      	uxth	r0, r3
 800117a:	88ba      	ldrh	r2, [r7, #4]
 800117c:	89fb      	ldrh	r3, [r7, #14]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	b29b      	uxth	r3, r3
 8001182:	787a      	ldrb	r2, [r7, #1]
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fcc5 	bl	8000b14 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 800118a:	88fa      	ldrh	r2, [r7, #6]
 800118c:	8a3b      	ldrh	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	b298      	uxth	r0, r3
 8001192:	88ba      	ldrh	r2, [r7, #4]
 8001194:	89fb      	ldrh	r3, [r7, #14]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	787a      	ldrb	r2, [r7, #1]
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fcb9 	bl	8000b14 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 80011a2:	88fa      	ldrh	r2, [r7, #6]
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	4413      	add	r3, r2
 80011a8:	b298      	uxth	r0, r3
 80011aa:	88ba      	ldrh	r2, [r7, #4]
 80011ac:	8a3b      	ldrh	r3, [r7, #16]
 80011ae:	4413      	add	r3, r2
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	787a      	ldrb	r2, [r7, #1]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fcad 	bl	8000b14 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 80011ba:	88fa      	ldrh	r2, [r7, #6]
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	b298      	uxth	r0, r3
 80011c2:	88ba      	ldrh	r2, [r7, #4]
 80011c4:	8a3b      	ldrh	r3, [r7, #16]
 80011c6:	4413      	add	r3, r2
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	787a      	ldrb	r2, [r7, #1]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f7ff fca1 	bl	8000b14 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 80011d2:	88fa      	ldrh	r2, [r7, #6]
 80011d4:	89fb      	ldrh	r3, [r7, #14]
 80011d6:	4413      	add	r3, r2
 80011d8:	b298      	uxth	r0, r3
 80011da:	88ba      	ldrh	r2, [r7, #4]
 80011dc:	8a3b      	ldrh	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	787a      	ldrb	r2, [r7, #1]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fc95 	bl	8000b14 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 80011ea:	88fa      	ldrh	r2, [r7, #6]
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	b298      	uxth	r0, r3
 80011f2:	88ba      	ldrh	r2, [r7, #4]
 80011f4:	8a3b      	ldrh	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	787a      	ldrb	r2, [r7, #1]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fc89 	bl	8000b14 <SSD1306_DrawPixel>
    while (x < y) {
 8001202:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800120a:	429a      	cmp	r2, r3
 800120c:	f6ff af77 	blt.w	80010fe <SSD1306_DrawCircle+0x8c>
    }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}

0800121a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff fc60 	bl	8000ae4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001224:	f7ff fc30 	bl	8000a88 <SSD1306_UpdateScreen>
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <ssd1306_I2C_Init+0x28>)
 8001234:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001236:	e002      	b.n	800123e <ssd1306_I2C_Init+0x12>
		p--;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f9      	bne.n	8001238 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	0003d090 	.word	0x0003d090

08001258 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b0c7      	sub	sp, #284	@ 0x11c
 800125c:	af02      	add	r7, sp, #8
 800125e:	4604      	mov	r4, r0
 8001260:	4608      	mov	r0, r1
 8001262:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001266:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800126a:	600a      	str	r2, [r1, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001272:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001276:	4622      	mov	r2, r4
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800127e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001282:	4602      	mov	r2, r0
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800128a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800128e:	460a      	mov	r2, r1
 8001290:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001292:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800129a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800129e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80012a2:	7812      	ldrb	r2, [r2, #0]
 80012a4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80012ac:	e015      	b.n	80012da <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80012ae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012b2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012b6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	441a      	add	r2, r3
 80012be:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012c2:	3301      	adds	r3, #1
 80012c4:	7811      	ldrb	r1, [r2, #0]
 80012c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012ca:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80012ce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80012d0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012d4:	3301      	adds	r3, #1
 80012d6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80012da:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012de:	b29b      	uxth	r3, r3
 80012e0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012e4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80012e8:	8812      	ldrh	r2, [r2, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d8df      	bhi.n	80012ae <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80012ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012f2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b299      	uxth	r1, r3
 80012fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	f107 020c 	add.w	r2, r7, #12
 800130c:	200a      	movs	r0, #10
 800130e:	9000      	str	r0, [sp, #0]
 8001310:	4803      	ldr	r0, [pc, #12]	@ (8001320 <ssd1306_I2C_WriteMulti+0xc8>)
 8001312:	f001 f973 	bl	80025fc <HAL_I2C_Master_Transmit>
}
 8001316:	bf00      	nop
 8001318:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	20000038 	.word	0x20000038

08001324 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af02      	add	r7, sp, #8
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	460b      	mov	r3, r1
 8001330:	71bb      	strb	r3, [r7, #6]
 8001332:	4613      	mov	r3, r2
 8001334:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800133a:	797b      	ldrb	r3, [r7, #5]
 800133c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	b299      	uxth	r1, r3
 8001342:	f107 020c 	add.w	r2, r7, #12
 8001346:	230a      	movs	r3, #10
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2302      	movs	r3, #2
 800134c:	4803      	ldr	r0, [pc, #12]	@ (800135c <ssd1306_I2C_Write+0x38>)
 800134e:	f001 f955 	bl	80025fc <HAL_I2C_Master_Transmit>
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000038 	.word	0x20000038

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <HAL_MspInit+0x4c>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001374:	6453      	str	r3, [r2, #68]	@ 0x44
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <HAL_MspInit+0x4c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <HAL_MspInit+0x4c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	@ 0x40
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_MspInit+0x4c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800139e:	2007      	movs	r0, #7
 80013a0:	f000 fac8 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a38      	ldr	r2, [pc, #224]	@ (80014b0 <HAL_I2C_MspInit+0x100>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d16a      	bne.n	80014a8 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <HAL_I2C_MspInit+0x104>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a36      	ldr	r2, [pc, #216]	@ (80014b4 <HAL_I2C_MspInit+0x104>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <HAL_I2C_MspInit+0x104>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f4:	2312      	movs	r3, #18
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001400:	2304      	movs	r3, #4
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	482b      	ldr	r0, [pc, #172]	@ (80014b8 <HAL_I2C_MspInit+0x108>)
 800140c:	f000 fdee 	bl	8001fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4b27      	ldr	r3, [pc, #156]	@ (80014b4 <HAL_I2C_MspInit+0x104>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	4a26      	ldr	r2, [pc, #152]	@ (80014b4 <HAL_I2C_MspInit+0x104>)
 800141a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800141e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001420:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <HAL_I2C_MspInit+0x104>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800142c:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 800142e:	4a24      	ldr	r2, [pc, #144]	@ (80014c0 <HAL_I2C_MspInit+0x110>)
 8001430:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001432:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 8001434:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001438:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 800143c:	2240      	movs	r2, #64	@ 0x40
 800143e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 8001448:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800144c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800146c:	4813      	ldr	r0, [pc, #76]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 800146e:	f000 faa3 	bl	80019b8 <HAL_DMA_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001478:	f7ff fa3c 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a0f      	ldr	r2, [pc, #60]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 8001480:	635a      	str	r2, [r3, #52]	@ 0x34
 8001482:	4a0e      	ldr	r2, [pc, #56]	@ (80014bc <HAL_I2C_MspInit+0x10c>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	201f      	movs	r0, #31
 800148e:	f000 fa5c 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001492:	201f      	movs	r0, #31
 8001494:	f000 fa75 	bl	8001982 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2020      	movs	r0, #32
 800149e:	f000 fa54 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014a2:	2020      	movs	r0, #32
 80014a4:	f000 fa6d 	bl	8001982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	@ 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40005400 	.word	0x40005400
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400
 80014bc:	2000008c 	.word	0x2000008c
 80014c0:	400260a0 	.word	0x400260a0

080014c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a19      	ldr	r2, [pc, #100]	@ (8001548 <HAL_UART_MspInit+0x84>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d12b      	bne.n	800153e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <HAL_UART_MspInit+0x88>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	4a17      	ldr	r2, [pc, #92]	@ (800154c <HAL_UART_MspInit+0x88>)
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <HAL_UART_MspInit+0x88>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <HAL_UART_MspInit+0x88>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a10      	ldr	r2, [pc, #64]	@ (800154c <HAL_UART_MspInit+0x88>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <HAL_UART_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800151e:	230c      	movs	r3, #12
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800152e:	2307      	movs	r3, #7
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	@ (8001550 <HAL_UART_MspInit+0x8c>)
 800153a:	f000 fd57 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	@ 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40004400 	.word	0x40004400
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <NMI_Handler+0x4>

0800155c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <MemManage_Handler+0x4>

0800156c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <UsageFault_Handler+0x4>

0800157c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015aa:	f000 f8af 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <DMA1_Stream6_IRQHandler+0x10>)
 80015ba:	f000 facd 	bl	8001b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000008c 	.word	0x2000008c

080015c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <I2C1_EV_IRQHandler+0x10>)
 80015ce:	f001 fa41 	bl	8002a54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000038 	.word	0x20000038

080015dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <I2C1_ER_IRQHandler+0x10>)
 80015e2:	f001 fb8a 	bl	8002cfa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000038 	.word	0x20000038

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	@ (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800164c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001618:	f7ff ffea 	bl	80015f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800161c:	480c      	ldr	r0, [pc, #48]	@ (8001650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800161e:	490d      	ldr	r1, [pc, #52]	@ (8001654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001620:	4a0d      	ldr	r2, [pc, #52]	@ (8001658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001634:	4c0a      	ldr	r4, [pc, #40]	@ (8001660 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001642:	f004 fa95 	bl	8005b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7fe ff55 	bl	80004f4 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001658:	08007724 	.word	0x08007724
  ldr r2, =_sbss
 800165c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001660:	20000540 	.word	0x20000540

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800166c:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <HAL_Init+0x40>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001678:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <HAL_Init+0x40>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	@ (80016a8 <HAL_Init+0x40>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f94f 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	2000      	movs	r0, #0
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fe60 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f967 	bl	800199e <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 f92f 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	@ (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000010 	.word	0x20000010
 8001704:	20000018 	.word	0x20000018
 8001708:	20000014 	.word	0x20000014

0800170c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000018 	.word	0x20000018
 8001730:	2000053c 	.word	0x2000053c

08001734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b03      	ldr	r3, [pc, #12]	@ (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000053c 	.word	0x2000053c

0800174c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff ffee 	bl	8001734 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <HAL_Delay+0x44>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffde 	bl	8001734 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000018 	.word	0x20000018

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	@ (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	@ (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	@ (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff29 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff3e 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff8e 	bl	8001888 <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5d 	bl	8001834 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff31 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffa2 	bl	80018f0 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff feb6 	bl	8001734 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e099      	b.n	8001b08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f4:	e00f      	b.n	8001a16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019f6:	f7ff fe9d 	bl	8001734 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d908      	bls.n	8001a16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e078      	b.n	8001b08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e8      	bne.n	80019f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	4b38      	ldr	r3, [pc, #224]	@ (8001b10 <HAL_DMA_Init+0x158>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d107      	bne.n	8001a80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f023 0307 	bic.w	r3, r3, #7
 8001a96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d117      	bne.n	8001ada <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00e      	beq.n	8001ada <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fa19 	bl	8001ef4 <DMA_CheckFifoParam>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2240      	movs	r2, #64	@ 0x40
 8001acc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e016      	b.n	8001b08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f9d0 	bl	8001e88 <DMA_CalcBaseAndBitshift>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af0:	223f      	movs	r2, #63	@ 0x3f
 8001af2:	409a      	lsls	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	f010803f 	.word	0xf010803f

08001b14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2280      	movs	r2, #128	@ 0x80
 8001b2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00c      	b.n	8001b4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2205      	movs	r2, #5
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b64:	4b8e      	ldr	r3, [pc, #568]	@ (8001da0 <HAL_DMA_IRQHandler+0x248>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a8e      	ldr	r2, [pc, #568]	@ (8001da4 <HAL_DMA_IRQHandler+0x24c>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a9b      	lsrs	r3, r3, #10
 8001b70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b82:	2208      	movs	r2, #8
 8001b84:	409a      	lsls	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01a      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc8:	2201      	movs	r2, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d012      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be6:	2201      	movs	r2, #1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf2:	f043 0202 	orr.w	r2, r3, #2
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfe:	2204      	movs	r2, #4
 8001c00:	409a      	lsls	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c34:	2210      	movs	r2, #16
 8001c36:	409a      	lsls	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d043      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03c      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	2210      	movs	r2, #16
 8001c54:	409a      	lsls	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d018      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d108      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d024      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
 8001c86:	e01f      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
 8001c98:	e016      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0208 	bic.w	r2, r2, #8
 8001cb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ccc:	2220      	movs	r2, #32
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 808f 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8087 	beq.w	8001df8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cee:	2220      	movs	r2, #32
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d136      	bne.n	8001d70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0216 	bic.w	r2, r2, #22
 8001d10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d103      	bne.n	8001d32 <HAL_DMA_IRQHandler+0x1da>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0208 	bic.w	r2, r2, #8
 8001d40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d46:	223f      	movs	r2, #63	@ 0x3f
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d07e      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
        }
        return;
 8001d6e:	e079      	b.n	8001e64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01d      	beq.n	8001dba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d031      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
 8001d9c:	e02c      	b.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
 8001d9e:	bf00      	nop
 8001da0:	20000010 	.word	0x20000010
 8001da4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d023      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
 8001db8:	e01e      	b.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10f      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0210 	bic.w	r2, r2, #16
 8001dd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d032      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d022      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2205      	movs	r2, #5
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d307      	bcc.n	8001e40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f2      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x2cc>
 8001e3e:	e000      	b.n	8001e42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	e000      	b.n	8001e66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e64:	bf00      	nop
    }
  }
}
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e7a:	b2db      	uxtb	r3, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3b10      	subs	r3, #16
 8001e98:	4a14      	ldr	r2, [pc, #80]	@ (8001eec <DMA_CalcBaseAndBitshift+0x64>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ea2:	4a13      	ldr	r2, [pc, #76]	@ (8001ef0 <DMA_CalcBaseAndBitshift+0x68>)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d909      	bls.n	8001eca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	1d1a      	adds	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ec8:	e007      	b.n	8001eda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ed2:	f023 0303 	bic.w	r3, r3, #3
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	aaaaaaab 	.word	0xaaaaaaab
 8001ef0:	080076e4 	.word	0x080076e4

08001ef4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11f      	bne.n	8001f4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d856      	bhi.n	8001fc2 <DMA_CheckFifoParam+0xce>
 8001f14:	a201      	add	r2, pc, #4	@ (adr r2, 8001f1c <DMA_CheckFifoParam+0x28>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f3f 	.word	0x08001f3f
 8001f24:	08001f2d 	.word	0x08001f2d
 8001f28:	08001fc3 	.word	0x08001fc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d046      	beq.n	8001fc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f3c:	e043      	b.n	8001fc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f46:	d140      	bne.n	8001fca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f4c:	e03d      	b.n	8001fca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f56:	d121      	bne.n	8001f9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d837      	bhi.n	8001fce <DMA_CheckFifoParam+0xda>
 8001f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f64 <DMA_CheckFifoParam+0x70>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f7b 	.word	0x08001f7b
 8001f6c:	08001f75 	.word	0x08001f75
 8001f70:	08001f8d 	.word	0x08001f8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
      break;
 8001f78:	e030      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d025      	beq.n	8001fd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8a:	e022      	b.n	8001fd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f94:	d11f      	bne.n	8001fd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f9a:	e01c      	b.n	8001fd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d903      	bls.n	8001faa <DMA_CheckFifoParam+0xb6>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d003      	beq.n	8001fb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fa8:	e018      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
      break;
 8001fae:	e015      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00e      	beq.n	8001fda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc0:	e00b      	b.n	8001fda <DMA_CheckFifoParam+0xe6>
      break;
 8001fc2:	bf00      	nop
 8001fc4:	e00a      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fc6:	bf00      	nop
 8001fc8:	e008      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fca:	bf00      	nop
 8001fcc:	e006      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fce:	bf00      	nop
 8001fd0:	e004      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fd2:	bf00      	nop
 8001fd4:	e002      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;   
 8001fd6:	bf00      	nop
 8001fd8:	e000      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fda:	bf00      	nop
    }
  } 
  
  return status; 
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	@ 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e165      	b.n	80022d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	f040 8154 	bne.w	80022ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d005      	beq.n	800203e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	2b02      	cmp	r3, #2
 800203c:	d130      	bne.n	80020a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 0201 	and.w	r2, r3, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d017      	beq.n	80020dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d123      	bne.n	8002130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3208      	adds	r2, #8
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	69b9      	ldr	r1, [r7, #24]
 800212c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0203 	and.w	r2, r3, #3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80ae 	beq.w	80022ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b5d      	ldr	r3, [pc, #372]	@ (80022ec <HAL_GPIO_Init+0x300>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	4a5c      	ldr	r2, [pc, #368]	@ (80022ec <HAL_GPIO_Init+0x300>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002180:	6453      	str	r3, [r2, #68]	@ 0x44
 8002182:	4b5a      	ldr	r3, [pc, #360]	@ (80022ec <HAL_GPIO_Init+0x300>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218e:	4a58      	ldr	r2, [pc, #352]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4f      	ldr	r2, [pc, #316]	@ (80022f4 <HAL_GPIO_Init+0x308>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d025      	beq.n	8002206 <HAL_GPIO_Init+0x21a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4e      	ldr	r2, [pc, #312]	@ (80022f8 <HAL_GPIO_Init+0x30c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <HAL_GPIO_Init+0x216>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4d      	ldr	r2, [pc, #308]	@ (80022fc <HAL_GPIO_Init+0x310>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d019      	beq.n	80021fe <HAL_GPIO_Init+0x212>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002300 <HAL_GPIO_Init+0x314>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0x20e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002304 <HAL_GPIO_Init+0x318>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00d      	beq.n	80021f6 <HAL_GPIO_Init+0x20a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002308 <HAL_GPIO_Init+0x31c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <HAL_GPIO_Init+0x206>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a49      	ldr	r2, [pc, #292]	@ (800230c <HAL_GPIO_Init+0x320>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x202>
 80021ea:	2306      	movs	r3, #6
 80021ec:	e00c      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021ee:	2307      	movs	r3, #7
 80021f0:	e00a      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021f2:	2305      	movs	r3, #5
 80021f4:	e008      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021f6:	2304      	movs	r3, #4
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021fa:	2303      	movs	r3, #3
 80021fc:	e004      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 80021fe:	2302      	movs	r3, #2
 8002200:	e002      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_GPIO_Init+0x21c>
 8002206:	2300      	movs	r3, #0
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	f002 0203 	and.w	r2, r2, #3
 800220e:	0092      	lsls	r2, r2, #2
 8002210:	4093      	lsls	r3, r2
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002218:	4935      	ldr	r1, [pc, #212]	@ (80022f0 <HAL_GPIO_Init+0x304>)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	089b      	lsrs	r3, r3, #2
 800221e:	3302      	adds	r3, #2
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002226:	4b3a      	ldr	r3, [pc, #232]	@ (8002310 <HAL_GPIO_Init+0x324>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800224a:	4a31      	ldr	r2, [pc, #196]	@ (8002310 <HAL_GPIO_Init+0x324>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002250:	4b2f      	ldr	r3, [pc, #188]	@ (8002310 <HAL_GPIO_Init+0x324>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002274:	4a26      	ldr	r2, [pc, #152]	@ (8002310 <HAL_GPIO_Init+0x324>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800227a:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <HAL_GPIO_Init+0x324>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800229e:	4a1c      	ldr	r2, [pc, #112]	@ (8002310 <HAL_GPIO_Init+0x324>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002310 <HAL_GPIO_Init+0x324>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022c8:	4a11      	ldr	r2, [pc, #68]	@ (8002310 <HAL_GPIO_Init+0x324>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b0f      	cmp	r3, #15
 80022d8:	f67f ae96 	bls.w	8002008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3724      	adds	r7, #36	@ 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40013800 	.word	0x40013800
 80022f4:	40020000 	.word	0x40020000
 80022f8:	40020400 	.word	0x40020400
 80022fc:	40020800 	.word	0x40020800
 8002300:	40020c00 	.word	0x40020c00
 8002304:	40021000 	.word	0x40021000
 8002308:	40021400 	.word	0x40021400
 800230c:	40021800 	.word	0x40021800
 8002310:	40013c00 	.word	0x40013c00

08002314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
 8002320:	4613      	mov	r3, r2
 8002322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002330:	e003      	b.n	800233a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e12b      	b.n	80025b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff f81e 	bl	80013b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	@ 0x24
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800239a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023ac:	f002 fbc2 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 80023b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a81      	ldr	r2, [pc, #516]	@ (80025bc <HAL_I2C_Init+0x274>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d807      	bhi.n	80023cc <HAL_I2C_Init+0x84>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a80      	ldr	r2, [pc, #512]	@ (80025c0 <HAL_I2C_Init+0x278>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bf94      	ite	ls
 80023c4:	2301      	movls	r3, #1
 80023c6:	2300      	movhi	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e006      	b.n	80023da <HAL_I2C_Init+0x92>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4a7d      	ldr	r2, [pc, #500]	@ (80025c4 <HAL_I2C_Init+0x27c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	bf94      	ite	ls
 80023d4:	2301      	movls	r3, #1
 80023d6:	2300      	movhi	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0e7      	b.n	80025b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a78      	ldr	r2, [pc, #480]	@ (80025c8 <HAL_I2C_Init+0x280>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0c9b      	lsrs	r3, r3, #18
 80023ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a6a      	ldr	r2, [pc, #424]	@ (80025bc <HAL_I2C_Init+0x274>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d802      	bhi.n	800241c <HAL_I2C_Init+0xd4>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	3301      	adds	r3, #1
 800241a:	e009      	b.n	8002430 <HAL_I2C_Init+0xe8>
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	4a69      	ldr	r2, [pc, #420]	@ (80025cc <HAL_I2C_Init+0x284>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	099b      	lsrs	r3, r3, #6
 800242e:	3301      	adds	r3, #1
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	430b      	orrs	r3, r1
 8002436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002442:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	495c      	ldr	r1, [pc, #368]	@ (80025bc <HAL_I2C_Init+0x274>)
 800244c:	428b      	cmp	r3, r1
 800244e:	d819      	bhi.n	8002484 <HAL_I2C_Init+0x13c>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1e59      	subs	r1, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fbb1 f3f3 	udiv	r3, r1, r3
 800245e:	1c59      	adds	r1, r3, #1
 8002460:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002464:	400b      	ands	r3, r1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_I2C_Init+0x138>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1e59      	subs	r1, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fbb1 f3f3 	udiv	r3, r1, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247e:	e051      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002480:	2304      	movs	r3, #4
 8002482:	e04f      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d111      	bne.n	80024b0 <HAL_I2C_Init+0x168>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e58      	subs	r0, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	440b      	add	r3, r1
 800249a:	fbb0 f3f3 	udiv	r3, r0, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e012      	b.n	80024d6 <HAL_I2C_Init+0x18e>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1e58      	subs	r0, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	0099      	lsls	r1, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Init+0x196>
 80024da:	2301      	movs	r3, #1
 80024dc:	e022      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10e      	bne.n	8002504 <HAL_I2C_Init+0x1bc>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e58      	subs	r0, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	440b      	add	r3, r1
 80024f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002502:	e00f      	b.n	8002524 <HAL_I2C_Init+0x1dc>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e58      	subs	r0, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	0099      	lsls	r1, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	6809      	ldr	r1, [r1, #0]
 8002528:	4313      	orrs	r3, r2
 800252a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002552:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6911      	ldr	r1, [r2, #16]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68d2      	ldr	r2, [r2, #12]
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	430b      	orrs	r3, r1
 8002566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	000186a0 	.word	0x000186a0
 80025c0:	001e847f 	.word	0x001e847f
 80025c4:	003d08ff 	.word	0x003d08ff
 80025c8:	431bde83 	.word	0x431bde83
 80025cc:	10624dd3 	.word	0x10624dd3

080025d0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e2:	2b80      	cmp	r3, #128	@ 0x80
 80025e4:	d103      	bne.n	80025ee <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	461a      	mov	r2, r3
 8002608:	460b      	mov	r3, r1
 800260a:	817b      	strh	r3, [r7, #10]
 800260c:	4613      	mov	r3, r2
 800260e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002610:	f7ff f890 	bl	8001734 <HAL_GetTick>
 8002614:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b20      	cmp	r3, #32
 8002620:	f040 80e0 	bne.w	80027e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2319      	movs	r3, #25
 800262a:	2201      	movs	r2, #1
 800262c:	4970      	ldr	r1, [pc, #448]	@ (80027f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f001 ff18 	bl	8004464 <I2C_WaitOnFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800263a:	2302      	movs	r3, #2
 800263c:	e0d3      	b.n	80027e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_I2C_Master_Transmit+0x50>
 8002648:	2302      	movs	r3, #2
 800264a:	e0cc      	b.n	80027e6 <HAL_I2C_Master_Transmit+0x1ea>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	d007      	beq.n	8002672 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0201 	orr.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002680:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2221      	movs	r2, #33	@ 0x21
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2210      	movs	r2, #16
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	893a      	ldrh	r2, [r7, #8]
 80026a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4a50      	ldr	r2, [pc, #320]	@ (80027f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80026b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026b4:	8979      	ldrh	r1, [r7, #10]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	6a3a      	ldr	r2, [r7, #32]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f001 fda8 	bl	8004210 <I2C_MasterRequestWrite>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e08d      	b.n	80027e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026e0:	e066      	b.n	80027b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	6a39      	ldr	r1, [r7, #32]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f001 ffd6 	bl	8004698 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00d      	beq.n	800270e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d107      	bne.n	800270a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002708:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06b      	b.n	80027e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b04      	cmp	r3, #4
 800274a:	d11b      	bne.n	8002784 <HAL_I2C_Master_Transmit+0x188>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d017      	beq.n	8002784 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	781a      	ldrb	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	6a39      	ldr	r1, [r7, #32]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f001 ffcd 	bl	8004728 <I2C_WaitOnBTFFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00d      	beq.n	80027b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	2b04      	cmp	r3, #4
 800279a:	d107      	bne.n	80027ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e01a      	b.n	80027e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d194      	bne.n	80026e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
  }
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	00100002 	.word	0x00100002
 80027f4:	ffff0000 	.word	0xffff0000

080027f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	@ 0x28
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	460b      	mov	r3, r1
 8002806:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7fe ff94 	bl	8001734 <HAL_GetTick>
 800280c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b20      	cmp	r3, #32
 800281c:	f040 8111 	bne.w	8002a42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	2319      	movs	r3, #25
 8002826:	2201      	movs	r2, #1
 8002828:	4988      	ldr	r1, [pc, #544]	@ (8002a4c <HAL_I2C_IsDeviceReady+0x254>)
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f001 fe1a 	bl	8004464 <I2C_WaitOnFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002836:	2302      	movs	r3, #2
 8002838:	e104      	b.n	8002a44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_I2C_IsDeviceReady+0x50>
 8002844:	2302      	movs	r3, #2
 8002846:	e0fd      	b.n	8002a44 <HAL_I2C_IsDeviceReady+0x24c>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b01      	cmp	r3, #1
 800285c:	d007      	beq.n	800286e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0201 	orr.w	r2, r2, #1
 800286c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800287c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2224      	movs	r2, #36	@ 0x24
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a70      	ldr	r2, [pc, #448]	@ (8002a50 <HAL_I2C_IsDeviceReady+0x258>)
 8002890:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f001 fdd8 	bl	8004464 <I2C_WaitOnFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00d      	beq.n	80028d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c8:	d103      	bne.n	80028d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028d0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0b6      	b.n	8002a44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028d6:	897b      	ldrh	r3, [r7, #10]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80028e6:	f7fe ff25 	bl	8001734 <HAL_GetTick>
 80028ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	bf0c      	ite	eq
 80028fa:	2301      	moveq	r3, #1
 80028fc:	2300      	movne	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800290c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002910:	bf0c      	ite	eq
 8002912:	2301      	moveq	r3, #1
 8002914:	2300      	movne	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800291a:	e025      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800291c:	f7fe ff0a 	bl	8001734 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d302      	bcc.n	8002932 <HAL_I2C_IsDeviceReady+0x13a>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	22a0      	movs	r2, #160	@ 0xa0
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b02      	cmp	r3, #2
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2ba0      	cmp	r3, #160	@ 0xa0
 8002972:	d005      	beq.n	8002980 <HAL_I2C_IsDeviceReady+0x188>
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <HAL_I2C_IsDeviceReady+0x188>
 800297a:	7dbb      	ldrb	r3, [r7, #22]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0cd      	beq.n	800291c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b02      	cmp	r3, #2
 8002994:	d129      	bne.n	80029ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2319      	movs	r3, #25
 80029c2:	2201      	movs	r2, #1
 80029c4:	4921      	ldr	r1, [pc, #132]	@ (8002a4c <HAL_I2C_IsDeviceReady+0x254>)
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f001 fd4c 	bl	8004464 <I2C_WaitOnFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e036      	b.n	8002a44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e02c      	b.n	8002a44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2319      	movs	r3, #25
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	490f      	ldr	r1, [pc, #60]	@ (8002a4c <HAL_I2C_IsDeviceReady+0x254>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f001 fd28 	bl	8004464 <I2C_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e012      	b.n	8002a44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f4ff af32 	bcc.w	8002892 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a42:	2302      	movs	r3, #2
  }
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	00100002 	.word	0x00100002
 8002a50:	ffff0000 	.word	0xffff0000

08002a54 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a74:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a7c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	2b10      	cmp	r3, #16
 8002a82:	d003      	beq.n	8002a8c <HAL_I2C_EV_IRQHandler+0x38>
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b40      	cmp	r3, #64	@ 0x40
 8002a88:	f040 80b1 	bne.w	8002bee <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002aac:	d003      	beq.n	8002ab6 <HAL_I2C_EV_IRQHandler+0x62>
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002ab4:	d101      	bne.n	8002aba <HAL_I2C_EV_IRQHandler+0x66>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_I2C_EV_IRQHandler+0x68>
 8002aba:	2300      	movs	r3, #0
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	f000 8114 	beq.w	8002cea <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00b      	beq.n	8002ae4 <HAL_I2C_EV_IRQHandler+0x90>
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f001 fecf 	bl	800487a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fd7a 	bl	80035d6 <I2C_Master_SB>
 8002ae2:	e083      	b.n	8002bec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_I2C_EV_IRQHandler+0xac>
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fdf2 	bl	80036e2 <I2C_Master_ADD10>
 8002afe:	e075      	b.n	8002bec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_I2C_EV_IRQHandler+0xc8>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fe0e 	bl	8003736 <I2C_Master_ADDR>
 8002b1a:	e067      	b.n	8002bec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d036      	beq.n	8002b94 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b34:	f000 80db 	beq.w	8002cee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00d      	beq.n	8002b5e <HAL_I2C_EV_IRQHandler+0x10a>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_I2C_EV_IRQHandler+0x10a>
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f9d6 	bl	8002f08 <I2C_MasterTransmit_TXE>
 8002b5c:	e046      	b.n	8002bec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80c2 	beq.w	8002cee <HAL_I2C_EV_IRQHandler+0x29a>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80bc 	beq.w	8002cee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002b76:	7bbb      	ldrb	r3, [r7, #14]
 8002b78:	2b21      	cmp	r3, #33	@ 0x21
 8002b7a:	d103      	bne.n	8002b84 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fa5f 	bl	8003040 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b82:	e0b4      	b.n	8002cee <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b40      	cmp	r3, #64	@ 0x40
 8002b88:	f040 80b1 	bne.w	8002cee <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 facd 	bl	800312c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b92:	e0ac      	b.n	8002cee <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ba2:	f000 80a4 	beq.w	8002cee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00d      	beq.n	8002bcc <HAL_I2C_EV_IRQHandler+0x178>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <HAL_I2C_EV_IRQHandler+0x178>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d103      	bne.n	8002bcc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fb49 	bl	800325c <I2C_MasterReceive_RXNE>
 8002bca:	e00f      	b.n	8002bec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 808b 	beq.w	8002cee <HAL_I2C_EV_IRQHandler+0x29a>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8085 	beq.w	8002cee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fc01 	bl	80033ec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bea:	e080      	b.n	8002cee <HAL_I2C_EV_IRQHandler+0x29a>
 8002bec:	e07f      	b.n	8002cee <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	e007      	b.n	8002c10 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d011      	beq.n	8002c3e <HAL_I2C_EV_IRQHandler+0x1ea>
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00c      	beq.n	8002c3e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002c34:	69b9      	ldr	r1, [r7, #24]
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 ffcc 	bl	8003bd4 <I2C_Slave_ADDR>
 8002c3c:	e05a      	b.n	8002cf4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_I2C_EV_IRQHandler+0x206>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f001 f806 	bl	8003c64 <I2C_Slave_STOPF>
 8002c58:	e04c      	b.n	8002cf4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c5a:	7bbb      	ldrb	r3, [r7, #14]
 8002c5c:	2b21      	cmp	r3, #33	@ 0x21
 8002c5e:	d002      	beq.n	8002c66 <HAL_I2C_EV_IRQHandler+0x212>
 8002c60:	7bbb      	ldrb	r3, [r7, #14]
 8002c62:	2b29      	cmp	r3, #41	@ 0x29
 8002c64:	d120      	bne.n	8002ca8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <HAL_I2C_EV_IRQHandler+0x238>
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_I2C_EV_IRQHandler+0x238>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fee7 	bl	8003a58 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c8a:	e032      	b.n	8002cf2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d02d      	beq.n	8002cf2 <HAL_I2C_EV_IRQHandler+0x29e>
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d028      	beq.n	8002cf2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 ff16 	bl	8003ad2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ca6:	e024      	b.n	8002cf2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0x27a>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_I2C_EV_IRQHandler+0x27a>
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d103      	bne.n	8002cce <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 ff24 	bl	8003b14 <I2C_SlaveReceive_RXNE>
 8002ccc:	e012      	b.n	8002cf4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 ff54 	bl	8003b90 <I2C_SlaveReceive_BTF>
 8002ce8:	e004      	b.n	8002cf4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002cea:	bf00      	nop
 8002cec:	e002      	b.n	8002cf4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cee:	bf00      	nop
 8002cf0:	e000      	b.n	8002cf4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cf2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b08a      	sub	sp, #40	@ 0x28
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d1c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <HAL_I2C_ER_IRQHandler+0x4a>
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002d42:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00d      	beq.n	8002d6a <HAL_I2C_ER_IRQHandler+0x70>
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	f043 0302 	orr.w	r3, r3, #2
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002d68:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03e      	beq.n	8002df2 <HAL_I2C_ER_IRQHandler+0xf8>
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d039      	beq.n	8002df2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002d7e:	7efb      	ldrb	r3, [r7, #27]
 8002d80:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d90:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002d98:	7ebb      	ldrb	r3, [r7, #26]
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d112      	bne.n	8002dc4 <HAL_I2C_ER_IRQHandler+0xca>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10f      	bne.n	8002dc4 <HAL_I2C_ER_IRQHandler+0xca>
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	2b21      	cmp	r3, #33	@ 0x21
 8002da8:	d008      	beq.n	8002dbc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002daa:	7cfb      	ldrb	r3, [r7, #19]
 8002dac:	2b29      	cmp	r3, #41	@ 0x29
 8002dae:	d005      	beq.n	8002dbc <HAL_I2C_ER_IRQHandler+0xc2>
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	2b28      	cmp	r3, #40	@ 0x28
 8002db4:	d106      	bne.n	8002dc4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b21      	cmp	r3, #33	@ 0x21
 8002dba:	d103      	bne.n	8002dc4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f001 f881 	bl	8003ec4 <I2C_Slave_AF>
 8002dc2:	e016      	b.n	8002df2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dcc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002dd6:	7efb      	ldrb	r3, [r7, #27]
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d002      	beq.n	8002de2 <HAL_I2C_ER_IRQHandler+0xe8>
 8002ddc:	7efb      	ldrb	r3, [r7, #27]
 8002dde:	2b40      	cmp	r3, #64	@ 0x40
 8002de0:	d107      	bne.n	8002df2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00d      	beq.n	8002e18 <HAL_I2C_ER_IRQHandler+0x11e>
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e08:	f043 0308 	orr.w	r3, r3, #8
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002e16:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f001 f8be 	bl	8003fac <I2C_ITError>
  }
}
 8002e30:	bf00      	nop
 8002e32:	3728      	adds	r7, #40	@ 0x28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
 8002e94:	4613      	mov	r3, r2
 8002e96:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f24:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d150      	bne.n	8002fd0 <I2C_MasterTransmit_TXE+0xc8>
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b21      	cmp	r3, #33	@ 0x21
 8002f32:	d14d      	bne.n	8002fd0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d01d      	beq.n	8002f76 <I2C_MasterTransmit_TXE+0x6e>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d01a      	beq.n	8002f76 <I2C_MasterTransmit_TXE+0x6e>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f46:	d016      	beq.n	8002f76 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f56:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2211      	movs	r2, #17
 8002f5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ff62 	bl	8002e38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f74:	e060      	b.n	8003038 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f84:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f94:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b40      	cmp	r3, #64	@ 0x40
 8002fae:	d107      	bne.n	8002fc0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff7d 	bl	8002eb8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fbe:	e03b      	b.n	8003038 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ff35 	bl	8002e38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fce:	e033      	b.n	8003038 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	2b21      	cmp	r3, #33	@ 0x21
 8002fd4:	d005      	beq.n	8002fe2 <I2C_MasterTransmit_TXE+0xda>
 8002fd6:	7bbb      	ldrb	r3, [r7, #14]
 8002fd8:	2b40      	cmp	r3, #64	@ 0x40
 8002fda:	d12d      	bne.n	8003038 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	2b22      	cmp	r3, #34	@ 0x22
 8002fe0:	d12a      	bne.n	8003038 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d108      	bne.n	8002ffe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ffa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002ffc:	e01c      	b.n	8003038 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b40      	cmp	r3, #64	@ 0x40
 8003008:	d103      	bne.n	8003012 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f88e 	bl	800312c <I2C_MemoryTransmit_TXE_BTF>
}
 8003010:	e012      	b.n	8003038 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003036:	e7ff      	b.n	8003038 <I2C_MasterTransmit_TXE+0x130>
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b21      	cmp	r3, #33	@ 0x21
 8003058:	d164      	bne.n	8003124 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d012      	beq.n	800308a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003088:	e04c      	b.n	8003124 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d01d      	beq.n	80030cc <I2C_MasterTransmit_BTF+0x8c>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b20      	cmp	r3, #32
 8003094:	d01a      	beq.n	80030cc <I2C_MasterTransmit_BTF+0x8c>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800309c:	d016      	beq.n	80030cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2211      	movs	r2, #17
 80030b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff feb7 	bl	8002e38 <HAL_I2C_MasterTxCpltCallback>
}
 80030ca:	e02b      	b.n	8003124 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b40      	cmp	r3, #64	@ 0x40
 8003104:	d107      	bne.n	8003116 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fed2 	bl	8002eb8 <HAL_I2C_MemTxCpltCallback>
}
 8003114:	e006      	b.n	8003124 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff fe8a 	bl	8002e38 <HAL_I2C_MasterTxCpltCallback>
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003140:	2b00      	cmp	r3, #0
 8003142:	d11d      	bne.n	8003180 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d10b      	bne.n	8003164 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003150:	b2da      	uxtb	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315c:	1c9a      	adds	r2, r3, #2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003162:	e077      	b.n	8003254 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003168:	b29b      	uxth	r3, r3
 800316a:	121b      	asrs	r3, r3, #8
 800316c:	b2da      	uxtb	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800317e:	e069      	b.n	8003254 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003184:	2b01      	cmp	r3, #1
 8003186:	d10b      	bne.n	80031a0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800318c:	b2da      	uxtb	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800319e:	e059      	b.n	8003254 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d152      	bne.n	800324e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b22      	cmp	r3, #34	@ 0x22
 80031ac:	d10d      	bne.n	80031ca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031bc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80031c8:	e044      	b.n	8003254 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d015      	beq.n	8003200 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b21      	cmp	r3, #33	@ 0x21
 80031d8:	d112      	bne.n	8003200 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031de:	781a      	ldrb	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80031fe:	e029      	b.n	8003254 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d124      	bne.n	8003254 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	2b21      	cmp	r3, #33	@ 0x21
 800320e:	d121      	bne.n	8003254 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800321e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800322e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fe36 	bl	8002eb8 <HAL_I2C_MemTxCpltCallback>
}
 800324c:	e002      	b.n	8003254 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff f9be 	bl	80025d0 <I2C_Flush_DR>
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b22      	cmp	r3, #34	@ 0x22
 800326e:	f040 80b9 	bne.w	80033e4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d921      	bls.n	80032ca <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	f040 8096 	bne.w	80033e4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032c6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80032c8:	e08c      	b.n	80033e4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d07f      	beq.n	80033d2 <I2C_MasterReceive_RXNE+0x176>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d002      	beq.n	80032de <I2C_MasterReceive_RXNE+0x82>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d179      	bne.n	80033d2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f001 fa6a 	bl	80047b8 <I2C_WaitOnSTOPRequestThroughIT>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d14c      	bne.n	8003384 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003308:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b40      	cmp	r3, #64	@ 0x40
 8003342:	d10a      	bne.n	800335a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff fdba 	bl	8002ecc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003358:	e044      	b.n	80033e4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d002      	beq.n	800336e <I2C_MasterReceive_RXNE+0x112>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b20      	cmp	r3, #32
 800336c:	d103      	bne.n	8003376 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	@ 0x30
 8003374:	e002      	b.n	800337c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2212      	movs	r2, #18
 800337a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fd65 	bl	8002e4c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003382:	e02f      	b.n	80033e4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003392:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fd88 	bl	8002ee0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033d0:	e008      	b.n	80033e4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033e0:	605a      	str	r2, [r3, #4]
}
 80033e2:	e7ff      	b.n	80033e4 <I2C_MasterReceive_RXNE+0x188>
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b04      	cmp	r3, #4
 8003402:	d11b      	bne.n	800343c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003412:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800343a:	e0c8      	b.n	80035ce <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b03      	cmp	r3, #3
 8003444:	d129      	bne.n	800349a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003454:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b04      	cmp	r3, #4
 800345a:	d00a      	beq.n	8003472 <I2C_MasterReceive_BTF+0x86>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d007      	beq.n	8003472 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003470:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003498:	e099      	b.n	80035ce <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	f040 8081 	bne.w	80035a8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d002      	beq.n	80034b2 <I2C_MasterReceive_BTF+0xc6>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d108      	bne.n	80034c4 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e019      	b.n	80034f8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d002      	beq.n	80034d0 <I2C_MasterReceive_BTF+0xe4>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d108      	bne.n	80034e2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e00a      	b.n	80034f8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d007      	beq.n	80034f8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003552:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	d10a      	bne.n	800357e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fca8 	bl	8002ecc <HAL_I2C_MemRxCpltCallback>
}
 800357c:	e027      	b.n	80035ce <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d002      	beq.n	8003592 <I2C_MasterReceive_BTF+0x1a6>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b20      	cmp	r3, #32
 8003590:	d103      	bne.n	800359a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30
 8003598:	e002      	b.n	80035a0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2212      	movs	r2, #18
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff fc53 	bl	8002e4c <HAL_I2C_MasterRxCpltCallback>
}
 80035a6:	e012      	b.n	80035ce <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b40      	cmp	r3, #64	@ 0x40
 80035e8:	d117      	bne.n	800361a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003602:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003604:	e067      	b.n	80036d6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	b2da      	uxtb	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	611a      	str	r2, [r3, #16]
}
 8003618:	e05d      	b.n	80036d6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003622:	d133      	bne.n	800368c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b21      	cmp	r3, #33	@ 0x21
 800362e:	d109      	bne.n	8003644 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003640:	611a      	str	r2, [r3, #16]
 8003642:	e008      	b.n	8003656 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	b2da      	uxtb	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <I2C_Master_SB+0x92>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d108      	bne.n	800367a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366c:	2b00      	cmp	r3, #0
 800366e:	d032      	beq.n	80036d6 <I2C_Master_SB+0x100>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d02d      	beq.n	80036d6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003688:	605a      	str	r2, [r3, #4]
}
 800368a:	e024      	b.n	80036d6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10e      	bne.n	80036b2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003698:	b29b      	uxth	r3, r3
 800369a:	11db      	asrs	r3, r3, #7
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 0306 	and.w	r3, r3, #6
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f063 030f 	orn	r3, r3, #15
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	611a      	str	r2, [r3, #16]
}
 80036b0:	e011      	b.n	80036d6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d10d      	bne.n	80036d6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036be:	b29b      	uxth	r3, r3
 80036c0:	11db      	asrs	r3, r3, #7
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f003 0306 	and.w	r3, r3, #6
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f063 030e 	orn	r3, r3, #14
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	611a      	str	r2, [r3, #16]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <I2C_Master_ADD10+0x26>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d108      	bne.n	800371a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00c      	beq.n	800372a <I2C_Master_ADD10+0x48>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003728:	605a      	str	r2, [r3, #4]
  }
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003736:	b480      	push	{r7}
 8003738:	b091      	sub	sp, #68	@ 0x44
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003744:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b22      	cmp	r3, #34	@ 0x22
 800375e:	f040 8169 	bne.w	8003a34 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <I2C_Master_ADDR+0x54>
 800376a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800376e:	2b40      	cmp	r3, #64	@ 0x40
 8003770:	d10b      	bne.n	800378a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003772:	2300      	movs	r3, #0
 8003774:	633b      	str	r3, [r7, #48]	@ 0x30
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	633b      	str	r3, [r7, #48]	@ 0x30
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	633b      	str	r3, [r7, #48]	@ 0x30
 8003786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003788:	e160      	b.n	8003a4c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800378e:	2b00      	cmp	r3, #0
 8003790:	d11d      	bne.n	80037ce <I2C_Master_ADDR+0x98>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800379a:	d118      	bne.n	80037ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800379c:	2300      	movs	r3, #0
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80037cc:	e13e      	b.n	8003a4c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d113      	bne.n	8003800 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d8:	2300      	movs	r3, #0
 80037da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e115      	b.n	8003a2c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	f040 808a 	bne.w	8003920 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800380c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003812:	d137      	bne.n	8003884 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003822:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800382e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003832:	d113      	bne.n	800385c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003842:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003844:	2300      	movs	r3, #0
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	e0e7      	b.n	8003a2c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800385c:	2300      	movs	r3, #0
 800385e:	623b      	str	r3, [r7, #32]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	623b      	str	r3, [r7, #32]
 8003870:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e0d3      	b.n	8003a2c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003886:	2b08      	cmp	r3, #8
 8003888:	d02e      	beq.n	80038e8 <I2C_Master_ADDR+0x1b2>
 800388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388c:	2b20      	cmp	r3, #32
 800388e:	d02b      	beq.n	80038e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003892:	2b12      	cmp	r3, #18
 8003894:	d102      	bne.n	800389c <I2C_Master_ADDR+0x166>
 8003896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003898:	2b01      	cmp	r3, #1
 800389a:	d125      	bne.n	80038e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800389c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d00e      	beq.n	80038c0 <I2C_Master_ADDR+0x18a>
 80038a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d00b      	beq.n	80038c0 <I2C_Master_ADDR+0x18a>
 80038a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d008      	beq.n	80038c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e007      	b.n	80038d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	e0a1      	b.n	8003a2c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	61bb      	str	r3, [r7, #24]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e085      	b.n	8003a2c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d14d      	bne.n	80039c6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800392a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392c:	2b04      	cmp	r3, #4
 800392e:	d016      	beq.n	800395e <I2C_Master_ADDR+0x228>
 8003930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003932:	2b02      	cmp	r3, #2
 8003934:	d013      	beq.n	800395e <I2C_Master_ADDR+0x228>
 8003936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003938:	2b10      	cmp	r3, #16
 800393a:	d010      	beq.n	800395e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800394a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e007      	b.n	800396e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800396c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800397c:	d117      	bne.n	80039ae <I2C_Master_ADDR+0x278>
 800397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003980:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003984:	d00b      	beq.n	800399e <I2C_Master_ADDR+0x268>
 8003986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003988:	2b01      	cmp	r3, #1
 800398a:	d008      	beq.n	800399e <I2C_Master_ADDR+0x268>
 800398c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398e:	2b08      	cmp	r3, #8
 8003990:	d005      	beq.n	800399e <I2C_Master_ADDR+0x268>
 8003992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003994:	2b10      	cmp	r3, #16
 8003996:	d002      	beq.n	800399e <I2C_Master_ADDR+0x268>
 8003998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399a:	2b20      	cmp	r3, #32
 800399c:	d107      	bne.n	80039ae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	e032      	b.n	8003a2c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039d4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039e4:	d117      	bne.n	8003a16 <I2C_Master_ADDR+0x2e0>
 80039e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039ec:	d00b      	beq.n	8003a06 <I2C_Master_ADDR+0x2d0>
 80039ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d008      	beq.n	8003a06 <I2C_Master_ADDR+0x2d0>
 80039f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d005      	beq.n	8003a06 <I2C_Master_ADDR+0x2d0>
 80039fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d002      	beq.n	8003a06 <I2C_Master_ADDR+0x2d0>
 8003a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d107      	bne.n	8003a16 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003a32:	e00b      	b.n	8003a4c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
}
 8003a4a:	e7ff      	b.n	8003a4c <I2C_Master_ADDR+0x316>
 8003a4c:	bf00      	nop
 8003a4e:	3744      	adds	r7, #68	@ 0x44
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02b      	beq.n	8003aca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	781a      	ldrb	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d114      	bne.n	8003aca <I2C_SlaveTransmit_TXE+0x72>
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b29      	cmp	r3, #41	@ 0x29
 8003aa4:	d111      	bne.n	8003aca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ab4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2221      	movs	r2, #33	@ 0x21
 8003aba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2228      	movs	r2, #40	@ 0x28
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff f9cb 	bl	8002e60 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d011      	beq.n	8003b08 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	781a      	ldrb	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d02c      	beq.n	8003b88 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d114      	bne.n	8003b88 <I2C_SlaveReceive_RXNE+0x74>
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b62:	d111      	bne.n	8003b88 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b72:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2222      	movs	r2, #34	@ 0x22
 8003b78:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2228      	movs	r2, #40	@ 0x28
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff f976 	bl	8002e74 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d012      	beq.n	8003bc8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003bee:	2b28      	cmp	r3, #40	@ 0x28
 8003bf0:	d125      	bne.n	8003c3e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c00:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	81bb      	strh	r3, [r7, #12]
 8003c20:	e002      	b.n	8003c28 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003c30:	89ba      	ldrh	r2, [r7, #12]
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	4619      	mov	r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff f926 	bl	8002e88 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003c3c:	e00e      	b.n	8003c5c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003c84:	2300      	movs	r3, #0
 8003c86:	60bb      	str	r3, [r7, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc0:	d172      	bne.n	8003da8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b22      	cmp	r3, #34	@ 0x22
 8003cc6:	d002      	beq.n	8003cce <I2C_Slave_STOPF+0x6a>
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ccc:	d135      	bne.n	8003d3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	f043 0204 	orr.w	r2, r3, #4
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe f8b0 	bl	8001e6c <HAL_DMA_GetState>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d049      	beq.n	8003da6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d16:	4a69      	ldr	r2, [pc, #420]	@ (8003ebc <I2C_Slave_STOPF+0x258>)
 8003d18:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fd fef8 	bl	8001b14 <HAL_DMA_Abort_IT>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d03d      	beq.n	8003da6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d34:	4610      	mov	r0, r2
 8003d36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d38:	e035      	b.n	8003da6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	f043 0204 	orr.w	r2, r3, #4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe f87a 	bl	8001e6c <HAL_DMA_GetState>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d014      	beq.n	8003da8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d82:	4a4e      	ldr	r2, [pc, #312]	@ (8003ebc <I2C_Slave_STOPF+0x258>)
 8003d84:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fd fec2 	bl	8001b14 <HAL_DMA_Abort_IT>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003da0:	4610      	mov	r0, r2
 8003da2:	4798      	blx	r3
 8003da4:	e000      	b.n	8003da8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003da6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d03e      	beq.n	8003e30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d112      	bne.n	8003de6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df0:	2b40      	cmp	r3, #64	@ 0x40
 8003df2:	d112      	bne.n	8003e1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e28:	f043 0204 	orr.w	r2, r3, #4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f8b7 	bl	8003fac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003e3e:	e039      	b.n	8003eb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e44:	d109      	bne.n	8003e5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2228      	movs	r2, #40	@ 0x28
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff f80d 	bl	8002e74 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b28      	cmp	r3, #40	@ 0x28
 8003e64:	d111      	bne.n	8003e8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a15      	ldr	r2, [pc, #84]	@ (8003ec0 <I2C_Slave_STOPF+0x25c>)
 8003e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff f80e 	bl	8002ea4 <HAL_I2C_ListenCpltCallback>
}
 8003e88:	e014      	b.n	8003eb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	2b22      	cmp	r3, #34	@ 0x22
 8003e90:	d002      	beq.n	8003e98 <I2C_Slave_STOPF+0x234>
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	2b22      	cmp	r3, #34	@ 0x22
 8003e96:	d10d      	bne.n	8003eb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fe ffe0 	bl	8002e74 <HAL_I2C_SlaveRxCpltCallback>
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	08004315 	.word	0x08004315
 8003ec0:	ffff0000 	.word	0xffff0000

08003ec4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d002      	beq.n	8003ee6 <I2C_Slave_AF+0x22>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d129      	bne.n	8003f3a <I2C_Slave_AF+0x76>
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	2b28      	cmp	r3, #40	@ 0x28
 8003eea:	d126      	bne.n	8003f3a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa8 <I2C_Slave_AF+0xe4>)
 8003ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f00:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f0a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f1a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fe ffb6 	bl	8002ea4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003f38:	e031      	b.n	8003f9e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	2b21      	cmp	r3, #33	@ 0x21
 8003f3e:	d129      	bne.n	8003f94 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a19      	ldr	r2, [pc, #100]	@ (8003fa8 <I2C_Slave_AF+0xe4>)
 8003f44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2221      	movs	r2, #33	@ 0x21
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f6a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f74:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f84:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fe fb22 	bl	80025d0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7fe ff67 	bl	8002e60 <HAL_I2C_SlaveTxCpltCallback>
}
 8003f92:	e004      	b.n	8003f9e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f9c:	615a      	str	r2, [r3, #20]
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	ffff0000 	.word	0xffff0000

08003fac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fc4:	7bbb      	ldrb	r3, [r7, #14]
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d002      	beq.n	8003fd0 <I2C_ITError+0x24>
 8003fca:	7bbb      	ldrb	r3, [r7, #14]
 8003fcc:	2b40      	cmp	r3, #64	@ 0x40
 8003fce:	d10a      	bne.n	8003fe6 <I2C_ITError+0x3a>
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	2b22      	cmp	r3, #34	@ 0x22
 8003fd4:	d107      	bne.n	8003fe6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fe4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003fec:	2b28      	cmp	r3, #40	@ 0x28
 8003fee:	d107      	bne.n	8004000 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2228      	movs	r2, #40	@ 0x28
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ffe:	e015      	b.n	800402c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800400a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800400e:	d00a      	beq.n	8004026 <I2C_ITError+0x7a>
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b60      	cmp	r3, #96	@ 0x60
 8004014:	d007      	beq.n	8004026 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004036:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800403a:	d162      	bne.n	8004102 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800404a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004050:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b01      	cmp	r3, #1
 8004058:	d020      	beq.n	800409c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405e:	4a6a      	ldr	r2, [pc, #424]	@ (8004208 <I2C_ITError+0x25c>)
 8004060:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004066:	4618      	mov	r0, r3
 8004068:	f7fd fd54 	bl	8001b14 <HAL_DMA_Abort_IT>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8089 	beq.w	8004186 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004096:	4610      	mov	r0, r2
 8004098:	4798      	blx	r3
 800409a:	e074      	b.n	8004186 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	4a59      	ldr	r2, [pc, #356]	@ (8004208 <I2C_ITError+0x25c>)
 80040a2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fd fd33 	bl	8001b14 <HAL_DMA_Abort_IT>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d068      	beq.n	8004186 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040be:	2b40      	cmp	r3, #64	@ 0x40
 80040c0:	d10b      	bne.n	80040da <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040fc:	4610      	mov	r0, r2
 80040fe:	4798      	blx	r3
 8004100:	e041      	b.n	8004186 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b60      	cmp	r3, #96	@ 0x60
 800410c:	d125      	bne.n	800415a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004126:	2b40      	cmp	r3, #64	@ 0x40
 8004128:	d10b      	bne.n	8004142 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fe fece 	bl	8002ef4 <HAL_I2C_AbortCpltCallback>
 8004158:	e015      	b.n	8004186 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004164:	2b40      	cmp	r3, #64	@ 0x40
 8004166:	d10b      	bne.n	8004180 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7fe fead 	bl	8002ee0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10e      	bne.n	80041b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d104      	bne.n	80041b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d113      	bne.n	8004200 <I2C_ITError+0x254>
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b28      	cmp	r3, #40	@ 0x28
 80041dc:	d110      	bne.n	8004200 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a0a      	ldr	r2, [pc, #40]	@ (800420c <I2C_ITError+0x260>)
 80041e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fe fe52 	bl	8002ea4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	08004315 	.word	0x08004315
 800420c:	ffff0000 	.word	0xffff0000

08004210 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	607a      	str	r2, [r7, #4]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	460b      	mov	r3, r1
 800421e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004224:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b08      	cmp	r3, #8
 800422a:	d006      	beq.n	800423a <I2C_MasterRequestWrite+0x2a>
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d003      	beq.n	800423a <I2C_MasterRequestWrite+0x2a>
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004238:	d108      	bne.n	800424c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e00b      	b.n	8004264 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004250:	2b12      	cmp	r3, #18
 8004252:	d107      	bne.n	8004264 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004262:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f8f7 	bl	8004464 <I2C_WaitOnFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00d      	beq.n	8004298 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800428a:	d103      	bne.n	8004294 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004292:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e035      	b.n	8004304 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042a0:	d108      	bne.n	80042b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042a2:	897b      	ldrh	r3, [r7, #10]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042b0:	611a      	str	r2, [r3, #16]
 80042b2:	e01b      	b.n	80042ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042b4:	897b      	ldrh	r3, [r7, #10]
 80042b6:	11db      	asrs	r3, r3, #7
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f003 0306 	and.w	r3, r3, #6
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f063 030f 	orn	r3, r3, #15
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	490e      	ldr	r1, [pc, #56]	@ (800430c <I2C_MasterRequestWrite+0xfc>)
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f940 	bl	8004558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e010      	b.n	8004304 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042e2:	897b      	ldrh	r3, [r7, #10]
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4907      	ldr	r1, [pc, #28]	@ (8004310 <I2C_MasterRequestWrite+0x100>)
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f930 	bl	8004558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	00010008 	.word	0x00010008
 8004310:	00010002 	.word	0x00010002

08004314 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004324:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800432e:	4b4b      	ldr	r3, [pc, #300]	@ (800445c <I2C_DMAAbort+0x148>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	08db      	lsrs	r3, r3, #3
 8004334:	4a4a      	ldr	r2, [pc, #296]	@ (8004460 <I2C_DMAAbort+0x14c>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	0a1a      	lsrs	r2, r3, #8
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	00da      	lsls	r2, r3, #3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	f043 0220 	orr.w	r2, r3, #32
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800435a:	e00a      	b.n	8004372 <I2C_DMAAbort+0x5e>
    }
    count--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3b01      	subs	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800436c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004370:	d0ea      	beq.n	8004348 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437e:	2200      	movs	r2, #0
 8004380:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438e:	2200      	movs	r2, #0
 8004390:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b4:	2200      	movs	r2, #0
 80043b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c4:	2200      	movs	r2, #0
 80043c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b60      	cmp	r3, #96	@ 0x60
 80043e2:	d10e      	bne.n	8004402 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2200      	movs	r2, #0
 80043f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043fa:	6978      	ldr	r0, [r7, #20]
 80043fc:	f7fe fd7a 	bl	8002ef4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004400:	e027      	b.n	8004452 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004408:	2b28      	cmp	r3, #40	@ 0x28
 800440a:	d117      	bne.n	800443c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800442a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2200      	movs	r2, #0
 8004430:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2228      	movs	r2, #40	@ 0x28
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800443a:	e007      	b.n	800444c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800444c:	6978      	ldr	r0, [r7, #20]
 800444e:	f7fe fd47 	bl	8002ee0 <HAL_I2C_ErrorCallback>
}
 8004452:	bf00      	nop
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000010 	.word	0x20000010
 8004460:	14f8b589 	.word	0x14f8b589

08004464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004474:	e048      	b.n	8004508 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d044      	beq.n	8004508 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447e:	f7fd f959 	bl	8001734 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <I2C_WaitOnFlagUntilTimeout+0x30>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d139      	bne.n	8004508 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	0c1b      	lsrs	r3, r3, #16
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d10d      	bne.n	80044ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	43da      	mvns	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4013      	ands	r3, r2
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	e00c      	b.n	80044d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	43da      	mvns	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4013      	ands	r3, r2
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d116      	bne.n	8004508 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e023      	b.n	8004550 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	0c1b      	lsrs	r3, r3, #16
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b01      	cmp	r3, #1
 8004510:	d10d      	bne.n	800452e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	43da      	mvns	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	4013      	ands	r3, r2
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	e00c      	b.n	8004548 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	43da      	mvns	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4013      	ands	r3, r2
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	bf0c      	ite	eq
 8004540:	2301      	moveq	r3, #1
 8004542:	2300      	movne	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	429a      	cmp	r2, r3
 800454c:	d093      	beq.n	8004476 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004566:	e071      	b.n	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004576:	d123      	bne.n	80045c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004586:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004590:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ac:	f043 0204 	orr.w	r2, r3, #4
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e067      	b.n	8004690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d041      	beq.n	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c8:	f7fd f8b4 	bl	8001734 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d302      	bcc.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d136      	bne.n	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d10c      	bne.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	43da      	mvns	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4013      	ands	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bf14      	ite	ne
 80045fa:	2301      	movne	r3, #1
 80045fc:	2300      	moveq	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	e00b      	b.n	800461a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	43da      	mvns	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4013      	ands	r3, r2
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e021      	b.n	8004690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	0c1b      	lsrs	r3, r3, #16
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d10c      	bne.n	8004670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	43da      	mvns	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	e00b      	b.n	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	43da      	mvns	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4013      	ands	r3, r2
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	bf14      	ite	ne
 8004682:	2301      	movne	r3, #1
 8004684:	2300      	moveq	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	f47f af6d 	bne.w	8004568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046a4:	e034      	b.n	8004710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f8b8 	bl	800481c <I2C_IsAcknowledgeFailed>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e034      	b.n	8004720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d028      	beq.n	8004710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7fd f839 	bl	8001734 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d11d      	bne.n	8004710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046de:	2b80      	cmp	r3, #128	@ 0x80
 80046e0:	d016      	beq.n	8004710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e007      	b.n	8004720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471a:	2b80      	cmp	r3, #128	@ 0x80
 800471c:	d1c3      	bne.n	80046a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004734:	e034      	b.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f870 	bl	800481c <I2C_IsAcknowledgeFailed>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e034      	b.n	80047b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d028      	beq.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474e:	f7fc fff1 	bl	8001734 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	429a      	cmp	r2, r3
 800475c:	d302      	bcc.n	8004764 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d11d      	bne.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b04      	cmp	r3, #4
 8004770:	d016      	beq.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478c:	f043 0220 	orr.w	r2, r3, #32
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e007      	b.n	80047b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d1c3      	bne.n	8004736 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80047c4:	4b13      	ldr	r3, [pc, #76]	@ (8004814 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	08db      	lsrs	r3, r3, #3
 80047ca:	4a13      	ldr	r2, [pc, #76]	@ (8004818 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	0a1a      	lsrs	r2, r3, #8
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3b01      	subs	r3, #1
 80047de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d107      	bne.n	80047f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	f043 0220 	orr.w	r2, r3, #32
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e008      	b.n	8004808 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004804:	d0e9      	beq.n	80047da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	20000010 	.word	0x20000010
 8004818:	14f8b589 	.word	0x14f8b589

0800481c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004832:	d11b      	bne.n	800486c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800483c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	f043 0204 	orr.w	r2, r3, #4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004886:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800488a:	d103      	bne.n	8004894 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004892:	e007      	b.n	80048a4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800489c:	d102      	bne.n	80048a4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2208      	movs	r2, #8
 80048a2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <HAL_PWREx_EnableOverDrive+0x90>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004940 <HAL_PWREx_EnableOverDrive+0x90>)
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80048ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004940 <HAL_PWREx_EnableOverDrive+0x90>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004944 <HAL_PWREx_EnableOverDrive+0x94>)
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048dc:	f7fc ff2a 	bl	8001734 <HAL_GetTick>
 80048e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048e2:	e009      	b.n	80048f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048e4:	f7fc ff26 	bl	8001734 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048f2:	d901      	bls.n	80048f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e01f      	b.n	8004938 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048f8:	4b13      	ldr	r3, [pc, #76]	@ (8004948 <HAL_PWREx_EnableOverDrive+0x98>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004904:	d1ee      	bne.n	80048e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004906:	4b11      	ldr	r3, [pc, #68]	@ (800494c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800490c:	f7fc ff12 	bl	8001734 <HAL_GetTick>
 8004910:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004912:	e009      	b.n	8004928 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004914:	f7fc ff0e 	bl	8001734 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004922:	d901      	bls.n	8004928 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e007      	b.n	8004938 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004928:	4b07      	ldr	r3, [pc, #28]	@ (8004948 <HAL_PWREx_EnableOverDrive+0x98>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004934:	d1ee      	bne.n	8004914 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40023800 	.word	0x40023800
 8004944:	420e0040 	.word	0x420e0040
 8004948:	40007000 	.word	0x40007000
 800494c:	420e0044 	.word	0x420e0044

08004950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0cc      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004964:	4b68      	ldr	r3, [pc, #416]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d90c      	bls.n	800498c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b65      	ldr	r3, [pc, #404]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b63      	ldr	r3, [pc, #396]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0b8      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d020      	beq.n	80049da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a4:	4b59      	ldr	r3, [pc, #356]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4a58      	ldr	r2, [pc, #352]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049bc:	4b53      	ldr	r3, [pc, #332]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	4a52      	ldr	r2, [pc, #328]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c8:	4b50      	ldr	r3, [pc, #320]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	494d      	ldr	r1, [pc, #308]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d044      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d107      	bne.n	80049fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ee:	4b47      	ldr	r3, [pc, #284]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d119      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e07f      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d003      	beq.n	8004a0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e06f      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e067      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2e:	4b37      	ldr	r3, [pc, #220]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4934      	ldr	r1, [pc, #208]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a40:	f7fc fe78 	bl	8001734 <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a48:	f7fc fe74 	bl	8001734 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e04f      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 020c 	and.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1eb      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a70:	4b25      	ldr	r3, [pc, #148]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d20c      	bcs.n	8004a98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b22      	ldr	r3, [pc, #136]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b20      	ldr	r3, [pc, #128]	@ (8004b08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e032      	b.n	8004afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa4:	4b19      	ldr	r3, [pc, #100]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4916      	ldr	r1, [pc, #88]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ac2:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	490e      	ldr	r1, [pc, #56]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ad6:	f000 f855 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8004ada:	4602      	mov	r2, r0
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	490a      	ldr	r1, [pc, #40]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae8:	5ccb      	ldrb	r3, [r1, r3]
 8004aea:	fa22 f303 	lsr.w	r3, r2, r3
 8004aee:	4a09      	ldr	r2, [pc, #36]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004af2:	4b09      	ldr	r3, [pc, #36]	@ (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fc fdd8 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40023c00 	.word	0x40023c00
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	080076cc 	.word	0x080076cc
 8004b14:	20000010 	.word	0x20000010
 8004b18:	20000014 	.word	0x20000014

08004b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b20:	4b03      	ldr	r3, [pc, #12]	@ (8004b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b22:	681b      	ldr	r3, [r3, #0]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20000010 	.word	0x20000010

08004b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b38:	f7ff fff0 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	0a9b      	lsrs	r3, r3, #10
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	4903      	ldr	r1, [pc, #12]	@ (8004b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4a:	5ccb      	ldrb	r3, [r1, r3]
 8004b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40023800 	.word	0x40023800
 8004b58:	080076dc 	.word	0x080076dc

08004b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b60:	f7ff ffdc 	bl	8004b1c <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0b5b      	lsrs	r3, r3, #13
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4903      	ldr	r1, [pc, #12]	@ (8004b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	080076dc 	.word	0x080076dc

08004b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b88:	b0ae      	sub	sp, #184	@ 0xb8
 8004b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004baa:	4bcb      	ldr	r3, [pc, #812]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	f200 8206 	bhi.w	8004fc4 <HAL_RCC_GetSysClockFreq+0x440>
 8004bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004bf5 	.word	0x08004bf5
 8004bc4:	08004fc5 	.word	0x08004fc5
 8004bc8:	08004fc5 	.word	0x08004fc5
 8004bcc:	08004fc5 	.word	0x08004fc5
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	08004fc5 	.word	0x08004fc5
 8004bd8:	08004fc5 	.word	0x08004fc5
 8004bdc:	08004fc5 	.word	0x08004fc5
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004fc5 	.word	0x08004fc5
 8004be8:	08004fc5 	.word	0x08004fc5
 8004bec:	08004fc5 	.word	0x08004fc5
 8004bf0:	08004df5 	.word	0x08004df5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4bb9      	ldr	r3, [pc, #740]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x358>)
 8004bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004bfa:	e1e7      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bfc:	4bb8      	ldr	r3, [pc, #736]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c02:	e1e3      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c04:	4bb4      	ldr	r3, [pc, #720]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c10:	4bb1      	ldr	r3, [pc, #708]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d071      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1c:	4bae      	ldr	r3, [pc, #696]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	099b      	lsrs	r3, r3, #6
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c28:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	0159      	lsls	r1, r3, #5
 8004c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c54:	0150      	lsls	r0, r2, #5
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	1a51      	subs	r1, r2, r1
 8004c5e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004c60:	4629      	mov	r1, r5
 8004c62:	eb63 0301 	sbc.w	r3, r3, r1
 8004c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004c74:	4649      	mov	r1, r9
 8004c76:	018b      	lsls	r3, r1, #6
 8004c78:	4641      	mov	r1, r8
 8004c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c7e:	4641      	mov	r1, r8
 8004c80:	018a      	lsls	r2, r1, #6
 8004c82:	4641      	mov	r1, r8
 8004c84:	1a51      	subs	r1, r2, r1
 8004c86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c88:	4649      	mov	r1, r9
 8004c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	00cb      	lsls	r3, r1, #3
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	00ca      	lsls	r2, r1, #3
 8004caa:	4610      	mov	r0, r2
 8004cac:	4619      	mov	r1, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	189b      	adds	r3, r3, r2
 8004cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cb6:	462b      	mov	r3, r5
 8004cb8:	460a      	mov	r2, r1
 8004cba:	eb42 0303 	adc.w	r3, r2, r3
 8004cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ccc:	4629      	mov	r1, r5
 8004cce:	024b      	lsls	r3, r1, #9
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	024a      	lsls	r2, r1, #9
 8004cda:	4610      	mov	r0, r2
 8004cdc:	4619      	mov	r1, r3
 8004cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ce8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004cf0:	f7fb fa88 	bl	8000204 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cfe:	e067      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d00:	4b75      	ldr	r3, [pc, #468]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	099b      	lsrs	r3, r3, #6
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d0c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004d22:	4622      	mov	r2, r4
 8004d24:	462b      	mov	r3, r5
 8004d26:	f04f 0000 	mov.w	r0, #0
 8004d2a:	f04f 0100 	mov.w	r1, #0
 8004d2e:	0159      	lsls	r1, r3, #5
 8004d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d34:	0150      	lsls	r0, r2, #5
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	1a51      	subs	r1, r2, r1
 8004d3e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d40:	4629      	mov	r1, r5
 8004d42:	eb63 0301 	sbc.w	r3, r3, r1
 8004d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004d54:	4649      	mov	r1, r9
 8004d56:	018b      	lsls	r3, r1, #6
 8004d58:	4641      	mov	r1, r8
 8004d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d5e:	4641      	mov	r1, r8
 8004d60:	018a      	lsls	r2, r1, #6
 8004d62:	4641      	mov	r1, r8
 8004d64:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d68:	4649      	mov	r1, r9
 8004d6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d82:	4692      	mov	sl, r2
 8004d84:	469b      	mov	fp, r3
 8004d86:	4623      	mov	r3, r4
 8004d88:	eb1a 0303 	adds.w	r3, sl, r3
 8004d8c:	623b      	str	r3, [r7, #32]
 8004d8e:	462b      	mov	r3, r5
 8004d90:	eb4b 0303 	adc.w	r3, fp, r3
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004da2:	4629      	mov	r1, r5
 8004da4:	028b      	lsls	r3, r1, #10
 8004da6:	4621      	mov	r1, r4
 8004da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dac:	4621      	mov	r1, r4
 8004dae:	028a      	lsls	r2, r1, #10
 8004db0:	4610      	mov	r0, r2
 8004db2:	4619      	mov	r1, r3
 8004db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004db8:	2200      	movs	r2, #0
 8004dba:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dbc:	677a      	str	r2, [r7, #116]	@ 0x74
 8004dbe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004dc2:	f7fb fa1f 	bl	8000204 <__aeabi_uldivmod>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4613      	mov	r3, r2
 8004dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dd0:	4b41      	ldr	r3, [pc, #260]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004de2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004de6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004df2:	e0eb      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004df4:	4b38      	ldr	r3, [pc, #224]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e00:	4b35      	ldr	r3, [pc, #212]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d06b      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e0c:	4b32      	ldr	r3, [pc, #200]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	099b      	lsrs	r3, r3, #6
 8004e12:	2200      	movs	r2, #0
 8004e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e20:	2300      	movs	r3, #0
 8004e22:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004e28:	4622      	mov	r2, r4
 8004e2a:	462b      	mov	r3, r5
 8004e2c:	f04f 0000 	mov.w	r0, #0
 8004e30:	f04f 0100 	mov.w	r1, #0
 8004e34:	0159      	lsls	r1, r3, #5
 8004e36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e3a:	0150      	lsls	r0, r2, #5
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4621      	mov	r1, r4
 8004e42:	1a51      	subs	r1, r2, r1
 8004e44:	61b9      	str	r1, [r7, #24]
 8004e46:	4629      	mov	r1, r5
 8004e48:	eb63 0301 	sbc.w	r3, r3, r1
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e5a:	4659      	mov	r1, fp
 8004e5c:	018b      	lsls	r3, r1, #6
 8004e5e:	4651      	mov	r1, sl
 8004e60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e64:	4651      	mov	r1, sl
 8004e66:	018a      	lsls	r2, r1, #6
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ebb2 0801 	subs.w	r8, r2, r1
 8004e6e:	4659      	mov	r1, fp
 8004e70:	eb63 0901 	sbc.w	r9, r3, r1
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e88:	4690      	mov	r8, r2
 8004e8a:	4699      	mov	r9, r3
 8004e8c:	4623      	mov	r3, r4
 8004e8e:	eb18 0303 	adds.w	r3, r8, r3
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	462b      	mov	r3, r5
 8004e96:	eb49 0303 	adc.w	r3, r9, r3
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	024b      	lsls	r3, r1, #9
 8004eac:	4621      	mov	r1, r4
 8004eae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	024a      	lsls	r2, r1, #9
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ec2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004ec4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ec8:	f7fb f99c 	bl	8000204 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ed6:	e065      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x420>
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	00f42400 	.word	0x00f42400
 8004ee0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x458>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	099b      	lsrs	r3, r3, #6
 8004eea:	2200      	movs	r2, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	4611      	mov	r1, r2
 8004ef0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ef4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004efa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004efe:	4642      	mov	r2, r8
 8004f00:	464b      	mov	r3, r9
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f04f 0100 	mov.w	r1, #0
 8004f0a:	0159      	lsls	r1, r3, #5
 8004f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f10:	0150      	lsls	r0, r2, #5
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4641      	mov	r1, r8
 8004f18:	1a51      	subs	r1, r2, r1
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f30:	4659      	mov	r1, fp
 8004f32:	018b      	lsls	r3, r1, #6
 8004f34:	4651      	mov	r1, sl
 8004f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	018a      	lsls	r2, r1, #6
 8004f3e:	4651      	mov	r1, sl
 8004f40:	1a54      	subs	r4, r2, r1
 8004f42:	4659      	mov	r1, fp
 8004f44:	eb63 0501 	sbc.w	r5, r3, r1
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	00eb      	lsls	r3, r5, #3
 8004f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f56:	00e2      	lsls	r2, r4, #3
 8004f58:	4614      	mov	r4, r2
 8004f5a:	461d      	mov	r5, r3
 8004f5c:	4643      	mov	r3, r8
 8004f5e:	18e3      	adds	r3, r4, r3
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	464b      	mov	r3, r9
 8004f64:	eb45 0303 	adc.w	r3, r5, r3
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f76:	4629      	mov	r1, r5
 8004f78:	028b      	lsls	r3, r1, #10
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f80:	4621      	mov	r1, r4
 8004f82:	028a      	lsls	r2, r1, #10
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f90:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f96:	f7fb f935 	bl	8000204 <__aeabi_uldivmod>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x458>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	0f1b      	lsrs	r3, r3, #28
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fc2:	e003      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc4:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	37b8      	adds	r7, #184	@ 0xb8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fda:	bf00      	nop
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	00f42400 	.word	0x00f42400

08004fe4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e28d      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 8083 	beq.w	800510a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005004:	4b94      	ldr	r3, [pc, #592]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 030c 	and.w	r3, r3, #12
 800500c:	2b04      	cmp	r3, #4
 800500e:	d019      	beq.n	8005044 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005010:	4b91      	ldr	r3, [pc, #580]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005018:	2b08      	cmp	r3, #8
 800501a:	d106      	bne.n	800502a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800501c:	4b8e      	ldr	r3, [pc, #568]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005024:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005028:	d00c      	beq.n	8005044 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800502a:	4b8b      	ldr	r3, [pc, #556]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005032:	2b0c      	cmp	r3, #12
 8005034:	d112      	bne.n	800505c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005036:	4b88      	ldr	r3, [pc, #544]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800503e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005042:	d10b      	bne.n	800505c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	4b84      	ldr	r3, [pc, #528]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d05b      	beq.n	8005108 <HAL_RCC_OscConfig+0x124>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d157      	bne.n	8005108 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e25a      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005064:	d106      	bne.n	8005074 <HAL_RCC_OscConfig+0x90>
 8005066:	4b7c      	ldr	r3, [pc, #496]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a7b      	ldr	r2, [pc, #492]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800506c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	e01d      	b.n	80050b0 <HAL_RCC_OscConfig+0xcc>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800507c:	d10c      	bne.n	8005098 <HAL_RCC_OscConfig+0xb4>
 800507e:	4b76      	ldr	r3, [pc, #472]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a75      	ldr	r2, [pc, #468]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	4b73      	ldr	r3, [pc, #460]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a72      	ldr	r2, [pc, #456]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	e00b      	b.n	80050b0 <HAL_RCC_OscConfig+0xcc>
 8005098:	4b6f      	ldr	r3, [pc, #444]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a6e      	ldr	r2, [pc, #440]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800509e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b6c      	ldr	r3, [pc, #432]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a6b      	ldr	r2, [pc, #428]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80050aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d013      	beq.n	80050e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fc fb3c 	bl	8001734 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c0:	f7fc fb38 	bl	8001734 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	@ 0x64
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e21f      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d2:	4b61      	ldr	r3, [pc, #388]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCC_OscConfig+0xdc>
 80050de:	e014      	b.n	800510a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fc fb28 	bl	8001734 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e8:	f7fc fb24 	bl	8001734 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	@ 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e20b      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fa:	4b57      	ldr	r3, [pc, #348]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x104>
 8005106:	e000      	b.n	800510a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d06f      	beq.n	80051f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005116:	4b50      	ldr	r3, [pc, #320]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b00      	cmp	r3, #0
 8005120:	d017      	beq.n	8005152 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005122:	4b4d      	ldr	r3, [pc, #308]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800512a:	2b08      	cmp	r3, #8
 800512c:	d105      	bne.n	800513a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800512e:	4b4a      	ldr	r3, [pc, #296]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513a:	4b47      	ldr	r3, [pc, #284]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d11c      	bne.n	8005180 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005146:	4b44      	ldr	r3, [pc, #272]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d116      	bne.n	8005180 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005152:	4b41      	ldr	r3, [pc, #260]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_RCC_OscConfig+0x186>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d001      	beq.n	800516a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e1d3      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516a:	4b3b      	ldr	r3, [pc, #236]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4937      	ldr	r1, [pc, #220]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800517a:	4313      	orrs	r3, r2
 800517c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800517e:	e03a      	b.n	80051f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d020      	beq.n	80051ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005188:	4b34      	ldr	r3, [pc, #208]	@ (800525c <HAL_RCC_OscConfig+0x278>)
 800518a:	2201      	movs	r2, #1
 800518c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518e:	f7fc fad1 	bl	8001734 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005196:	f7fc facd 	bl	8001734 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e1b4      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b4:	4b28      	ldr	r3, [pc, #160]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4925      	ldr	r1, [pc, #148]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]
 80051c8:	e015      	b.n	80051f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ca:	4b24      	ldr	r3, [pc, #144]	@ (800525c <HAL_RCC_OscConfig+0x278>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7fc fab0 	bl	8001734 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d8:	f7fc faac 	bl	8001734 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e193      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f0      	bne.n	80051d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d036      	beq.n	8005270 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d016      	beq.n	8005238 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520a:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <HAL_RCC_OscConfig+0x27c>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005210:	f7fc fa90 	bl	8001734 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005218:	f7fc fa8c 	bl	8001734 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e173      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522a:	4b0b      	ldr	r3, [pc, #44]	@ (8005258 <HAL_RCC_OscConfig+0x274>)
 800522c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x234>
 8005236:	e01b      	b.n	8005270 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005238:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <HAL_RCC_OscConfig+0x27c>)
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523e:	f7fc fa79 	bl	8001734 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005244:	e00e      	b.n	8005264 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005246:	f7fc fa75 	bl	8001734 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d907      	bls.n	8005264 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e15c      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
 8005258:	40023800 	.word	0x40023800
 800525c:	42470000 	.word	0x42470000
 8005260:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005264:	4b8a      	ldr	r3, [pc, #552]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1ea      	bne.n	8005246 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8097 	beq.w	80053ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005282:	4b83      	ldr	r3, [pc, #524]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	4b7f      	ldr	r3, [pc, #508]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	4a7e      	ldr	r2, [pc, #504]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800529c:	6413      	str	r3, [r2, #64]	@ 0x40
 800529e:	4b7c      	ldr	r3, [pc, #496]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ae:	4b79      	ldr	r3, [pc, #484]	@ (8005494 <HAL_RCC_OscConfig+0x4b0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d118      	bne.n	80052ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ba:	4b76      	ldr	r3, [pc, #472]	@ (8005494 <HAL_RCC_OscConfig+0x4b0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a75      	ldr	r2, [pc, #468]	@ (8005494 <HAL_RCC_OscConfig+0x4b0>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c6:	f7fc fa35 	bl	8001734 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ce:	f7fc fa31 	bl	8001734 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e118      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005494 <HAL_RCC_OscConfig+0x4b0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d106      	bne.n	8005302 <HAL_RCC_OscConfig+0x31e>
 80052f4:	4b66      	ldr	r3, [pc, #408]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f8:	4a65      	ldr	r2, [pc, #404]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80052fa:	f043 0301 	orr.w	r3, r3, #1
 80052fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005300:	e01c      	b.n	800533c <HAL_RCC_OscConfig+0x358>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b05      	cmp	r3, #5
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0x340>
 800530a:	4b61      	ldr	r3, [pc, #388]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530e:	4a60      	ldr	r2, [pc, #384]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	6713      	str	r3, [r2, #112]	@ 0x70
 8005316:	4b5e      	ldr	r3, [pc, #376]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531a:	4a5d      	ldr	r2, [pc, #372]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6713      	str	r3, [r2, #112]	@ 0x70
 8005322:	e00b      	b.n	800533c <HAL_RCC_OscConfig+0x358>
 8005324:	4b5a      	ldr	r3, [pc, #360]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	4a59      	ldr	r2, [pc, #356]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005330:	4b57      	ldr	r3, [pc, #348]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005334:	4a56      	ldr	r2, [pc, #344]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005336:	f023 0304 	bic.w	r3, r3, #4
 800533a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d015      	beq.n	8005370 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005344:	f7fc f9f6 	bl	8001734 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534a:	e00a      	b.n	8005362 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800534c:	f7fc f9f2 	bl	8001734 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0d7      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005362:	4b4b      	ldr	r3, [pc, #300]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0ee      	beq.n	800534c <HAL_RCC_OscConfig+0x368>
 800536e:	e014      	b.n	800539a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005370:	f7fc f9e0 	bl	8001734 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005376:	e00a      	b.n	800538e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005378:	f7fc f9dc 	bl	8001734 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e0c1      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538e:	4b40      	ldr	r3, [pc, #256]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1ee      	bne.n	8005378 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80053a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a4:	4a3a      	ldr	r2, [pc, #232]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80053a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80ad 	beq.w	8005510 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053b6:	4b36      	ldr	r3, [pc, #216]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d060      	beq.n	8005484 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d145      	bne.n	8005456 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b33      	ldr	r3, [pc, #204]	@ (8005498 <HAL_RCC_OscConfig+0x4b4>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fc f9b0 	bl	8001734 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fc f9ac 	bl	8001734 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e093      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	4b29      	ldr	r3, [pc, #164]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	3b01      	subs	r3, #1
 8005410:	041b      	lsls	r3, r3, #16
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	061b      	lsls	r3, r3, #24
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005420:	071b      	lsls	r3, r3, #28
 8005422:	491b      	ldr	r1, [pc, #108]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005424:	4313      	orrs	r3, r2
 8005426:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005428:	4b1b      	ldr	r3, [pc, #108]	@ (8005498 <HAL_RCC_OscConfig+0x4b4>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542e:	f7fc f981 	bl	8001734 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005436:	f7fc f97d 	bl	8001734 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e064      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005448:	4b11      	ldr	r3, [pc, #68]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x452>
 8005454:	e05c      	b.n	8005510 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005456:	4b10      	ldr	r3, [pc, #64]	@ (8005498 <HAL_RCC_OscConfig+0x4b4>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fc f96a 	bl	8001734 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005464:	f7fc f966 	bl	8001734 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e04d      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005476:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <HAL_RCC_OscConfig+0x4ac>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f0      	bne.n	8005464 <HAL_RCC_OscConfig+0x480>
 8005482:	e045      	b.n	8005510 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d107      	bne.n	800549c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e040      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
 8005490:	40023800 	.word	0x40023800
 8005494:	40007000 	.word	0x40007000
 8005498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800549c:	4b1f      	ldr	r3, [pc, #124]	@ (800551c <HAL_RCC_OscConfig+0x538>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d030      	beq.n	800550c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d129      	bne.n	800550c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d122      	bne.n	800550c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054cc:	4013      	ands	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d119      	bne.n	800550c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	085b      	lsrs	r3, r3, #1
 80054e4:	3b01      	subs	r3, #1
 80054e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d10f      	bne.n	800550c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d107      	bne.n	800550c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005506:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d001      	beq.n	8005510 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40023800 	.word	0x40023800

08005520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e042      	b.n	80055b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fb ffbc 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2224      	movs	r2, #36	@ 0x24
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f82b 	bl	80055c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c4:	b0c0      	sub	sp, #256	@ 0x100
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	68d9      	ldr	r1, [r3, #12]
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	ea40 0301 	orr.w	r3, r0, r1
 80055e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	431a      	orrs	r2, r3
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005618:	f021 010c 	bic.w	r1, r1, #12
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005626:	430b      	orrs	r3, r1
 8005628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800562a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563a:	6999      	ldr	r1, [r3, #24]
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	ea40 0301 	orr.w	r3, r0, r1
 8005646:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b8f      	ldr	r3, [pc, #572]	@ (800588c <UART_SetConfig+0x2cc>)
 8005650:	429a      	cmp	r2, r3
 8005652:	d005      	beq.n	8005660 <UART_SetConfig+0xa0>
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	4b8d      	ldr	r3, [pc, #564]	@ (8005890 <UART_SetConfig+0x2d0>)
 800565c:	429a      	cmp	r2, r3
 800565e:	d104      	bne.n	800566a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005660:	f7ff fa7c 	bl	8004b5c <HAL_RCC_GetPCLK2Freq>
 8005664:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005668:	e003      	b.n	8005672 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800566a:	f7ff fa63 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 800566e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800567c:	f040 810c 	bne.w	8005898 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005684:	2200      	movs	r2, #0
 8005686:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800568a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800568e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005692:	4622      	mov	r2, r4
 8005694:	462b      	mov	r3, r5
 8005696:	1891      	adds	r1, r2, r2
 8005698:	65b9      	str	r1, [r7, #88]	@ 0x58
 800569a:	415b      	adcs	r3, r3
 800569c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800569e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056a2:	4621      	mov	r1, r4
 80056a4:	eb12 0801 	adds.w	r8, r2, r1
 80056a8:	4629      	mov	r1, r5
 80056aa:	eb43 0901 	adc.w	r9, r3, r1
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056c2:	4690      	mov	r8, r2
 80056c4:	4699      	mov	r9, r3
 80056c6:	4623      	mov	r3, r4
 80056c8:	eb18 0303 	adds.w	r3, r8, r3
 80056cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056d0:	462b      	mov	r3, r5
 80056d2:	eb49 0303 	adc.w	r3, r9, r3
 80056d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056ee:	460b      	mov	r3, r1
 80056f0:	18db      	adds	r3, r3, r3
 80056f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80056f4:	4613      	mov	r3, r2
 80056f6:	eb42 0303 	adc.w	r3, r2, r3
 80056fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80056fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005700:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005704:	f7fa fd7e 	bl	8000204 <__aeabi_uldivmod>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4b61      	ldr	r3, [pc, #388]	@ (8005894 <UART_SetConfig+0x2d4>)
 800570e:	fba3 2302 	umull	r2, r3, r3, r2
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	011c      	lsls	r4, r3, #4
 8005716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005720:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005724:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	1891      	adds	r1, r2, r2
 800572e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005730:	415b      	adcs	r3, r3
 8005732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005734:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005738:	4641      	mov	r1, r8
 800573a:	eb12 0a01 	adds.w	sl, r2, r1
 800573e:	4649      	mov	r1, r9
 8005740:	eb43 0b01 	adc.w	fp, r3, r1
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005750:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005758:	4692      	mov	sl, r2
 800575a:	469b      	mov	fp, r3
 800575c:	4643      	mov	r3, r8
 800575e:	eb1a 0303 	adds.w	r3, sl, r3
 8005762:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005766:	464b      	mov	r3, r9
 8005768:	eb4b 0303 	adc.w	r3, fp, r3
 800576c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800577c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005780:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005784:	460b      	mov	r3, r1
 8005786:	18db      	adds	r3, r3, r3
 8005788:	643b      	str	r3, [r7, #64]	@ 0x40
 800578a:	4613      	mov	r3, r2
 800578c:	eb42 0303 	adc.w	r3, r2, r3
 8005790:	647b      	str	r3, [r7, #68]	@ 0x44
 8005792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005796:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800579a:	f7fa fd33 	bl	8000204 <__aeabi_uldivmod>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	4611      	mov	r1, r2
 80057a4:	4b3b      	ldr	r3, [pc, #236]	@ (8005894 <UART_SetConfig+0x2d4>)
 80057a6:	fba3 2301 	umull	r2, r3, r3, r1
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	2264      	movs	r2, #100	@ 0x64
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	1acb      	subs	r3, r1, r3
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057ba:	4b36      	ldr	r3, [pc, #216]	@ (8005894 <UART_SetConfig+0x2d4>)
 80057bc:	fba3 2302 	umull	r2, r3, r3, r2
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80057c8:	441c      	add	r4, r3
 80057ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057dc:	4642      	mov	r2, r8
 80057de:	464b      	mov	r3, r9
 80057e0:	1891      	adds	r1, r2, r2
 80057e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057e4:	415b      	adcs	r3, r3
 80057e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057ec:	4641      	mov	r1, r8
 80057ee:	1851      	adds	r1, r2, r1
 80057f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80057f2:	4649      	mov	r1, r9
 80057f4:	414b      	adcs	r3, r1
 80057f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005804:	4659      	mov	r1, fp
 8005806:	00cb      	lsls	r3, r1, #3
 8005808:	4651      	mov	r1, sl
 800580a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800580e:	4651      	mov	r1, sl
 8005810:	00ca      	lsls	r2, r1, #3
 8005812:	4610      	mov	r0, r2
 8005814:	4619      	mov	r1, r3
 8005816:	4603      	mov	r3, r0
 8005818:	4642      	mov	r2, r8
 800581a:	189b      	adds	r3, r3, r2
 800581c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005820:	464b      	mov	r3, r9
 8005822:	460a      	mov	r2, r1
 8005824:	eb42 0303 	adc.w	r3, r2, r3
 8005828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005838:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800583c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005840:	460b      	mov	r3, r1
 8005842:	18db      	adds	r3, r3, r3
 8005844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005846:	4613      	mov	r3, r2
 8005848:	eb42 0303 	adc.w	r3, r2, r3
 800584c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800584e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005852:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005856:	f7fa fcd5 	bl	8000204 <__aeabi_uldivmod>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <UART_SetConfig+0x2d4>)
 8005860:	fba3 1302 	umull	r1, r3, r3, r2
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	2164      	movs	r1, #100	@ 0x64
 8005868:	fb01 f303 	mul.w	r3, r1, r3
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	3332      	adds	r3, #50	@ 0x32
 8005872:	4a08      	ldr	r2, [pc, #32]	@ (8005894 <UART_SetConfig+0x2d4>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	f003 0207 	and.w	r2, r3, #7
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4422      	add	r2, r4
 8005886:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005888:	e106      	b.n	8005a98 <UART_SetConfig+0x4d8>
 800588a:	bf00      	nop
 800588c:	40011000 	.word	0x40011000
 8005890:	40011400 	.word	0x40011400
 8005894:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800589c:	2200      	movs	r2, #0
 800589e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058aa:	4642      	mov	r2, r8
 80058ac:	464b      	mov	r3, r9
 80058ae:	1891      	adds	r1, r2, r2
 80058b0:	6239      	str	r1, [r7, #32]
 80058b2:	415b      	adcs	r3, r3
 80058b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ba:	4641      	mov	r1, r8
 80058bc:	1854      	adds	r4, r2, r1
 80058be:	4649      	mov	r1, r9
 80058c0:	eb43 0501 	adc.w	r5, r3, r1
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	00eb      	lsls	r3, r5, #3
 80058ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058d2:	00e2      	lsls	r2, r4, #3
 80058d4:	4614      	mov	r4, r2
 80058d6:	461d      	mov	r5, r3
 80058d8:	4643      	mov	r3, r8
 80058da:	18e3      	adds	r3, r4, r3
 80058dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058e0:	464b      	mov	r3, r9
 80058e2:	eb45 0303 	adc.w	r3, r5, r3
 80058e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005906:	4629      	mov	r1, r5
 8005908:	008b      	lsls	r3, r1, #2
 800590a:	4621      	mov	r1, r4
 800590c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005910:	4621      	mov	r1, r4
 8005912:	008a      	lsls	r2, r1, #2
 8005914:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005918:	f7fa fc74 	bl	8000204 <__aeabi_uldivmod>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4b60      	ldr	r3, [pc, #384]	@ (8005aa4 <UART_SetConfig+0x4e4>)
 8005922:	fba3 2302 	umull	r2, r3, r3, r2
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	011c      	lsls	r4, r3, #4
 800592a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800592e:	2200      	movs	r2, #0
 8005930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005934:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005938:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	1891      	adds	r1, r2, r2
 8005942:	61b9      	str	r1, [r7, #24]
 8005944:	415b      	adcs	r3, r3
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800594c:	4641      	mov	r1, r8
 800594e:	1851      	adds	r1, r2, r1
 8005950:	6139      	str	r1, [r7, #16]
 8005952:	4649      	mov	r1, r9
 8005954:	414b      	adcs	r3, r1
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005964:	4659      	mov	r1, fp
 8005966:	00cb      	lsls	r3, r1, #3
 8005968:	4651      	mov	r1, sl
 800596a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800596e:	4651      	mov	r1, sl
 8005970:	00ca      	lsls	r2, r1, #3
 8005972:	4610      	mov	r0, r2
 8005974:	4619      	mov	r1, r3
 8005976:	4603      	mov	r3, r0
 8005978:	4642      	mov	r2, r8
 800597a:	189b      	adds	r3, r3, r2
 800597c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005980:	464b      	mov	r3, r9
 8005982:	460a      	mov	r2, r1
 8005984:	eb42 0303 	adc.w	r3, r2, r3
 8005988:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005996:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059a4:	4649      	mov	r1, r9
 80059a6:	008b      	lsls	r3, r1, #2
 80059a8:	4641      	mov	r1, r8
 80059aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ae:	4641      	mov	r1, r8
 80059b0:	008a      	lsls	r2, r1, #2
 80059b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059b6:	f7fa fc25 	bl	8000204 <__aeabi_uldivmod>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	4b38      	ldr	r3, [pc, #224]	@ (8005aa4 <UART_SetConfig+0x4e4>)
 80059c2:	fba3 2301 	umull	r2, r3, r3, r1
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	2264      	movs	r2, #100	@ 0x64
 80059ca:	fb02 f303 	mul.w	r3, r2, r3
 80059ce:	1acb      	subs	r3, r1, r3
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	3332      	adds	r3, #50	@ 0x32
 80059d4:	4a33      	ldr	r2, [pc, #204]	@ (8005aa4 <UART_SetConfig+0x4e4>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059e0:	441c      	add	r4, r3
 80059e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059e6:	2200      	movs	r2, #0
 80059e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80059ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80059ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059f0:	4642      	mov	r2, r8
 80059f2:	464b      	mov	r3, r9
 80059f4:	1891      	adds	r1, r2, r2
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	415b      	adcs	r3, r3
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a00:	4641      	mov	r1, r8
 8005a02:	1851      	adds	r1, r2, r1
 8005a04:	6039      	str	r1, [r7, #0]
 8005a06:	4649      	mov	r1, r9
 8005a08:	414b      	adcs	r3, r1
 8005a0a:	607b      	str	r3, [r7, #4]
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a18:	4659      	mov	r1, fp
 8005a1a:	00cb      	lsls	r3, r1, #3
 8005a1c:	4651      	mov	r1, sl
 8005a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a22:	4651      	mov	r1, sl
 8005a24:	00ca      	lsls	r2, r1, #3
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	189b      	adds	r3, r3, r2
 8005a30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a32:	464b      	mov	r3, r9
 8005a34:	460a      	mov	r2, r1
 8005a36:	eb42 0303 	adc.w	r3, r2, r3
 8005a3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a46:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a54:	4649      	mov	r1, r9
 8005a56:	008b      	lsls	r3, r1, #2
 8005a58:	4641      	mov	r1, r8
 8005a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a5e:	4641      	mov	r1, r8
 8005a60:	008a      	lsls	r2, r1, #2
 8005a62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a66:	f7fa fbcd 	bl	8000204 <__aeabi_uldivmod>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa4 <UART_SetConfig+0x4e4>)
 8005a70:	fba3 1302 	umull	r1, r3, r3, r2
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	2164      	movs	r1, #100	@ 0x64
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	3332      	adds	r3, #50	@ 0x32
 8005a82:	4a08      	ldr	r2, [pc, #32]	@ (8005aa4 <UART_SetConfig+0x4e4>)
 8005a84:	fba2 2303 	umull	r2, r3, r2, r3
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	f003 020f 	and.w	r2, r3, #15
 8005a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4422      	add	r2, r4
 8005a96:	609a      	str	r2, [r3, #8]
}
 8005a98:	bf00      	nop
 8005a9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa4:	51eb851f 	.word	0x51eb851f

08005aa8 <__itoa>:
 8005aa8:	1e93      	subs	r3, r2, #2
 8005aaa:	2b22      	cmp	r3, #34	@ 0x22
 8005aac:	b510      	push	{r4, lr}
 8005aae:	460c      	mov	r4, r1
 8005ab0:	d904      	bls.n	8005abc <__itoa+0x14>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	700b      	strb	r3, [r1, #0]
 8005ab6:	461c      	mov	r4, r3
 8005ab8:	4620      	mov	r0, r4
 8005aba:	bd10      	pop	{r4, pc}
 8005abc:	2a0a      	cmp	r2, #10
 8005abe:	d109      	bne.n	8005ad4 <__itoa+0x2c>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	da07      	bge.n	8005ad4 <__itoa+0x2c>
 8005ac4:	232d      	movs	r3, #45	@ 0x2d
 8005ac6:	700b      	strb	r3, [r1, #0]
 8005ac8:	4240      	negs	r0, r0
 8005aca:	2101      	movs	r1, #1
 8005acc:	4421      	add	r1, r4
 8005ace:	f000 f805 	bl	8005adc <__utoa>
 8005ad2:	e7f1      	b.n	8005ab8 <__itoa+0x10>
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	e7f9      	b.n	8005acc <__itoa+0x24>

08005ad8 <itoa>:
 8005ad8:	f7ff bfe6 	b.w	8005aa8 <__itoa>

08005adc <__utoa>:
 8005adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ade:	4c1f      	ldr	r4, [pc, #124]	@ (8005b5c <__utoa+0x80>)
 8005ae0:	b08b      	sub	sp, #44	@ 0x2c
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	466e      	mov	r6, sp
 8005ae8:	f104 0c20 	add.w	ip, r4, #32
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	6861      	ldr	r1, [r4, #4]
 8005af0:	4637      	mov	r7, r6
 8005af2:	c703      	stmia	r7!, {r0, r1}
 8005af4:	3408      	adds	r4, #8
 8005af6:	4564      	cmp	r4, ip
 8005af8:	463e      	mov	r6, r7
 8005afa:	d1f7      	bne.n	8005aec <__utoa+0x10>
 8005afc:	7921      	ldrb	r1, [r4, #4]
 8005afe:	7139      	strb	r1, [r7, #4]
 8005b00:	1e91      	subs	r1, r2, #2
 8005b02:	6820      	ldr	r0, [r4, #0]
 8005b04:	6038      	str	r0, [r7, #0]
 8005b06:	2922      	cmp	r1, #34	@ 0x22
 8005b08:	f04f 0100 	mov.w	r1, #0
 8005b0c:	d904      	bls.n	8005b18 <__utoa+0x3c>
 8005b0e:	7019      	strb	r1, [r3, #0]
 8005b10:	460b      	mov	r3, r1
 8005b12:	4618      	mov	r0, r3
 8005b14:	b00b      	add	sp, #44	@ 0x2c
 8005b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b18:	1e58      	subs	r0, r3, #1
 8005b1a:	4684      	mov	ip, r0
 8005b1c:	fbb5 f7f2 	udiv	r7, r5, r2
 8005b20:	fb02 5617 	mls	r6, r2, r7, r5
 8005b24:	3628      	adds	r6, #40	@ 0x28
 8005b26:	446e      	add	r6, sp
 8005b28:	460c      	mov	r4, r1
 8005b2a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005b2e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005b32:	462e      	mov	r6, r5
 8005b34:	42b2      	cmp	r2, r6
 8005b36:	f101 0101 	add.w	r1, r1, #1
 8005b3a:	463d      	mov	r5, r7
 8005b3c:	d9ee      	bls.n	8005b1c <__utoa+0x40>
 8005b3e:	2200      	movs	r2, #0
 8005b40:	545a      	strb	r2, [r3, r1]
 8005b42:	1919      	adds	r1, r3, r4
 8005b44:	1aa5      	subs	r5, r4, r2
 8005b46:	42aa      	cmp	r2, r5
 8005b48:	dae3      	bge.n	8005b12 <__utoa+0x36>
 8005b4a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005b4e:	780e      	ldrb	r6, [r1, #0]
 8005b50:	7006      	strb	r6, [r0, #0]
 8005b52:	3201      	adds	r2, #1
 8005b54:	f801 5901 	strb.w	r5, [r1], #-1
 8005b58:	e7f4      	b.n	8005b44 <__utoa+0x68>
 8005b5a:	bf00      	nop
 8005b5c:	080076ec 	.word	0x080076ec

08005b60 <memset>:
 8005b60:	4402      	add	r2, r0
 8005b62:	4603      	mov	r3, r0
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d100      	bne.n	8005b6a <memset+0xa>
 8005b68:	4770      	bx	lr
 8005b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6e:	e7f9      	b.n	8005b64 <memset+0x4>

08005b70 <__libc_init_array>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	4d0d      	ldr	r5, [pc, #52]	@ (8005ba8 <__libc_init_array+0x38>)
 8005b74:	4c0d      	ldr	r4, [pc, #52]	@ (8005bac <__libc_init_array+0x3c>)
 8005b76:	1b64      	subs	r4, r4, r5
 8005b78:	10a4      	asrs	r4, r4, #2
 8005b7a:	2600      	movs	r6, #0
 8005b7c:	42a6      	cmp	r6, r4
 8005b7e:	d109      	bne.n	8005b94 <__libc_init_array+0x24>
 8005b80:	4d0b      	ldr	r5, [pc, #44]	@ (8005bb0 <__libc_init_array+0x40>)
 8005b82:	4c0c      	ldr	r4, [pc, #48]	@ (8005bb4 <__libc_init_array+0x44>)
 8005b84:	f000 f818 	bl	8005bb8 <_init>
 8005b88:	1b64      	subs	r4, r4, r5
 8005b8a:	10a4      	asrs	r4, r4, #2
 8005b8c:	2600      	movs	r6, #0
 8005b8e:	42a6      	cmp	r6, r4
 8005b90:	d105      	bne.n	8005b9e <__libc_init_array+0x2e>
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
 8005b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b98:	4798      	blx	r3
 8005b9a:	3601      	adds	r6, #1
 8005b9c:	e7ee      	b.n	8005b7c <__libc_init_array+0xc>
 8005b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba2:	4798      	blx	r3
 8005ba4:	3601      	adds	r6, #1
 8005ba6:	e7f2      	b.n	8005b8e <__libc_init_array+0x1e>
 8005ba8:	0800771c 	.word	0x0800771c
 8005bac:	0800771c 	.word	0x0800771c
 8005bb0:	0800771c 	.word	0x0800771c
 8005bb4:	08007720 	.word	0x08007720

08005bb8 <_init>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr

08005bc4 <_fini>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	bf00      	nop
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr
