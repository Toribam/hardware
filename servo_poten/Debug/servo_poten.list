
servo_poten.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003514  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036d8  080036d8  000046d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f0  080036f0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080036f0  080036f0  000046f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036f8  080036f8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f8  080036f8  000046f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036fc  080036fc  000046fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003700  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  0800370c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  0800370c  0000510c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dda1  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e90  00000000  00000000  00012ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00014c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a74  00000000  00000000  000159c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230c7  00000000  00000000  00016434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103a7  00000000  00000000  000394fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd1e2  00000000  00000000  000498a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003844  00000000  00000000  00126ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012a30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080036c0 	.word	0x080036c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080036c0 	.word	0x080036c0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint16_t map(uint16_t in_val, uint16_t in_1, uint16_t in_2, uint16_t out_1, uint16_t out_2){
 80004f4:	b490      	push	{r4, r7}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4604      	mov	r4, r0
 80004fc:	4608      	mov	r0, r1
 80004fe:	4611      	mov	r1, r2
 8000500:	461a      	mov	r2, r3
 8000502:	4623      	mov	r3, r4
 8000504:	80fb      	strh	r3, [r7, #6]
 8000506:	4603      	mov	r3, r0
 8000508:	80bb      	strh	r3, [r7, #4]
 800050a:	460b      	mov	r3, r1
 800050c:	807b      	strh	r3, [r7, #2]
 800050e:	4613      	mov	r3, r2
 8000510:	803b      	strh	r3, [r7, #0]

	// potentiometer to servo

	uint16_t tmp = (in_val * (out_2 - out_1) / (in_2 - in_1)) + out_1;
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	8b39      	ldrh	r1, [r7, #24]
 8000516:	883a      	ldrh	r2, [r7, #0]
 8000518:	1a8a      	subs	r2, r1, r2
 800051a:	fb03 f202 	mul.w	r2, r3, r2
 800051e:	8879      	ldrh	r1, [r7, #2]
 8000520:	88bb      	ldrh	r3, [r7, #4]
 8000522:	1acb      	subs	r3, r1, r3
 8000524:	fb92 f3f3 	sdiv	r3, r2, r3
 8000528:	b29a      	uxth	r2, r3
 800052a:	883b      	ldrh	r3, [r7, #0]
 800052c:	4413      	add	r3, r2
 800052e:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8000530:	89fb      	ldrh	r3, [r7, #14]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bc90      	pop	{r4, r7}
 800053a:	4770      	bx	lr

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fb83 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f84f 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f993 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054e:	f000 f967 	bl	8000820 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000552:	f000 f8bb 	bl	80006cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000556:	f000 f90b 	bl	8000770 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800055a:	2104      	movs	r1, #4
 800055c:	481d      	ldr	r0, [pc, #116]	@ (80005d4 <main+0x98>)
 800055e:	f002 f937 	bl	80027d0 <HAL_TIM_PWM_Start>
  while (1)
  {

	  /** potentiometer */

	  HAL_ADC_Start(&hadc1);
 8000562:	481d      	ldr	r0, [pc, #116]	@ (80005d8 <main+0x9c>)
 8000564:	f000 fc4c 	bl	8000e00 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000568:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800056c:	481a      	ldr	r0, [pc, #104]	@ (80005d8 <main+0x9c>)
 800056e:	f000 fd4c 	bl	800100a <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc1);
 8000572:	4819      	ldr	r0, [pc, #100]	@ (80005d8 <main+0x9c>)
 8000574:	f000 fdd4 	bl	8001120 <HAL_ADC_GetValue>
 8000578:	4603      	mov	r3, r0
 800057a:	b29a      	uxth	r2, r3
 800057c:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <main+0xa0>)
 800057e:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000580:	4815      	ldr	r0, [pc, #84]	@ (80005d8 <main+0x9c>)
 8000582:	f000 fd0f 	bl	8000fa4 <HAL_ADC_Stop>

	  /* servo motor */

	  pulse = map(readValue, 0, 4095, 250, 1250);
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <main+0xa0>)
 8000588:	8818      	ldrh	r0, [r3, #0]
 800058a:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	23fa      	movs	r3, #250	@ 0xfa
 8000592:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000596:	2100      	movs	r1, #0
 8000598:	f7ff ffac 	bl	80004f4 <map>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <main+0xa4>)
 80005a2:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);
 80005a4:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <main+0xa4>)
 80005a6:	881a      	ldrh	r2, [r3, #0]
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <main+0x98>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	639a      	str	r2, [r3, #56]	@ 0x38

	  /* angle */
	  angle = map(pulse, 250, 1250, 0, 180);
 80005ae:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <main+0xa4>)
 80005b0:	8818      	ldrh	r0, [r3, #0]
 80005b2:	23b4      	movs	r3, #180	@ 0xb4
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80005bc:	21fa      	movs	r1, #250	@ 0xfa
 80005be:	f7ff ff99 	bl	80004f4 <map>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <main+0xa8>)
 80005c8:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(10);
 80005ca:	200a      	movs	r0, #10
 80005cc:	f000 fbb0 	bl	8000d30 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80005d0:	bf00      	nop
 80005d2:	e7c6      	b.n	8000562 <main+0x26>
 80005d4:	20000070 	.word	0x20000070
 80005d8:	20000028 	.word	0x20000028
 80005dc:	20000100 	.word	0x20000100
 80005e0:	20000102 	.word	0x20000102
 80005e4:	20000104 	.word	0x20000104

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2234      	movs	r2, #52	@ 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f836 	bl	8003668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b2c      	ldr	r3, [pc, #176]	@ (80006c4 <SystemClock_Config+0xdc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a2b      	ldr	r2, [pc, #172]	@ (80006c4 <SystemClock_Config+0xdc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <SystemClock_Config+0xdc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemClock_Config+0xe0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a25      	ldr	r2, [pc, #148]	@ (80006c8 <SystemClock_Config+0xe0>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <SystemClock_Config+0xe0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800065c:	23b4      	movs	r3, #180	@ 0xb4
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fdbf 	bl	80021f4 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800067c:	f000 f968 	bl	8000950 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000680:	f001 fa1e 	bl	8001ac0 <HAL_PWREx_EnableOverDrive>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800068a:	f000 f961 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	2105      	movs	r1, #5
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fa57 	bl	8001b60 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006b8:	f000 f94a 	bl	8000950 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3750      	adds	r7, #80	@ 0x50
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006de:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006e0:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <MX_ADC1_Init+0x9c>)
 80006e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <MX_ADC1_Init+0x98>)
 800070e:	4a17      	ldr	r2, [pc, #92]	@ (800076c <MX_ADC1_Init+0xa0>)
 8000710:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_ADC1_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000728:	2201      	movs	r2, #1
 800072a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072c:	480d      	ldr	r0, [pc, #52]	@ (8000764 <MX_ADC1_Init+0x98>)
 800072e:	f000 fb23 	bl	8000d78 <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000738:	f000 f90a 	bl	8000950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_ADC1_Init+0x98>)
 800074e:	f000 fcf5 	bl	800113c <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000758:	f000 f8fa 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000028 	.word	0x20000028
 8000768:	40012000 	.word	0x40012000
 800076c:	0f000001 	.word	0x0f000001

08000770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000792:	4b22      	ldr	r3, [pc, #136]	@ (800081c <MX_TIM2_Init+0xac>)
 8000794:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 800079a:	4b20      	ldr	r3, [pc, #128]	@ (800081c <MX_TIM2_Init+0xac>)
 800079c:	22b3      	movs	r2, #179	@ 0xb3
 800079e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <MX_TIM2_Init+0xac>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <MX_TIM2_Init+0xac>)
 80007a8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_TIM2_Init+0xac>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b19      	ldr	r3, [pc, #100]	@ (800081c <MX_TIM2_Init+0xac>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ba:	4818      	ldr	r0, [pc, #96]	@ (800081c <MX_TIM2_Init+0xac>)
 80007bc:	f001 ffb8 	bl	8002730 <HAL_TIM_PWM_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007c6:	f000 f8c3 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	4619      	mov	r1, r3
 80007d8:	4810      	ldr	r0, [pc, #64]	@ (800081c <MX_TIM2_Init+0xac>)
 80007da:	f002 fc05 	bl	8002fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80007e4:	f000 f8b4 	bl	8000950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e8:	2360      	movs	r3, #96	@ 0x60
 80007ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2204      	movs	r2, #4
 80007fc:	4619      	mov	r1, r3
 80007fe:	4807      	ldr	r0, [pc, #28]	@ (800081c <MX_TIM2_Init+0xac>)
 8000800:	f002 f8ae 	bl	8002960 <HAL_TIM_PWM_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800080a:	f000 f8a1 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800080e:	4803      	ldr	r0, [pc, #12]	@ (800081c <MX_TIM2_Init+0xac>)
 8000810:	f000 f930 	bl	8000a74 <HAL_TIM_MspPostInit>

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	@ 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000070 	.word	0x20000070

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f002 fc42 	bl	80030e0 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f875 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000b8 	.word	0x200000b8
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b2d      	ldr	r3, [pc, #180]	@ (8000944 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a2c      	ldr	r2, [pc, #176]	@ (8000944 <MX_GPIO_Init+0xd0>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b2a      	ldr	r3, [pc, #168]	@ (8000944 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a25      	ldr	r2, [pc, #148]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b23      	ldr	r3, [pc, #140]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a17      	ldr	r2, [pc, #92]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	4812      	ldr	r0, [pc, #72]	@ (8000948 <MX_GPIO_Init+0xd4>)
 8000900:	f001 f8c4 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	480c      	ldr	r0, [pc, #48]	@ (800094c <MX_GPIO_Init+0xd8>)
 800091c:	f000 ff22 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000920:	2320      	movs	r3, #32
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_GPIO_Init+0xd4>)
 8000938:	f000 ff14 	bl	8001764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	@ 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000
 800094c:	40020800 	.word	0x40020800

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <Error_Handler+0x8>

0800095c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000970:	6453      	str	r3, [r2, #68]	@ 0x44
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099a:	2007      	movs	r0, #7
 800099c:	f000 feae 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <HAL_ADC_MspInit+0x7c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d127      	bne.n	8000a1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <HAL_ADC_MspInit+0x80>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	4a15      	ldr	r2, [pc, #84]	@ (8000a2c <HAL_ADC_MspInit+0x80>)
 80009d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <HAL_ADC_MspInit+0x80>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <HAL_ADC_MspInit+0x80>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <HAL_ADC_MspInit+0x80>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <HAL_ADC_MspInit+0x80>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a06:	2301      	movs	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <HAL_ADC_MspInit+0x84>)
 8000a1a:	f000 fea3 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	@ 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40012000 	.word	0x40012000
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a44:	d10d      	bne.n	8000a62 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a94:	d11d      	bne.n	8000ad2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <HAL_TIM_MspPostInit+0x68>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000adc <HAL_TIM_MspPostInit+0x68>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <HAL_TIM_MspPostInit+0x68>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4619      	mov	r1, r3
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <HAL_TIM_MspPostInit+0x6c>)
 8000ace:	f000 fe49 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3720      	adds	r7, #32
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	@ 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a19      	ldr	r2, [pc, #100]	@ (8000b68 <HAL_UART_MspInit+0x84>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d12b      	bne.n	8000b5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <HAL_UART_MspInit+0x88>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	4a17      	ldr	r2, [pc, #92]	@ (8000b6c <HAL_UART_MspInit+0x88>)
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <HAL_UART_MspInit+0x88>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <HAL_UART_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a10      	ldr	r2, [pc, #64]	@ (8000b6c <HAL_UART_MspInit+0x88>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <HAL_UART_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b3e:	230c      	movs	r3, #12
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <HAL_UART_MspInit+0x8c>)
 8000b5a:	f000 fe03 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	@ 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <NMI_Handler+0x4>

08000b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bca:	f000 f891 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bfc:	f7ff ffea 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	@ (8000c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	@ (8000c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	@ (8000c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f002 fd27 	bl	8003678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fc87 	bl	800053c <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c3c:	08003700 	.word	0x08003700
  ldr r2, =_sbss
 8000c40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c44:	2000010c 	.word	0x2000010c

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	@ (8000c8c <HAL_Init+0x40>)
 8000c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <HAL_Init+0x40>)
 8000c62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	@ (8000c8c <HAL_Init+0x40>)
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 fd41 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f808 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fe6c 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023c00 	.word	0x40023c00

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fd4b 	bl	800174a <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f000 fd21 	bl	8001712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	@ (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000108 	.word	0x20000108

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	@ (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000108 	.word	0x20000108

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff ffee 	bl	8000d18 <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <HAL_Delay+0x44>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffde 	bl	8000d18 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008

08000d78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e033      	b.n	8000df6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d109      	bne.n	8000daa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff fe08 	bl	80009ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d118      	bne.n	8000de8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000dbe:	f023 0302 	bic.w	r3, r3, #2
 8000dc2:	f043 0202 	orr.w	r2, r3, #2
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 fae8 	bl	80013a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	f023 0303 	bic.w	r3, r3, #3
 8000dde:	f043 0201 	orr.w	r2, r3, #1
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000de6:	e001      	b.n	8000dec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d101      	bne.n	8000e1a <HAL_ADC_Start+0x1a>
 8000e16:	2302      	movs	r3, #2
 8000e18:	e0b2      	b.n	8000f80 <HAL_ADC_Start+0x180>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d018      	beq.n	8000e62 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0201 	orr.w	r2, r2, #1
 8000e3e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e40:	4b52      	ldr	r3, [pc, #328]	@ (8000f8c <HAL_ADC_Start+0x18c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a52      	ldr	r2, [pc, #328]	@ (8000f90 <HAL_ADC_Start+0x190>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	0c9a      	lsrs	r2, r3, #18
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e54:	e002      	b.n	8000e5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f9      	bne.n	8000e56 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d17a      	bne.n	8000f66 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d007      	beq.n	8000ea2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000eae:	d106      	bne.n	8000ebe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb4:	f023 0206 	bic.w	r2, r3, #6
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ebc:	e002      	b.n	8000ec4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ecc:	4b31      	ldr	r3, [pc, #196]	@ (8000f94 <HAL_ADC_Start+0x194>)
 8000ece:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000ed8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 031f 	and.w	r3, r3, #31
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d12a      	bne.n	8000f3c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a2b      	ldr	r2, [pc, #172]	@ (8000f98 <HAL_ADC_Start+0x198>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d015      	beq.n	8000f1c <HAL_ADC_Start+0x11c>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a29      	ldr	r2, [pc, #164]	@ (8000f9c <HAL_ADC_Start+0x19c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d105      	bne.n	8000f06 <HAL_ADC_Start+0x106>
 8000efa:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <HAL_ADC_Start+0x194>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00a      	beq.n	8000f1c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a25      	ldr	r2, [pc, #148]	@ (8000fa0 <HAL_ADC_Start+0x1a0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d136      	bne.n	8000f7e <HAL_ADC_Start+0x17e>
 8000f10:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <HAL_ADC_Start+0x194>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d130      	bne.n	8000f7e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d129      	bne.n	8000f7e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	e020      	b.n	8000f7e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a15      	ldr	r2, [pc, #84]	@ (8000f98 <HAL_ADC_Start+0x198>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d11b      	bne.n	8000f7e <HAL_ADC_Start+0x17e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d114      	bne.n	8000f7e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	e00b      	b.n	8000f7e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f043 0210 	orr.w	r2, r3, #16
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	f043 0201 	orr.w	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	431bde83 	.word	0x431bde83
 8000f94:	40012300 	.word	0x40012300
 8000f98:	40012000 	.word	0x40012000
 8000f9c:	40012100 	.word	0x40012100
 8000fa0:	40012200 	.word	0x40012200

08000fa4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d101      	bne.n	8000fba <HAL_ADC_Stop+0x16>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e021      	b.n	8000ffe <HAL_ADC_Stop+0x5a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0201 	bic.w	r2, r2, #1
 8000fd0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	f043 0201 	orr.w	r2, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001026:	d113      	bne.n	8001050 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001036:	d10b      	bne.n	8001050 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	f043 0220 	orr.w	r2, r3, #32
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e063      	b.n	8001118 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001050:	f7ff fe62 	bl	8000d18 <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001056:	e021      	b.n	800109c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105e:	d01d      	beq.n	800109c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <HAL_ADC_PollForConversion+0x6c>
 8001066:	f7ff fe57 	bl	8000d18 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d212      	bcs.n	800109c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b02      	cmp	r3, #2
 8001082:	d00b      	beq.n	800109c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	f043 0204 	orr.w	r2, r3, #4
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e03d      	b.n	8001118 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d1d6      	bne.n	8001058 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f06f 0212 	mvn.w	r2, #18
 80010b2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d123      	bne.n	8001116 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d11f      	bne.n	8001116 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010dc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d111      	bne.n	8001116 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d105      	bne.n	8001116 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f043 0201 	orr.w	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x1c>
 8001154:	2302      	movs	r3, #2
 8001156:	e113      	b.n	8001380 <HAL_ADC_ConfigChannel+0x244>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b09      	cmp	r3, #9
 8001166:	d925      	bls.n	80011b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68d9      	ldr	r1, [r3, #12]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	b29b      	uxth	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	3b1e      	subs	r3, #30
 800117e:	2207      	movs	r2, #7
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43da      	mvns	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	400a      	ands	r2, r1
 800118c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68d9      	ldr	r1, [r3, #12]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	4603      	mov	r3, r0
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4403      	add	r3, r0
 80011a6:	3b1e      	subs	r3, #30
 80011a8:	409a      	lsls	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	e022      	b.n	80011fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6919      	ldr	r1, [r3, #16]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	2207      	movs	r2, #7
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	400a      	ands	r2, r1
 80011d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6919      	ldr	r1, [r3, #16]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4403      	add	r3, r0
 80011f0:	409a      	lsls	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d824      	bhi.n	800124c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	3b05      	subs	r3, #5
 8001214:	221f      	movs	r2, #31
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	400a      	ands	r2, r1
 8001222:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	3b05      	subs	r3, #5
 800123e:	fa00 f203 	lsl.w	r2, r0, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	635a      	str	r2, [r3, #52]	@ 0x34
 800124a:	e04c      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b0c      	cmp	r3, #12
 8001252:	d824      	bhi.n	800129e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	3b23      	subs	r3, #35	@ 0x23
 8001266:	221f      	movs	r2, #31
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43da      	mvns	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	400a      	ands	r2, r1
 8001274:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	b29b      	uxth	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	3b23      	subs	r3, #35	@ 0x23
 8001290:	fa00 f203 	lsl.w	r2, r0, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	631a      	str	r2, [r3, #48]	@ 0x30
 800129c:	e023      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	3b41      	subs	r3, #65	@ 0x41
 80012b0:	221f      	movs	r2, #31
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	400a      	ands	r2, r1
 80012be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	3b41      	subs	r3, #65	@ 0x41
 80012da:	fa00 f203 	lsl.w	r2, r0, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e6:	4b29      	ldr	r3, [pc, #164]	@ (800138c <HAL_ADC_ConfigChannel+0x250>)
 80012e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a28      	ldr	r2, [pc, #160]	@ (8001390 <HAL_ADC_ConfigChannel+0x254>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d10f      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1d8>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b12      	cmp	r3, #18
 80012fa:	d10b      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a1d      	ldr	r2, [pc, #116]	@ (8001390 <HAL_ADC_ConfigChannel+0x254>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d12b      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x23a>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a1c      	ldr	r2, [pc, #112]	@ (8001394 <HAL_ADC_ConfigChannel+0x258>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d003      	beq.n	8001330 <HAL_ADC_ConfigChannel+0x1f4>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b11      	cmp	r3, #17
 800132e:	d122      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a11      	ldr	r2, [pc, #68]	@ (8001394 <HAL_ADC_ConfigChannel+0x258>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d111      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_ADC_ConfigChannel+0x25c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a11      	ldr	r2, [pc, #68]	@ (800139c <HAL_ADC_ConfigChannel+0x260>)
 8001358:	fba2 2303 	umull	r2, r3, r2, r3
 800135c:	0c9a      	lsrs	r2, r3, #18
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001368:	e002      	b.n	8001370 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	3b01      	subs	r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f9      	bne.n	800136a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40012300 	.word	0x40012300
 8001390:	40012000 	.word	0x40012000
 8001394:	10000012 	.word	0x10000012
 8001398:	20000000 	.word	0x20000000
 800139c:	431bde83 	.word	0x431bde83

080013a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013a8:	4b79      	ldr	r3, [pc, #484]	@ (8001590 <ADC_Init+0x1f0>)
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	021a      	lsls	r2, r3, #8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6859      	ldr	r1, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800141a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6899      	ldr	r1, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001432:	4a58      	ldr	r2, [pc, #352]	@ (8001594 <ADC_Init+0x1f4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d022      	beq.n	800147e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001446:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6899      	ldr	r1, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001468:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6899      	ldr	r1, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	e00f      	b.n	800149e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800148c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800149c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0202 	bic.w	r2, r2, #2
 80014ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6899      	ldr	r1, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e1b      	ldrb	r3, [r3, #24]
 80014b8:	005a      	lsls	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01b      	beq.n	8001504 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6859      	ldr	r1, [r3, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f6:	3b01      	subs	r3, #1
 80014f8:	035a      	lsls	r2, r3, #13
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	e007      	b.n	8001514 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001512:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	3b01      	subs	r3, #1
 8001530:	051a      	lsls	r2, r3, #20
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6899      	ldr	r1, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001556:	025a      	lsls	r2, r3, #9
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800156e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6899      	ldr	r1, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	029a      	lsls	r2, r3, #10
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	609a      	str	r2, [r3, #8]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40012300 	.word	0x40012300
 8001594:	0f000001 	.word	0x0f000001

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	@ (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	@ (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	@ 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	@ 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ff8e 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff47 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff5c 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff8e 	bl	8001650 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5d 	bl	80015fc <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffb0 	bl	80016b8 <SysTick_Config>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	@ 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e165      	b.n	8001a4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001780:	2201      	movs	r2, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	429a      	cmp	r2, r3
 800179a:	f040 8154 	bne.w	8001a46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d130      	bne.n	8001818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b03      	cmp	r3, #3
 8001822:	d017      	beq.n	8001854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d123      	bne.n	80018a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80ae 	beq.w	8001a46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001a64 <HAL_GPIO_Init+0x300>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	4a5c      	ldr	r2, [pc, #368]	@ (8001a64 <HAL_GPIO_Init+0x300>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001a64 <HAL_GPIO_Init+0x300>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001906:	4a58      	ldr	r2, [pc, #352]	@ (8001a68 <HAL_GPIO_Init+0x304>)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4f      	ldr	r2, [pc, #316]	@ (8001a6c <HAL_GPIO_Init+0x308>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d025      	beq.n	800197e <HAL_GPIO_Init+0x21a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4e      	ldr	r2, [pc, #312]	@ (8001a70 <HAL_GPIO_Init+0x30c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01f      	beq.n	800197a <HAL_GPIO_Init+0x216>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a74 <HAL_GPIO_Init+0x310>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x212>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4c      	ldr	r2, [pc, #304]	@ (8001a78 <HAL_GPIO_Init+0x314>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x20e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a7c <HAL_GPIO_Init+0x318>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x20a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4a      	ldr	r2, [pc, #296]	@ (8001a80 <HAL_GPIO_Init+0x31c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x206>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a49      	ldr	r2, [pc, #292]	@ (8001a84 <HAL_GPIO_Init+0x320>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x202>
 8001962:	2306      	movs	r3, #6
 8001964:	e00c      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 8001966:	2307      	movs	r3, #7
 8001968:	e00a      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 800196a:	2305      	movs	r3, #5
 800196c:	e008      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 800196e:	2304      	movs	r3, #4
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 8001972:	2303      	movs	r3, #3
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x21c>
 800197e:	2300      	movs	r3, #0
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001990:	4935      	ldr	r1, [pc, #212]	@ (8001a68 <HAL_GPIO_Init+0x304>)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c2:	4a31      	ldr	r2, [pc, #196]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ec:	4a26      	ldr	r2, [pc, #152]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f2:	4b25      	ldr	r3, [pc, #148]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a16:	4a1c      	ldr	r2, [pc, #112]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a40:	4a11      	ldr	r2, [pc, #68]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	f67f ae96 	bls.w	8001780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3724      	adds	r7, #36	@ 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40021400 	.word	0x40021400
 8001a84:	40021800 	.word	0x40021800
 8001a88:	40013c00 	.word	0x40013c00

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	041a      	lsls	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ada:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <HAL_PWREx_EnableOverDrive+0x94>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aec:	f7ff f914 	bl	8000d18 <HAL_GetTick>
 8001af0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001af2:	e009      	b.n	8001b08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001af4:	f7ff f910 	bl	8000d18 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b02:	d901      	bls.n	8001b08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e01f      	b.n	8001b48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b08:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b14:	d1ee      	bne.n	8001af4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b16:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b1c:	f7ff f8fc 	bl	8000d18 <HAL_GetTick>
 8001b20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b22:	e009      	b.n	8001b38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b24:	f7ff f8f8 	bl	8000d18 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b32:	d901      	bls.n	8001b38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e007      	b.n	8001b48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b38:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b44:	d1ee      	bne.n	8001b24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	420e0040 	.word	0x420e0040
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	420e0044 	.word	0x420e0044

08001b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0cc      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b74:	4b68      	ldr	r3, [pc, #416]	@ (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d90c      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b65      	ldr	r3, [pc, #404]	@ (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b63      	ldr	r3, [pc, #396]	@ (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0b8      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb4:	4b59      	ldr	r3, [pc, #356]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4a58      	ldr	r2, [pc, #352]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bcc:	4b53      	ldr	r3, [pc, #332]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a52      	ldr	r2, [pc, #328]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b50      	ldr	r3, [pc, #320]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	494d      	ldr	r1, [pc, #308]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d044      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b47      	ldr	r3, [pc, #284]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d119      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e07f      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e06f      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e067      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3e:	4b37      	ldr	r3, [pc, #220]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 0203 	bic.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4934      	ldr	r1, [pc, #208]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c50:	f7ff f862 	bl	8000d18 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7ff f85e 	bl	8000d18 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e04f      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 020c 	and.w	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1eb      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d20c      	bcs.n	8001ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e032      	b.n	8001d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb4:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4916      	ldr	r1, [pc, #88]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d009      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd2:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	490e      	ldr	r1, [pc, #56]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ce6:	f000 f855 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001cea:	4602      	mov	r2, r0
 8001cec:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	490a      	ldr	r1, [pc, #40]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	5ccb      	ldrb	r3, [r1, r3]
 8001cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfe:	4a09      	ldr	r2, [pc, #36]	@ (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe ffc2 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023c00 	.word	0x40023c00
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	080036d8 	.word	0x080036d8
 8001d24:	20000000 	.word	0x20000000
 8001d28:	20000004 	.word	0x20000004

08001d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d30:	4b03      	ldr	r3, [pc, #12]	@ (8001d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000000 	.word	0x20000000

08001d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d48:	f7ff fff0 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	0a9b      	lsrs	r3, r3, #10
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4903      	ldr	r1, [pc, #12]	@ (8001d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	080036e8 	.word	0x080036e8

08001d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d70:	f7ff ffdc 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0b5b      	lsrs	r3, r3, #13
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4903      	ldr	r1, [pc, #12]	@ (8001d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	080036e8 	.word	0x080036e8

08001d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d98:	b0ae      	sub	sp, #184	@ 0xb8
 8001d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dba:	4bcb      	ldr	r3, [pc, #812]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	f200 8206 	bhi.w	80021d4 <HAL_RCC_GetSysClockFreq+0x440>
 8001dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dce:	bf00      	nop
 8001dd0:	08001e05 	.word	0x08001e05
 8001dd4:	080021d5 	.word	0x080021d5
 8001dd8:	080021d5 	.word	0x080021d5
 8001ddc:	080021d5 	.word	0x080021d5
 8001de0:	08001e0d 	.word	0x08001e0d
 8001de4:	080021d5 	.word	0x080021d5
 8001de8:	080021d5 	.word	0x080021d5
 8001dec:	080021d5 	.word	0x080021d5
 8001df0:	08001e15 	.word	0x08001e15
 8001df4:	080021d5 	.word	0x080021d5
 8001df8:	080021d5 	.word	0x080021d5
 8001dfc:	080021d5 	.word	0x080021d5
 8001e00:	08002005 	.word	0x08002005
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4bb9      	ldr	r3, [pc, #740]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x358>)
 8001e06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001e0a:	e1e7      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e0c:	4bb8      	ldr	r3, [pc, #736]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e12:	e1e3      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e14:	4bb4      	ldr	r3, [pc, #720]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e20:	4bb1      	ldr	r3, [pc, #708]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d071      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2c:	4bae      	ldr	r3, [pc, #696]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	2200      	movs	r2, #0
 8001e34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e38:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e52:	4622      	mov	r2, r4
 8001e54:	462b      	mov	r3, r5
 8001e56:	f04f 0000 	mov.w	r0, #0
 8001e5a:	f04f 0100 	mov.w	r1, #0
 8001e5e:	0159      	lsls	r1, r3, #5
 8001e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e64:	0150      	lsls	r0, r2, #5
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	1a51      	subs	r1, r2, r1
 8001e6e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001e70:	4629      	mov	r1, r5
 8001e72:	eb63 0301 	sbc.w	r3, r3, r1
 8001e76:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001e84:	4649      	mov	r1, r9
 8001e86:	018b      	lsls	r3, r1, #6
 8001e88:	4641      	mov	r1, r8
 8001e8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e8e:	4641      	mov	r1, r8
 8001e90:	018a      	lsls	r2, r1, #6
 8001e92:	4641      	mov	r1, r8
 8001e94:	1a51      	subs	r1, r2, r1
 8001e96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e98:	4649      	mov	r1, r9
 8001e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001eac:	4649      	mov	r1, r9
 8001eae:	00cb      	lsls	r3, r1, #3
 8001eb0:	4641      	mov	r1, r8
 8001eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eb6:	4641      	mov	r1, r8
 8001eb8:	00ca      	lsls	r2, r1, #3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4622      	mov	r2, r4
 8001ec2:	189b      	adds	r3, r3, r2
 8001ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	460a      	mov	r2, r1
 8001eca:	eb42 0303 	adc.w	r3, r2, r3
 8001ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001edc:	4629      	mov	r1, r5
 8001ede:	024b      	lsls	r3, r1, #9
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	024a      	lsls	r2, r1, #9
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ef8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001efc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f00:	f7fe f980 	bl	8000204 <__aeabi_uldivmod>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4613      	mov	r3, r2
 8001f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f0e:	e067      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f10:	4b75      	ldr	r3, [pc, #468]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	2200      	movs	r2, #0
 8001f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f1c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001f32:	4622      	mov	r2, r4
 8001f34:	462b      	mov	r3, r5
 8001f36:	f04f 0000 	mov.w	r0, #0
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	0159      	lsls	r1, r3, #5
 8001f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f44:	0150      	lsls	r0, r2, #5
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	1a51      	subs	r1, r2, r1
 8001f4e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f50:	4629      	mov	r1, r5
 8001f52:	eb63 0301 	sbc.w	r3, r3, r1
 8001f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001f64:	4649      	mov	r1, r9
 8001f66:	018b      	lsls	r3, r1, #6
 8001f68:	4641      	mov	r1, r8
 8001f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f6e:	4641      	mov	r1, r8
 8001f70:	018a      	lsls	r2, r1, #6
 8001f72:	4641      	mov	r1, r8
 8001f74:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f78:	4649      	mov	r1, r9
 8001f7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f92:	4692      	mov	sl, r2
 8001f94:	469b      	mov	fp, r3
 8001f96:	4623      	mov	r3, r4
 8001f98:	eb1a 0303 	adds.w	r3, sl, r3
 8001f9c:	623b      	str	r3, [r7, #32]
 8001f9e:	462b      	mov	r3, r5
 8001fa0:	eb4b 0303 	adc.w	r3, fp, r3
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	028b      	lsls	r3, r1, #10
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	028a      	lsls	r2, r1, #10
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fc8:	2200      	movs	r2, #0
 8001fca:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fcc:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fd2:	f7fe f917 	bl	8000204 <__aeabi_uldivmod>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4613      	mov	r3, r2
 8001fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fe0:	4b41      	ldr	r3, [pc, #260]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	3301      	adds	r3, #1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001ff2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002002:	e0eb      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002004:	4b38      	ldr	r3, [pc, #224]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800200c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002010:	4b35      	ldr	r3, [pc, #212]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d06b      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201c:	4b32      	ldr	r3, [pc, #200]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	099b      	lsrs	r3, r3, #6
 8002022:	2200      	movs	r2, #0
 8002024:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002026:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800202a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800202e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002030:	2300      	movs	r3, #0
 8002032:	667b      	str	r3, [r7, #100]	@ 0x64
 8002034:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002038:	4622      	mov	r2, r4
 800203a:	462b      	mov	r3, r5
 800203c:	f04f 0000 	mov.w	r0, #0
 8002040:	f04f 0100 	mov.w	r1, #0
 8002044:	0159      	lsls	r1, r3, #5
 8002046:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800204a:	0150      	lsls	r0, r2, #5
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4621      	mov	r1, r4
 8002052:	1a51      	subs	r1, r2, r1
 8002054:	61b9      	str	r1, [r7, #24]
 8002056:	4629      	mov	r1, r5
 8002058:	eb63 0301 	sbc.w	r3, r3, r1
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800206a:	4659      	mov	r1, fp
 800206c:	018b      	lsls	r3, r1, #6
 800206e:	4651      	mov	r1, sl
 8002070:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002074:	4651      	mov	r1, sl
 8002076:	018a      	lsls	r2, r1, #6
 8002078:	4651      	mov	r1, sl
 800207a:	ebb2 0801 	subs.w	r8, r2, r1
 800207e:	4659      	mov	r1, fp
 8002080:	eb63 0901 	sbc.w	r9, r3, r1
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002090:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002094:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002098:	4690      	mov	r8, r2
 800209a:	4699      	mov	r9, r3
 800209c:	4623      	mov	r3, r4
 800209e:	eb18 0303 	adds.w	r3, r8, r3
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	462b      	mov	r3, r5
 80020a6:	eb49 0303 	adc.w	r3, r9, r3
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020b8:	4629      	mov	r1, r5
 80020ba:	024b      	lsls	r3, r1, #9
 80020bc:	4621      	mov	r1, r4
 80020be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020c2:	4621      	mov	r1, r4
 80020c4:	024a      	lsls	r2, r1, #9
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020ce:	2200      	movs	r2, #0
 80020d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80020d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80020d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020d8:	f7fe f894 	bl	8000204 <__aeabi_uldivmod>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4613      	mov	r3, r2
 80020e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020e6:	e065      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x420>
 80020e8:	40023800 	.word	0x40023800
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f4:	4b3d      	ldr	r3, [pc, #244]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x458>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	2200      	movs	r2, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	4611      	mov	r1, r2
 8002100:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002104:	653b      	str	r3, [r7, #80]	@ 0x50
 8002106:	2300      	movs	r3, #0
 8002108:	657b      	str	r3, [r7, #84]	@ 0x54
 800210a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800210e:	4642      	mov	r2, r8
 8002110:	464b      	mov	r3, r9
 8002112:	f04f 0000 	mov.w	r0, #0
 8002116:	f04f 0100 	mov.w	r1, #0
 800211a:	0159      	lsls	r1, r3, #5
 800211c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002120:	0150      	lsls	r0, r2, #5
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4641      	mov	r1, r8
 8002128:	1a51      	subs	r1, r2, r1
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	4649      	mov	r1, r9
 800212e:	eb63 0301 	sbc.w	r3, r3, r1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002140:	4659      	mov	r1, fp
 8002142:	018b      	lsls	r3, r1, #6
 8002144:	4651      	mov	r1, sl
 8002146:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800214a:	4651      	mov	r1, sl
 800214c:	018a      	lsls	r2, r1, #6
 800214e:	4651      	mov	r1, sl
 8002150:	1a54      	subs	r4, r2, r1
 8002152:	4659      	mov	r1, fp
 8002154:	eb63 0501 	sbc.w	r5, r3, r1
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	00eb      	lsls	r3, r5, #3
 8002162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002166:	00e2      	lsls	r2, r4, #3
 8002168:	4614      	mov	r4, r2
 800216a:	461d      	mov	r5, r3
 800216c:	4643      	mov	r3, r8
 800216e:	18e3      	adds	r3, r4, r3
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	464b      	mov	r3, r9
 8002174:	eb45 0303 	adc.w	r3, r5, r3
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002186:	4629      	mov	r1, r5
 8002188:	028b      	lsls	r3, r1, #10
 800218a:	4621      	mov	r1, r4
 800218c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002190:	4621      	mov	r1, r4
 8002192:	028a      	lsls	r2, r1, #10
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800219c:	2200      	movs	r2, #0
 800219e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021a0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80021a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021a6:	f7fe f82d 	bl	8000204 <__aeabi_uldivmod>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4613      	mov	r3, r2
 80021b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021b4:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x458>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	0f1b      	lsrs	r3, r3, #28
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80021c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021d2:	e003      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80021d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	37b8      	adds	r7, #184	@ 0xb8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	00f42400 	.word	0x00f42400

080021f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e28d      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8083 	beq.w	800231a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002214:	4b94      	ldr	r3, [pc, #592]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b04      	cmp	r3, #4
 800221e:	d019      	beq.n	8002254 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002220:	4b91      	ldr	r3, [pc, #580]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002228:	2b08      	cmp	r3, #8
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800222c:	4b8e      	ldr	r3, [pc, #568]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002238:	d00c      	beq.n	8002254 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223a:	4b8b      	ldr	r3, [pc, #556]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d112      	bne.n	800226c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002246:	4b88      	ldr	r3, [pc, #544]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002252:	d10b      	bne.n	800226c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002254:	4b84      	ldr	r3, [pc, #528]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d05b      	beq.n	8002318 <HAL_RCC_OscConfig+0x124>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d157      	bne.n	8002318 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e25a      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002274:	d106      	bne.n	8002284 <HAL_RCC_OscConfig+0x90>
 8002276:	4b7c      	ldr	r3, [pc, #496]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7b      	ldr	r2, [pc, #492]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e01d      	b.n	80022c0 <HAL_RCC_OscConfig+0xcc>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0xb4>
 800228e:	4b76      	ldr	r3, [pc, #472]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a75      	ldr	r2, [pc, #468]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b73      	ldr	r3, [pc, #460]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a72      	ldr	r2, [pc, #456]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0xcc>
 80022a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fd26 	bl	8000d18 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe fd22 	bl	8000d18 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	@ 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e21f      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b61      	ldr	r3, [pc, #388]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0xdc>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe fd12 	bl	8000d18 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe fd0e 	bl	8000d18 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	@ 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e20b      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	4b57      	ldr	r3, [pc, #348]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x104>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d06f      	beq.n	8002406 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002326:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b00      	cmp	r3, #0
 8002330:	d017      	beq.n	8002362 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002332:	4b4d      	ldr	r3, [pc, #308]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800233a:	2b08      	cmp	r3, #8
 800233c:	d105      	bne.n	800234a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800233e:	4b4a      	ldr	r3, [pc, #296]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234a:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d11c      	bne.n	8002390 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002356:	4b44      	ldr	r3, [pc, #272]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	4b41      	ldr	r3, [pc, #260]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_RCC_OscConfig+0x186>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1d3      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4937      	ldr	r1, [pc, #220]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	e03a      	b.n	8002406 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002398:	4b34      	ldr	r3, [pc, #208]	@ (800246c <HAL_RCC_OscConfig+0x278>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7fe fcbb 	bl	8000d18 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a6:	f7fe fcb7 	bl	8000d18 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1b4      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b28      	ldr	r3, [pc, #160]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4925      	ldr	r1, [pc, #148]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
 80023d8:	e015      	b.n	8002406 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b24      	ldr	r3, [pc, #144]	@ (800246c <HAL_RCC_OscConfig+0x278>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fc9a 	bl	8000d18 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e8:	f7fe fc96 	bl	8000d18 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e193      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d036      	beq.n	8002480 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241a:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <HAL_RCC_OscConfig+0x27c>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7fe fc7a 	bl	8000d18 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002428:	f7fe fc76 	bl	8000d18 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e173      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800243c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x234>
 8002446:	e01b      	b.n	8002480 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002448:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_RCC_OscConfig+0x27c>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7fe fc63 	bl	8000d18 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	e00e      	b.n	8002474 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002456:	f7fe fc5f 	bl	8000d18 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d907      	bls.n	8002474 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e15c      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
 8002468:	40023800 	.word	0x40023800
 800246c:	42470000 	.word	0x42470000
 8002470:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	4b8a      	ldr	r3, [pc, #552]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ea      	bne.n	8002456 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 8097 	beq.w	80025bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002492:	4b83      	ldr	r3, [pc, #524]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10f      	bne.n	80024be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	4b7f      	ldr	r3, [pc, #508]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	4a7e      	ldr	r2, [pc, #504]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ae:	4b7c      	ldr	r3, [pc, #496]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	4b79      	ldr	r3, [pc, #484]	@ (80026a4 <HAL_RCC_OscConfig+0x4b0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d118      	bne.n	80024fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ca:	4b76      	ldr	r3, [pc, #472]	@ (80026a4 <HAL_RCC_OscConfig+0x4b0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a75      	ldr	r2, [pc, #468]	@ (80026a4 <HAL_RCC_OscConfig+0x4b0>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d6:	f7fe fc1f 	bl	8000d18 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7fe fc1b 	bl	8000d18 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e118      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b6c      	ldr	r3, [pc, #432]	@ (80026a4 <HAL_RCC_OscConfig+0x4b0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x31e>
 8002504:	4b66      	ldr	r3, [pc, #408]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002508:	4a65      	ldr	r2, [pc, #404]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002510:	e01c      	b.n	800254c <HAL_RCC_OscConfig+0x358>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x340>
 800251a:	4b61      	ldr	r3, [pc, #388]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251e:	4a60      	ldr	r2, [pc, #384]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	6713      	str	r3, [r2, #112]	@ 0x70
 8002526:	4b5e      	ldr	r3, [pc, #376]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252a:	4a5d      	ldr	r2, [pc, #372]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6713      	str	r3, [r2, #112]	@ 0x70
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0x358>
 8002534:	4b5a      	ldr	r3, [pc, #360]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002538:	4a59      	ldr	r2, [pc, #356]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002540:	4b57      	ldr	r3, [pc, #348]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	4a56      	ldr	r2, [pc, #344]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002546:	f023 0304 	bic.w	r3, r3, #4
 800254a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d015      	beq.n	8002580 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7fe fbe0 	bl	8000d18 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255a:	e00a      	b.n	8002572 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255c:	f7fe fbdc 	bl	8000d18 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e0d7      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	4b4b      	ldr	r3, [pc, #300]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0ee      	beq.n	800255c <HAL_RCC_OscConfig+0x368>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7fe fbca 	bl	8000d18 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002586:	e00a      	b.n	800259e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f7fe fbc6 	bl	8000d18 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e0c1      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259e:	4b40      	ldr	r3, [pc, #256]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ee      	bne.n	8002588 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b0:	4b3b      	ldr	r3, [pc, #236]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	4a3a      	ldr	r2, [pc, #232]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80025b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80ad 	beq.w	8002720 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c6:	4b36      	ldr	r3, [pc, #216]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d060      	beq.n	8002694 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d145      	bne.n	8002666 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	4b33      	ldr	r3, [pc, #204]	@ (80026a8 <HAL_RCC_OscConfig+0x4b4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fb9a 	bl	8000d18 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e8:	f7fe fb96 	bl	8000d18 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e093      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	4b29      	ldr	r3, [pc, #164]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69da      	ldr	r2, [r3, #28]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	019b      	lsls	r3, r3, #6
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	3b01      	subs	r3, #1
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002630:	071b      	lsls	r3, r3, #28
 8002632:	491b      	ldr	r1, [pc, #108]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002638:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <HAL_RCC_OscConfig+0x4b4>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe fb6b 	bl	8000d18 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002646:	f7fe fb67 	bl	8000d18 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e064      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002658:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x452>
 8002664:	e05c      	b.n	8002720 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b10      	ldr	r3, [pc, #64]	@ (80026a8 <HAL_RCC_OscConfig+0x4b4>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fb54 	bl	8000d18 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002674:	f7fe fb50 	bl	8000d18 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e04d      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <HAL_RCC_OscConfig+0x4ac>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x480>
 8002692:	e045      	b.n	8002720 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e040      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000
 80026a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026ac:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <HAL_RCC_OscConfig+0x538>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d030      	beq.n	800271c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d129      	bne.n	800271c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d122      	bne.n	800271c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d119      	bne.n	800271c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	3b01      	subs	r3, #1
 80026f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d10f      	bne.n	800271c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d107      	bne.n	800271c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800

08002730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e041      	b.n	80027c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe f96c 	bl	8000a34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	4619      	mov	r1, r3
 800276e:	4610      	mov	r0, r2
 8002770:	f000 f9b8 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d109      	bne.n	80027f4 <HAL_TIM_PWM_Start+0x24>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e022      	b.n	800283a <HAL_TIM_PWM_Start+0x6a>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d109      	bne.n	800280e <HAL_TIM_PWM_Start+0x3e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	bf14      	ite	ne
 8002806:	2301      	movne	r3, #1
 8002808:	2300      	moveq	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	e015      	b.n	800283a <HAL_TIM_PWM_Start+0x6a>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d109      	bne.n	8002828 <HAL_TIM_PWM_Start+0x58>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	e008      	b.n	800283a <HAL_TIM_PWM_Start+0x6a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07c      	b.n	800293c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <HAL_TIM_PWM_Start+0x82>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002850:	e013      	b.n	800287a <HAL_TIM_PWM_Start+0xaa>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d104      	bne.n	8002862 <HAL_TIM_PWM_Start+0x92>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002860:	e00b      	b.n	800287a <HAL_TIM_PWM_Start+0xaa>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d104      	bne.n	8002872 <HAL_TIM_PWM_Start+0xa2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002870:	e003      	b.n	800287a <HAL_TIM_PWM_Start+0xaa>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2201      	movs	r2, #1
 8002880:	6839      	ldr	r1, [r7, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fb8a 	bl	8002f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a2d      	ldr	r2, [pc, #180]	@ (8002944 <HAL_TIM_PWM_Start+0x174>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_TIM_PWM_Start+0xcc>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2c      	ldr	r2, [pc, #176]	@ (8002948 <HAL_TIM_PWM_Start+0x178>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_TIM_PWM_Start+0xd0>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_TIM_PWM_Start+0xd2>
 80028a0:	2300      	movs	r3, #0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a22      	ldr	r2, [pc, #136]	@ (8002944 <HAL_TIM_PWM_Start+0x174>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d022      	beq.n	8002906 <HAL_TIM_PWM_Start+0x136>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c8:	d01d      	beq.n	8002906 <HAL_TIM_PWM_Start+0x136>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1f      	ldr	r2, [pc, #124]	@ (800294c <HAL_TIM_PWM_Start+0x17c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d018      	beq.n	8002906 <HAL_TIM_PWM_Start+0x136>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002950 <HAL_TIM_PWM_Start+0x180>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_TIM_PWM_Start+0x136>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002954 <HAL_TIM_PWM_Start+0x184>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00e      	beq.n	8002906 <HAL_TIM_PWM_Start+0x136>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a16      	ldr	r2, [pc, #88]	@ (8002948 <HAL_TIM_PWM_Start+0x178>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d009      	beq.n	8002906 <HAL_TIM_PWM_Start+0x136>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <HAL_TIM_PWM_Start+0x188>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_TIM_PWM_Start+0x136>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a16      	ldr	r2, [pc, #88]	@ (800295c <HAL_TIM_PWM_Start+0x18c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d111      	bne.n	800292a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b06      	cmp	r3, #6
 8002916:	d010      	beq.n	800293a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002928:	e007      	b.n	800293a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40010000 	.word	0x40010000
 8002948:	40010400 	.word	0x40010400
 800294c:	40000400 	.word	0x40000400
 8002950:	40000800 	.word	0x40000800
 8002954:	40000c00 	.word	0x40000c00
 8002958:	40014000 	.word	0x40014000
 800295c:	40001800 	.word	0x40001800

08002960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800297a:	2302      	movs	r3, #2
 800297c:	e0ae      	b.n	8002adc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b0c      	cmp	r3, #12
 800298a:	f200 809f 	bhi.w	8002acc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800298e:	a201      	add	r2, pc, #4	@ (adr r2, 8002994 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002994:	080029c9 	.word	0x080029c9
 8002998:	08002acd 	.word	0x08002acd
 800299c:	08002acd 	.word	0x08002acd
 80029a0:	08002acd 	.word	0x08002acd
 80029a4:	08002a09 	.word	0x08002a09
 80029a8:	08002acd 	.word	0x08002acd
 80029ac:	08002acd 	.word	0x08002acd
 80029b0:	08002acd 	.word	0x08002acd
 80029b4:	08002a4b 	.word	0x08002a4b
 80029b8:	08002acd 	.word	0x08002acd
 80029bc:	08002acd 	.word	0x08002acd
 80029c0:	08002acd 	.word	0x08002acd
 80029c4:	08002a8b 	.word	0x08002a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f934 	bl	8002c3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0208 	orr.w	r2, r2, #8
 80029e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0204 	bic.w	r2, r2, #4
 80029f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6999      	ldr	r1, [r3, #24]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	619a      	str	r2, [r3, #24]
      break;
 8002a06:	e064      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f984 	bl	8002d1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6999      	ldr	r1, [r3, #24]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	021a      	lsls	r2, r3, #8
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	619a      	str	r2, [r3, #24]
      break;
 8002a48:	e043      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f9d9 	bl	8002e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0208 	orr.w	r2, r2, #8
 8002a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0204 	bic.w	r2, r2, #4
 8002a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69d9      	ldr	r1, [r3, #28]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	61da      	str	r2, [r3, #28]
      break;
 8002a88:	e023      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fa2d 	bl	8002ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	69d9      	ldr	r1, [r3, #28]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	021a      	lsls	r2, r3, #8
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	61da      	str	r2, [r3, #28]
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	75fb      	strb	r3, [r7, #23]
      break;
 8002ad0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a46      	ldr	r2, [pc, #280]	@ (8002c10 <TIM_Base_SetConfig+0x12c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d013      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b02:	d00f      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a43      	ldr	r2, [pc, #268]	@ (8002c14 <TIM_Base_SetConfig+0x130>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00b      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a42      	ldr	r2, [pc, #264]	@ (8002c18 <TIM_Base_SetConfig+0x134>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d007      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a41      	ldr	r2, [pc, #260]	@ (8002c1c <TIM_Base_SetConfig+0x138>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d003      	beq.n	8002b24 <TIM_Base_SetConfig+0x40>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a40      	ldr	r2, [pc, #256]	@ (8002c20 <TIM_Base_SetConfig+0x13c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d108      	bne.n	8002b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a35      	ldr	r2, [pc, #212]	@ (8002c10 <TIM_Base_SetConfig+0x12c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d02b      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b44:	d027      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a32      	ldr	r2, [pc, #200]	@ (8002c14 <TIM_Base_SetConfig+0x130>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d023      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a31      	ldr	r2, [pc, #196]	@ (8002c18 <TIM_Base_SetConfig+0x134>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01f      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a30      	ldr	r2, [pc, #192]	@ (8002c1c <TIM_Base_SetConfig+0x138>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01b      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a2f      	ldr	r2, [pc, #188]	@ (8002c20 <TIM_Base_SetConfig+0x13c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d017      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a2e      	ldr	r2, [pc, #184]	@ (8002c24 <TIM_Base_SetConfig+0x140>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a2d      	ldr	r2, [pc, #180]	@ (8002c28 <TIM_Base_SetConfig+0x144>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00f      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a2c      	ldr	r2, [pc, #176]	@ (8002c2c <TIM_Base_SetConfig+0x148>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a2b      	ldr	r2, [pc, #172]	@ (8002c30 <TIM_Base_SetConfig+0x14c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a2a      	ldr	r2, [pc, #168]	@ (8002c34 <TIM_Base_SetConfig+0x150>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <TIM_Base_SetConfig+0xb2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a29      	ldr	r2, [pc, #164]	@ (8002c38 <TIM_Base_SetConfig+0x154>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a10      	ldr	r2, [pc, #64]	@ (8002c10 <TIM_Base_SetConfig+0x12c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <TIM_Base_SetConfig+0xf8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a12      	ldr	r2, [pc, #72]	@ (8002c20 <TIM_Base_SetConfig+0x13c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d103      	bne.n	8002be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d105      	bne.n	8002c02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f023 0201 	bic.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	611a      	str	r2, [r3, #16]
  }
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40010000 	.word	0x40010000
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40000800 	.word	0x40000800
 8002c1c:	40000c00 	.word	0x40000c00
 8002c20:	40010400 	.word	0x40010400
 8002c24:	40014000 	.word	0x40014000
 8002c28:	40014400 	.word	0x40014400
 8002c2c:	40014800 	.word	0x40014800
 8002c30:	40001800 	.word	0x40001800
 8002c34:	40001c00 	.word	0x40001c00
 8002c38:	40002000 	.word	0x40002000

08002c3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	f023 0201 	bic.w	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0303 	bic.w	r3, r3, #3
 8002c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f023 0302 	bic.w	r3, r3, #2
 8002c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a20      	ldr	r2, [pc, #128]	@ (8002d14 <TIM_OC1_SetConfig+0xd8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_OC1_SetConfig+0x64>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d18 <TIM_OC1_SetConfig+0xdc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d10c      	bne.n	8002cba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f023 0308 	bic.w	r3, r3, #8
 8002ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f023 0304 	bic.w	r3, r3, #4
 8002cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a15      	ldr	r2, [pc, #84]	@ (8002d14 <TIM_OC1_SetConfig+0xd8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d003      	beq.n	8002cca <TIM_OC1_SetConfig+0x8e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a14      	ldr	r2, [pc, #80]	@ (8002d18 <TIM_OC1_SetConfig+0xdc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d111      	bne.n	8002cee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	621a      	str	r2, [r3, #32]
}
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	40010000 	.word	0x40010000
 8002d18:	40010400 	.word	0x40010400

08002d1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f023 0210 	bic.w	r2, r3, #16
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f023 0320 	bic.w	r3, r3, #32
 8002d66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a22      	ldr	r2, [pc, #136]	@ (8002e00 <TIM_OC2_SetConfig+0xe4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d003      	beq.n	8002d84 <TIM_OC2_SetConfig+0x68>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a21      	ldr	r2, [pc, #132]	@ (8002e04 <TIM_OC2_SetConfig+0xe8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10d      	bne.n	8002da0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a17      	ldr	r2, [pc, #92]	@ (8002e00 <TIM_OC2_SetConfig+0xe4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d003      	beq.n	8002db0 <TIM_OC2_SetConfig+0x94>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a16      	ldr	r2, [pc, #88]	@ (8002e04 <TIM_OC2_SetConfig+0xe8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d113      	bne.n	8002dd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	621a      	str	r2, [r3, #32]
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40010000 	.word	0x40010000
 8002e04:	40010400 	.word	0x40010400

08002e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a21      	ldr	r2, [pc, #132]	@ (8002ee8 <TIM_OC3_SetConfig+0xe0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_OC3_SetConfig+0x66>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a20      	ldr	r2, [pc, #128]	@ (8002eec <TIM_OC3_SetConfig+0xe4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10d      	bne.n	8002e8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a16      	ldr	r2, [pc, #88]	@ (8002ee8 <TIM_OC3_SetConfig+0xe0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d003      	beq.n	8002e9a <TIM_OC3_SetConfig+0x92>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a15      	ldr	r2, [pc, #84]	@ (8002eec <TIM_OC3_SetConfig+0xe4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d113      	bne.n	8002ec2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	621a      	str	r2, [r3, #32]
}
 8002edc:	bf00      	nop
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40010400 	.word	0x40010400

08002ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	031b      	lsls	r3, r3, #12
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a12      	ldr	r2, [pc, #72]	@ (8002f94 <TIM_OC4_SetConfig+0xa4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d003      	beq.n	8002f58 <TIM_OC4_SetConfig+0x68>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a11      	ldr	r2, [pc, #68]	@ (8002f98 <TIM_OC4_SetConfig+0xa8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d109      	bne.n	8002f6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	019b      	lsls	r3, r3, #6
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	621a      	str	r2, [r3, #32]
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40010000 	.word	0x40010000
 8002f98:	40010400 	.word	0x40010400

08002f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2201      	movs	r2, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f003 031f 	and.w	r3, r3, #31
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e05a      	b.n	80030b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a21      	ldr	r2, [pc, #132]	@ (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d022      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800304c:	d01d      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1d      	ldr	r2, [pc, #116]	@ (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d018      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1b      	ldr	r2, [pc, #108]	@ (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1a      	ldr	r2, [pc, #104]	@ (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00e      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a18      	ldr	r2, [pc, #96]	@ (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d009      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a17      	ldr	r2, [pc, #92]	@ (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a15      	ldr	r2, [pc, #84]	@ (80030dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d10c      	bne.n	80030a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	4313      	orrs	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40010000 	.word	0x40010000
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40000c00 	.word	0x40000c00
 80030d4:	40010400 	.word	0x40010400
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40001800 	.word	0x40001800

080030e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e042      	b.n	8003178 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fd fcec 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	@ 0x24
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f82b 	bl	8003180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003184:	b0c0      	sub	sp, #256	@ 0x100
 8003186:	af00      	add	r7, sp, #0
 8003188:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319c:	68d9      	ldr	r1, [r3, #12]
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	ea40 0301 	orr.w	r3, r0, r1
 80031a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	431a      	orrs	r2, r3
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031d8:	f021 010c 	bic.w	r1, r1, #12
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031e6:	430b      	orrs	r3, r1
 80031e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fa:	6999      	ldr	r1, [r3, #24]
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	ea40 0301 	orr.w	r3, r0, r1
 8003206:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4b8f      	ldr	r3, [pc, #572]	@ (800344c <UART_SetConfig+0x2cc>)
 8003210:	429a      	cmp	r2, r3
 8003212:	d005      	beq.n	8003220 <UART_SetConfig+0xa0>
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4b8d      	ldr	r3, [pc, #564]	@ (8003450 <UART_SetConfig+0x2d0>)
 800321c:	429a      	cmp	r2, r3
 800321e:	d104      	bne.n	800322a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003220:	f7fe fda4 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 8003224:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003228:	e003      	b.n	8003232 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800322a:	f7fe fd8b 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 800322e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800323c:	f040 810c 	bne.w	8003458 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003244:	2200      	movs	r2, #0
 8003246:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800324a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800324e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003252:	4622      	mov	r2, r4
 8003254:	462b      	mov	r3, r5
 8003256:	1891      	adds	r1, r2, r2
 8003258:	65b9      	str	r1, [r7, #88]	@ 0x58
 800325a:	415b      	adcs	r3, r3
 800325c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800325e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003262:	4621      	mov	r1, r4
 8003264:	eb12 0801 	adds.w	r8, r2, r1
 8003268:	4629      	mov	r1, r5
 800326a:	eb43 0901 	adc.w	r9, r3, r1
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800327a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800327e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003282:	4690      	mov	r8, r2
 8003284:	4699      	mov	r9, r3
 8003286:	4623      	mov	r3, r4
 8003288:	eb18 0303 	adds.w	r3, r8, r3
 800328c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003290:	462b      	mov	r3, r5
 8003292:	eb49 0303 	adc.w	r3, r9, r3
 8003296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800329a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032ae:	460b      	mov	r3, r1
 80032b0:	18db      	adds	r3, r3, r3
 80032b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80032b4:	4613      	mov	r3, r2
 80032b6:	eb42 0303 	adc.w	r3, r2, r3
 80032ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80032bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032c4:	f7fc ff9e 	bl	8000204 <__aeabi_uldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4b61      	ldr	r3, [pc, #388]	@ (8003454 <UART_SetConfig+0x2d4>)
 80032ce:	fba3 2302 	umull	r2, r3, r3, r2
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	011c      	lsls	r4, r3, #4
 80032d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032e8:	4642      	mov	r2, r8
 80032ea:	464b      	mov	r3, r9
 80032ec:	1891      	adds	r1, r2, r2
 80032ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032f0:	415b      	adcs	r3, r3
 80032f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032f8:	4641      	mov	r1, r8
 80032fa:	eb12 0a01 	adds.w	sl, r2, r1
 80032fe:	4649      	mov	r1, r9
 8003300:	eb43 0b01 	adc.w	fp, r3, r1
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003310:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003314:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003318:	4692      	mov	sl, r2
 800331a:	469b      	mov	fp, r3
 800331c:	4643      	mov	r3, r8
 800331e:	eb1a 0303 	adds.w	r3, sl, r3
 8003322:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003326:	464b      	mov	r3, r9
 8003328:	eb4b 0303 	adc.w	r3, fp, r3
 800332c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800333c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003340:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003344:	460b      	mov	r3, r1
 8003346:	18db      	adds	r3, r3, r3
 8003348:	643b      	str	r3, [r7, #64]	@ 0x40
 800334a:	4613      	mov	r3, r2
 800334c:	eb42 0303 	adc.w	r3, r2, r3
 8003350:	647b      	str	r3, [r7, #68]	@ 0x44
 8003352:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003356:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800335a:	f7fc ff53 	bl	8000204 <__aeabi_uldivmod>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4611      	mov	r1, r2
 8003364:	4b3b      	ldr	r3, [pc, #236]	@ (8003454 <UART_SetConfig+0x2d4>)
 8003366:	fba3 2301 	umull	r2, r3, r3, r1
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	2264      	movs	r2, #100	@ 0x64
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	1acb      	subs	r3, r1, r3
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800337a:	4b36      	ldr	r3, [pc, #216]	@ (8003454 <UART_SetConfig+0x2d4>)
 800337c:	fba3 2302 	umull	r2, r3, r3, r2
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003388:	441c      	add	r4, r3
 800338a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800338e:	2200      	movs	r2, #0
 8003390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003394:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003398:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800339c:	4642      	mov	r2, r8
 800339e:	464b      	mov	r3, r9
 80033a0:	1891      	adds	r1, r2, r2
 80033a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033a4:	415b      	adcs	r3, r3
 80033a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033ac:	4641      	mov	r1, r8
 80033ae:	1851      	adds	r1, r2, r1
 80033b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80033b2:	4649      	mov	r1, r9
 80033b4:	414b      	adcs	r3, r1
 80033b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033c4:	4659      	mov	r1, fp
 80033c6:	00cb      	lsls	r3, r1, #3
 80033c8:	4651      	mov	r1, sl
 80033ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ce:	4651      	mov	r1, sl
 80033d0:	00ca      	lsls	r2, r1, #3
 80033d2:	4610      	mov	r0, r2
 80033d4:	4619      	mov	r1, r3
 80033d6:	4603      	mov	r3, r0
 80033d8:	4642      	mov	r2, r8
 80033da:	189b      	adds	r3, r3, r2
 80033dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033e0:	464b      	mov	r3, r9
 80033e2:	460a      	mov	r2, r1
 80033e4:	eb42 0303 	adc.w	r3, r2, r3
 80033e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003400:	460b      	mov	r3, r1
 8003402:	18db      	adds	r3, r3, r3
 8003404:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003406:	4613      	mov	r3, r2
 8003408:	eb42 0303 	adc.w	r3, r2, r3
 800340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800340e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003412:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003416:	f7fc fef5 	bl	8000204 <__aeabi_uldivmod>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4b0d      	ldr	r3, [pc, #52]	@ (8003454 <UART_SetConfig+0x2d4>)
 8003420:	fba3 1302 	umull	r1, r3, r3, r2
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	2164      	movs	r1, #100	@ 0x64
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	3332      	adds	r3, #50	@ 0x32
 8003432:	4a08      	ldr	r2, [pc, #32]	@ (8003454 <UART_SetConfig+0x2d4>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f003 0207 	and.w	r2, r3, #7
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4422      	add	r2, r4
 8003446:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003448:	e106      	b.n	8003658 <UART_SetConfig+0x4d8>
 800344a:	bf00      	nop
 800344c:	40011000 	.word	0x40011000
 8003450:	40011400 	.word	0x40011400
 8003454:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800345c:	2200      	movs	r2, #0
 800345e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003462:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003466:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800346a:	4642      	mov	r2, r8
 800346c:	464b      	mov	r3, r9
 800346e:	1891      	adds	r1, r2, r2
 8003470:	6239      	str	r1, [r7, #32]
 8003472:	415b      	adcs	r3, r3
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
 8003476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800347a:	4641      	mov	r1, r8
 800347c:	1854      	adds	r4, r2, r1
 800347e:	4649      	mov	r1, r9
 8003480:	eb43 0501 	adc.w	r5, r3, r1
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	00eb      	lsls	r3, r5, #3
 800348e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003492:	00e2      	lsls	r2, r4, #3
 8003494:	4614      	mov	r4, r2
 8003496:	461d      	mov	r5, r3
 8003498:	4643      	mov	r3, r8
 800349a:	18e3      	adds	r3, r4, r3
 800349c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034a0:	464b      	mov	r3, r9
 80034a2:	eb45 0303 	adc.w	r3, r5, r3
 80034a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034c6:	4629      	mov	r1, r5
 80034c8:	008b      	lsls	r3, r1, #2
 80034ca:	4621      	mov	r1, r4
 80034cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034d0:	4621      	mov	r1, r4
 80034d2:	008a      	lsls	r2, r1, #2
 80034d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034d8:	f7fc fe94 	bl	8000204 <__aeabi_uldivmod>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4b60      	ldr	r3, [pc, #384]	@ (8003664 <UART_SetConfig+0x4e4>)
 80034e2:	fba3 2302 	umull	r2, r3, r3, r2
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	011c      	lsls	r4, r3, #4
 80034ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034fc:	4642      	mov	r2, r8
 80034fe:	464b      	mov	r3, r9
 8003500:	1891      	adds	r1, r2, r2
 8003502:	61b9      	str	r1, [r7, #24]
 8003504:	415b      	adcs	r3, r3
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800350c:	4641      	mov	r1, r8
 800350e:	1851      	adds	r1, r2, r1
 8003510:	6139      	str	r1, [r7, #16]
 8003512:	4649      	mov	r1, r9
 8003514:	414b      	adcs	r3, r1
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003524:	4659      	mov	r1, fp
 8003526:	00cb      	lsls	r3, r1, #3
 8003528:	4651      	mov	r1, sl
 800352a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800352e:	4651      	mov	r1, sl
 8003530:	00ca      	lsls	r2, r1, #3
 8003532:	4610      	mov	r0, r2
 8003534:	4619      	mov	r1, r3
 8003536:	4603      	mov	r3, r0
 8003538:	4642      	mov	r2, r8
 800353a:	189b      	adds	r3, r3, r2
 800353c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003540:	464b      	mov	r3, r9
 8003542:	460a      	mov	r2, r1
 8003544:	eb42 0303 	adc.w	r3, r2, r3
 8003548:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003556:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003564:	4649      	mov	r1, r9
 8003566:	008b      	lsls	r3, r1, #2
 8003568:	4641      	mov	r1, r8
 800356a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800356e:	4641      	mov	r1, r8
 8003570:	008a      	lsls	r2, r1, #2
 8003572:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003576:	f7fc fe45 	bl	8000204 <__aeabi_uldivmod>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4611      	mov	r1, r2
 8003580:	4b38      	ldr	r3, [pc, #224]	@ (8003664 <UART_SetConfig+0x4e4>)
 8003582:	fba3 2301 	umull	r2, r3, r3, r1
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2264      	movs	r2, #100	@ 0x64
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	1acb      	subs	r3, r1, r3
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	3332      	adds	r3, #50	@ 0x32
 8003594:	4a33      	ldr	r2, [pc, #204]	@ (8003664 <UART_SetConfig+0x4e4>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035a0:	441c      	add	r4, r3
 80035a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035a6:	2200      	movs	r2, #0
 80035a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80035aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80035ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035b0:	4642      	mov	r2, r8
 80035b2:	464b      	mov	r3, r9
 80035b4:	1891      	adds	r1, r2, r2
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	415b      	adcs	r3, r3
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c0:	4641      	mov	r1, r8
 80035c2:	1851      	adds	r1, r2, r1
 80035c4:	6039      	str	r1, [r7, #0]
 80035c6:	4649      	mov	r1, r9
 80035c8:	414b      	adcs	r3, r1
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035d8:	4659      	mov	r1, fp
 80035da:	00cb      	lsls	r3, r1, #3
 80035dc:	4651      	mov	r1, sl
 80035de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035e2:	4651      	mov	r1, sl
 80035e4:	00ca      	lsls	r2, r1, #3
 80035e6:	4610      	mov	r0, r2
 80035e8:	4619      	mov	r1, r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	4642      	mov	r2, r8
 80035ee:	189b      	adds	r3, r3, r2
 80035f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035f2:	464b      	mov	r3, r9
 80035f4:	460a      	mov	r2, r1
 80035f6:	eb42 0303 	adc.w	r3, r2, r3
 80035fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	663b      	str	r3, [r7, #96]	@ 0x60
 8003606:	667a      	str	r2, [r7, #100]	@ 0x64
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003614:	4649      	mov	r1, r9
 8003616:	008b      	lsls	r3, r1, #2
 8003618:	4641      	mov	r1, r8
 800361a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800361e:	4641      	mov	r1, r8
 8003620:	008a      	lsls	r2, r1, #2
 8003622:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003626:	f7fc fded 	bl	8000204 <__aeabi_uldivmod>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <UART_SetConfig+0x4e4>)
 8003630:	fba3 1302 	umull	r1, r3, r3, r2
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	2164      	movs	r1, #100	@ 0x64
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	3332      	adds	r3, #50	@ 0x32
 8003642:	4a08      	ldr	r2, [pc, #32]	@ (8003664 <UART_SetConfig+0x4e4>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	f003 020f 	and.w	r2, r3, #15
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4422      	add	r2, r4
 8003656:	609a      	str	r2, [r3, #8]
}
 8003658:	bf00      	nop
 800365a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800365e:	46bd      	mov	sp, r7
 8003660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003664:	51eb851f 	.word	0x51eb851f

08003668 <memset>:
 8003668:	4402      	add	r2, r0
 800366a:	4603      	mov	r3, r0
 800366c:	4293      	cmp	r3, r2
 800366e:	d100      	bne.n	8003672 <memset+0xa>
 8003670:	4770      	bx	lr
 8003672:	f803 1b01 	strb.w	r1, [r3], #1
 8003676:	e7f9      	b.n	800366c <memset+0x4>

08003678 <__libc_init_array>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	4d0d      	ldr	r5, [pc, #52]	@ (80036b0 <__libc_init_array+0x38>)
 800367c:	4c0d      	ldr	r4, [pc, #52]	@ (80036b4 <__libc_init_array+0x3c>)
 800367e:	1b64      	subs	r4, r4, r5
 8003680:	10a4      	asrs	r4, r4, #2
 8003682:	2600      	movs	r6, #0
 8003684:	42a6      	cmp	r6, r4
 8003686:	d109      	bne.n	800369c <__libc_init_array+0x24>
 8003688:	4d0b      	ldr	r5, [pc, #44]	@ (80036b8 <__libc_init_array+0x40>)
 800368a:	4c0c      	ldr	r4, [pc, #48]	@ (80036bc <__libc_init_array+0x44>)
 800368c:	f000 f818 	bl	80036c0 <_init>
 8003690:	1b64      	subs	r4, r4, r5
 8003692:	10a4      	asrs	r4, r4, #2
 8003694:	2600      	movs	r6, #0
 8003696:	42a6      	cmp	r6, r4
 8003698:	d105      	bne.n	80036a6 <__libc_init_array+0x2e>
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a0:	4798      	blx	r3
 80036a2:	3601      	adds	r6, #1
 80036a4:	e7ee      	b.n	8003684 <__libc_init_array+0xc>
 80036a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036aa:	4798      	blx	r3
 80036ac:	3601      	adds	r6, #1
 80036ae:	e7f2      	b.n	8003696 <__libc_init_array+0x1e>
 80036b0:	080036f8 	.word	0x080036f8
 80036b4:	080036f8 	.word	0x080036f8
 80036b8:	080036f8 	.word	0x080036f8
 80036bc:	080036fc 	.word	0x080036fc

080036c0 <_init>:
 80036c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c2:	bf00      	nop
 80036c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c6:	bc08      	pop	{r3}
 80036c8:	469e      	mov	lr, r3
 80036ca:	4770      	bx	lr

080036cc <_fini>:
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	bf00      	nop
 80036d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d2:	bc08      	pop	{r3}
 80036d4:	469e      	mov	lr, r3
 80036d6:	4770      	bx	lr
