
neo-7m_gps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e8c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800405c  0800405c  0000505c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e4  080042e4  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080042e4  080042e4  000052e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042ec  080042ec  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042ec  080042ec  000052ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042f0  080042f0  000052f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080042f4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000068  0800435c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000668  0800435c  00006668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008dc5  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a9  00000000  00000000  0000ee5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  00010808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fe  00000000  00000000  00010ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e38  00000000  00000000  000115ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a707  00000000  00000000  00033426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca2ad  00000000  00000000  0003db2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00107dda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bac  00000000  00000000  00107e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004044 	.word	0x08004044

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004044 	.word	0x08004044

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ProcessGPSData.0>:
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  void ProcessGPSData(char* data)
  {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	f8c7 c000 	str.w	ip, [r7]
      // 수신된 GPS 데이터를 처리하는 로직을 여기에 작성합니다.
      // 예: UART를 통해 수신된 데이터를 파싱하고 원하는 정보를 추출합니다.
      printf("GPS data\r\n");
 80005bc:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <ProcessGPSData.0+0x28>)
 80005be:	f002 fbf9 	bl	8002db4 <puts>
      printf(data);
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f002 fb8e 	bl	8002ce4 <iprintf>
      printf("\r\n");
 80005c8:	4804      	ldr	r0, [pc, #16]	@ (80005dc <ProcessGPSData.0+0x2c>)
 80005ca:	f002 fbf3 	bl	8002db4 <puts>
  }
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	0800405c 	.word	0x0800405c
 80005dc:	08004068 	.word	0x08004068

080005e0 <main>:
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	@ 0x58
 80005e4:	af00      	add	r7, sp, #0
int main(void)
 80005e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80005ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_Init();
 80005ec:	f000 fc50 	bl	8000e90 <HAL_Init>
  SystemClock_Config();
 80005f0:	f000 f944 	bl	800087c <SystemClock_Config>
  MX_GPIO_Init();
 80005f4:	f000 fa08 	bl	8000a08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 f9dc 	bl	80009b4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005fc:	f000 f9b0 	bl	8000960 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // GPS ?��?��?�� ?��?��
      if (HAL_UART_Receive(&huart1, (uint8_t*)gps_data, sizeof(gps_data), HAL_MAX_DELAY) == HAL_OK)
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000608:	4941      	ldr	r1, [pc, #260]	@ (8000710 <main+0x130>)
 800060a:	4842      	ldr	r0, [pc, #264]	@ (8000714 <main+0x134>)
 800060c:	f001 fe59 	bl	80022c2 <HAL_UART_Receive>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d105      	bne.n	8000622 <main+0x42>
      {
    	  // GPS 데이터 처리
          ProcessGPSData(gps_data);
 8000616:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800061a:	469c      	mov	ip, r3
 800061c:	483c      	ldr	r0, [pc, #240]	@ (8000710 <main+0x130>)
 800061e:	f7ff ffc7 	bl	80005b0 <ProcessGPSData.0>

      }

      char latitude[20] = {0};
 8000622:	2300      	movs	r3, #0
 8000624:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000626:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
      char longitude[20] = {0};
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
 8000638:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
      char rawTime[20] = {0};
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
      char formattedTime[10] = {0};
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	809a      	strh	r2, [r3, #4]
      int satellites = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	657b      	str	r3, [r7, #84]	@ 0x54

      // Process each line of the GPS data
      char* line = strtok(gps_data, "\n");
 800066a:	492b      	ldr	r1, [pc, #172]	@ (8000718 <main+0x138>)
 800066c:	4828      	ldr	r0, [pc, #160]	@ (8000710 <main+0x130>)
 800066e:	f002 fccf 	bl	8003010 <strtok>
 8000672:	6538      	str	r0, [r7, #80]	@ 0x50
      while (line != NULL) {
 8000674:	e028      	b.n	80006c8 <main+0xe8>
          if (strncmp(line, "$GPRMC", 6) == 0) {
 8000676:	2206      	movs	r2, #6
 8000678:	4928      	ldr	r1, [pc, #160]	@ (800071c <main+0x13c>)
 800067a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800067c:	f002 fcb6 	bl	8002fec <strncmp>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d10c      	bne.n	80006a0 <main+0xc0>
              parseGPRMC(line, latitude, longitude, rawTime);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800068e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000692:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000696:	4684      	mov	ip, r0
 8000698:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800069a:	f000 f84b 	bl	8000734 <parseGPRMC.1>
 800069e:	e00e      	b.n	80006be <main+0xde>
          } else if (strncmp(line, "$GPGGA", 6) == 0) {
 80006a0:	2206      	movs	r2, #6
 80006a2:	491f      	ldr	r1, [pc, #124]	@ (8000720 <main+0x140>)
 80006a4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80006a6:	f002 fca1 	bl	8002fec <strncmp>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d106      	bne.n	80006be <main+0xde>
              satellites = parseGPGGA(line);
 80006b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006b4:	469c      	mov	ip, r3
 80006b6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80006b8:	f000 f876 	bl	80007a8 <parseGPGGA.2>
 80006bc:	6578      	str	r0, [r7, #84]	@ 0x54
          }
          line = strtok(NULL, "\n");
 80006be:	4916      	ldr	r1, [pc, #88]	@ (8000718 <main+0x138>)
 80006c0:	2000      	movs	r0, #0
 80006c2:	f002 fca5 	bl	8003010 <strtok>
 80006c6:	6538      	str	r0, [r7, #80]	@ 0x50
      while (line != NULL) {
 80006c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1d3      	bne.n	8000676 <main+0x96>
      }

      // Format and print the time
      formatTime(rawTime, formattedTime);
 80006ce:	1d3a      	adds	r2, r7, #4
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80006d8:	468c      	mov	ip, r1
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f88d 	bl	80007fc <formatTime.3>

      // Output parsed data
      printf("Time (UTC): %s\r\n", formattedTime);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	480f      	ldr	r0, [pc, #60]	@ (8000724 <main+0x144>)
 80006e8:	f002 fafc 	bl	8002ce4 <iprintf>
      printf("Latitude: %s\r\n", latitude);
 80006ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006f0:	4619      	mov	r1, r3
 80006f2:	480d      	ldr	r0, [pc, #52]	@ (8000728 <main+0x148>)
 80006f4:	f002 faf6 	bl	8002ce4 <iprintf>
      printf("Longitude: %s\r\n", longitude);
 80006f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fc:	4619      	mov	r1, r3
 80006fe:	480b      	ldr	r0, [pc, #44]	@ (800072c <main+0x14c>)
 8000700:	f002 faf0 	bl	8002ce4 <iprintf>
      printf("Satellites: %d\r\n", satellites);
 8000704:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000706:	480a      	ldr	r0, [pc, #40]	@ (8000730 <main+0x150>)
 8000708:	f002 faec 	bl	8002ce4 <iprintf>
  {
 800070c:	e778      	b.n	8000600 <main+0x20>
 800070e:	bf00      	nop
 8000710:	20000114 	.word	0x20000114
 8000714:	20000084 	.word	0x20000084
 8000718:	0800406c 	.word	0x0800406c
 800071c:	08004070 	.word	0x08004070
 8000720:	08004078 	.word	0x08004078
 8000724:	08004080 	.word	0x08004080
 8000728:	08004094 	.word	0x08004094
 800072c:	080040a4 	.word	0x080040a4
 8000730:	080040b4 	.word	0x080040b4

08000734 <parseGPRMC.1>:
  void parseGPRMC(char* nmeaSentence, char* latitude, char* longitude, char* time) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
 800073a:	6178      	str	r0, [r7, #20]
 800073c:	6139      	str	r1, [r7, #16]
 800073e:	60fa      	str	r2, [r7, #12]
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	f8c7 c004 	str.w	ip, [r7, #4]
      char* token = strtok(nmeaSentence, ",");
 8000746:	4917      	ldr	r1, [pc, #92]	@ (80007a4 <parseGPRMC.1+0x70>)
 8000748:	6978      	ldr	r0, [r7, #20]
 800074a:	f002 fc61 	bl	8003010 <strtok>
 800074e:	61f8      	str	r0, [r7, #28]
      int fieldCount = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
      while (token != NULL) {
 8000754:	e01e      	b.n	8000794 <parseGPRMC.1+0x60>
          if (fieldCount == 1) {
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d104      	bne.n	8000766 <parseGPRMC.1+0x32>
              strcpy(time, token); // Time field
 800075c:	69f9      	ldr	r1, [r7, #28]
 800075e:	68b8      	ldr	r0, [r7, #8]
 8000760:	f002 fd25 	bl	80031ae <strcpy>
 8000764:	e00e      	b.n	8000784 <parseGPRMC.1+0x50>
          } else if (fieldCount == 3) {
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	2b03      	cmp	r3, #3
 800076a:	d104      	bne.n	8000776 <parseGPRMC.1+0x42>
              strcpy(latitude, token);
 800076c:	69f9      	ldr	r1, [r7, #28]
 800076e:	6938      	ldr	r0, [r7, #16]
 8000770:	f002 fd1d 	bl	80031ae <strcpy>
 8000774:	e006      	b.n	8000784 <parseGPRMC.1+0x50>
          } else if (fieldCount == 5) {
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	2b05      	cmp	r3, #5
 800077a:	d103      	bne.n	8000784 <parseGPRMC.1+0x50>
              strcpy(longitude, token);
 800077c:	69f9      	ldr	r1, [r7, #28]
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f002 fd15 	bl	80031ae <strcpy>
          token = strtok(NULL, ",");
 8000784:	4907      	ldr	r1, [pc, #28]	@ (80007a4 <parseGPRMC.1+0x70>)
 8000786:	2000      	movs	r0, #0
 8000788:	f002 fc42 	bl	8003010 <strtok>
 800078c:	61f8      	str	r0, [r7, #28]
          fieldCount++;
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	3301      	adds	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
      while (token != NULL) {
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1dd      	bne.n	8000756 <parseGPRMC.1+0x22>
  }
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	080040c8 	.word	0x080040c8

080007a8 <parseGPGGA.2>:
  int parseGPGGA(char* nmeaSentence) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	f8c7 c000 	str.w	ip, [r7]
      char* token = strtok(nmeaSentence, ",");
 80007b4:	4910      	ldr	r1, [pc, #64]	@ (80007f8 <parseGPGGA.2+0x50>)
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f002 fc2a 	bl	8003010 <strtok>
 80007bc:	6178      	str	r0, [r7, #20]
      int fieldCount = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
      int satellites = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
      while (token != NULL) {
 80007c6:	e00e      	b.n	80007e6 <parseGPGGA.2+0x3e>
          if (fieldCount == 7) {
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	2b07      	cmp	r3, #7
 80007cc:	d103      	bne.n	80007d6 <parseGPGGA.2+0x2e>
              satellites = atoi(token);
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f002 f93e 	bl	8002a50 <atoi>
 80007d4:	60f8      	str	r0, [r7, #12]
          token = strtok(NULL, ",");
 80007d6:	4908      	ldr	r1, [pc, #32]	@ (80007f8 <parseGPGGA.2+0x50>)
 80007d8:	2000      	movs	r0, #0
 80007da:	f002 fc19 	bl	8003010 <strtok>
 80007de:	6178      	str	r0, [r7, #20]
          fieldCount++;
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	3301      	adds	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
      while (token != NULL) {
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1ed      	bne.n	80007c8 <parseGPGGA.2+0x20>
      return satellites;
 80007ec:	68fb      	ldr	r3, [r7, #12]
  }
 80007ee:	4618      	mov	r0, r3
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	080040c8 	.word	0x080040c8

080007fc <formatTime.3>:
  void formatTime(char* rawTime, char* formattedTime) {
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b08a      	sub	sp, #40	@ 0x28
 8000800:	af06      	add	r7, sp, #24
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	f8c7 c004 	str.w	ip, [r7, #4]
      if (strlen(rawTime) >= 6) {
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	f7ff fd00 	bl	8000210 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	2b05      	cmp	r3, #5
 8000814:	d921      	bls.n	800085a <formatTime.3+0x5e>
          snprintf(formattedTime, 9, "%c%c:%c%c:%c%c", rawTime[0], rawTime[1], rawTime[2], rawTime[3], rawTime[4], rawTime[5]);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461d      	mov	r5, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	461a      	mov	r2, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3302      	adds	r3, #2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4619      	mov	r1, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3303      	adds	r3, #3
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3304      	adds	r3, #4
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461c      	mov	r4, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3305      	adds	r3, #5
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	9304      	str	r3, [sp, #16]
 8000844:	9403      	str	r4, [sp, #12]
 8000846:	9002      	str	r0, [sp, #8]
 8000848:	9101      	str	r1, [sp, #4]
 800084a:	9200      	str	r2, [sp, #0]
 800084c:	462b      	mov	r3, r5
 800084e:	4a09      	ldr	r2, [pc, #36]	@ (8000874 <formatTime.3+0x78>)
 8000850:	2109      	movs	r1, #9
 8000852:	68b8      	ldr	r0, [r7, #8]
 8000854:	f002 fab6 	bl	8002dc4 <sniprintf>
  }
 8000858:	e008      	b.n	800086c <formatTime.3+0x70>
          strcpy(formattedTime, "00:00:00");
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	4906      	ldr	r1, [pc, #24]	@ (8000878 <formatTime.3+0x7c>)
 800085e:	461a      	mov	r2, r3
 8000860:	460b      	mov	r3, r1
 8000862:	cb03      	ldmia	r3!, {r0, r1}
 8000864:	6010      	str	r0, [r2, #0]
 8000866:	6051      	str	r1, [r2, #4]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	7213      	strb	r3, [r2, #8]
  }
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bdb0      	pop	{r4, r5, r7, pc}
 8000874:	080040cc 	.word	0x080040cc
 8000878:	080040dc 	.word	0x080040dc

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	@ 0x50
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2234      	movs	r2, #52	@ 0x34
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f002 fba6 	bl	8002fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000958 <SystemClock_Config+0xdc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	4a2b      	ldr	r2, [pc, #172]	@ (8000958 <SystemClock_Config+0xdc>)
 80008aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b0:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <SystemClock_Config+0xdc>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008bc:	2300      	movs	r3, #0
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	4b26      	ldr	r3, [pc, #152]	@ (800095c <SystemClock_Config+0xe0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a25      	ldr	r2, [pc, #148]	@ (800095c <SystemClock_Config+0xe0>)
 80008c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	4b23      	ldr	r3, [pc, #140]	@ (800095c <SystemClock_Config+0xe0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d8:	2302      	movs	r3, #2
 80008da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008dc:	2301      	movs	r3, #1
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e0:	2310      	movs	r3, #16
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008ec:	2308      	movs	r3, #8
 80008ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008f0:	23b4      	movs	r3, #180	@ 0xb4
 80008f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4618      	mov	r0, r3
 8000906:	f001 f963 	bl	8001bd0 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000910:	f000 f8fe 	bl	8000b10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000914:	f000 fdc2 	bl	800149c <HAL_PWREx_EnableOverDrive>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800091e:	f000 f8f7 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	230f      	movs	r3, #15
 8000924:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000926:	2302      	movs	r3, #2
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800092e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000938:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2105      	movs	r1, #5
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fdfb 	bl	800153c <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800094c:	f000 f8e0 	bl	8000b10 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3750      	adds	r7, #80	@ 0x50
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	40007000 	.word	0x40007000

08000960 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_USART1_UART_Init+0x4c>)
 8000966:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <MX_USART1_UART_Init+0x50>)
 8000968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <MX_USART1_UART_Init+0x4c>)
 800096c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_USART1_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_USART1_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_USART1_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_USART1_UART_Init+0x4c>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_USART1_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_USART1_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_USART1_UART_Init+0x4c>)
 8000998:	f001 fbb8 	bl	800210c <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009a2:	f000 f8b5 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000084 	.word	0x20000084
 80009b0:	40011000 	.word	0x40011000

080009b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <MX_USART2_UART_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ec:	f001 fb8e 	bl	800210c <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 f88b 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000cc 	.word	0x200000cc
 8000a04:	40004400 	.word	0x40004400

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a2c      	ldr	r2, [pc, #176]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a25      	ldr	r2, [pc, #148]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a17      	ldr	r2, [pc, #92]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	4812      	ldr	r0, [pc, #72]	@ (8000adc <MX_GPIO_Init+0xd4>)
 8000a94:	f000 fce8 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <MX_GPIO_Init+0xd8>)
 8000ab0:	f000 fb46 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4804      	ldr	r0, [pc, #16]	@ (8000adc <MX_GPIO_Init+0xd4>)
 8000acc:	f000 fb38 	bl	8001140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <_write+0x28>)
 8000afc:	f001 fb56 	bl	80021ac <HAL_UART_Transmit>
    return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000cc 	.word	0x200000cc

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b5a:	2007      	movs	r0, #7
 8000b5c:	f000 fabc 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	@ 0x30
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a32      	ldr	r2, [pc, #200]	@ (8000c54 <HAL_UART_MspInit+0xe8>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12d      	bne.n	8000bea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	4b31      	ldr	r3, [pc, #196]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	4a30      	ldr	r2, [pc, #192]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000b98:	f043 0310 	orr.w	r3, r3, #16
 8000b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	f003 0310 	and.w	r3, r3, #16
 8000ba6:	61bb      	str	r3, [r7, #24]
 8000ba8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	4b2a      	ldr	r3, [pc, #168]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a29      	ldr	r2, [pc, #164]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bc6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	481e      	ldr	r0, [pc, #120]	@ (8000c5c <HAL_UART_MspInit+0xf0>)
 8000be4:	f000 faac 	bl	8001140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be8:	e030      	b.n	8000c4c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1c      	ldr	r2, [pc, #112]	@ (8000c60 <HAL_UART_MspInit+0xf4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d12b      	bne.n	8000c4c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfc:	4a16      	ldr	r2, [pc, #88]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c04:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c18:	4a0f      	ldr	r2, [pc, #60]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c20:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c2c:	230c      	movs	r3, #12
 8000c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3c:	2307      	movs	r3, #7
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <HAL_UART_MspInit+0xf0>)
 8000c48:	f000 fa7a 	bl	8001140 <HAL_GPIO_Init>
}
 8000c4c:	bf00      	nop
 8000c4e:	3730      	adds	r7, #48	@ 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40011000 	.word	0x40011000
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40004400 	.word	0x40004400

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <NMI_Handler+0x4>

08000c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cba:	f000 f93b 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  return 1;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_kill>:

int _kill(int pid, int sig)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cdc:	f002 fa3a 	bl	8003154 <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2216      	movs	r2, #22
 8000ce4:	601a      	str	r2, [r3, #0]
  return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_exit>:

void _exit (int status)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffe7 	bl	8000cd2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <_exit+0x12>

08000d08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e00a      	b.n	8000d30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d1a:	f3af 8000 	nop.w
 8000d1e:	4601      	mov	r1, r0
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	60ba      	str	r2, [r7, #8]
 8000d26:	b2ca      	uxtb	r2, r1
 8000d28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	dbf0      	blt.n	8000d1a <_read+0x12>
  }

  return len;
 8000d38:	687b      	ldr	r3, [r7, #4]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_isatty>:

int _isatty(int file)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db4:	4a14      	ldr	r2, [pc, #80]	@ (8000e08 <_sbrk+0x5c>)
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <_sbrk+0x60>)
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <_sbrk+0x64>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <_sbrk+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d207      	bcs.n	8000dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ddc:	f002 f9ba 	bl	8003154 <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	220c      	movs	r2, #12
 8000de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e009      	b.n	8000e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df2:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <_sbrk+0x64>)
 8000dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20020000 	.word	0x20020000
 8000e0c:	00000400 	.word	0x00000400
 8000e10:	20000514 	.word	0x20000514
 8000e14:	20000668 	.word	0x20000668

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <SystemInit+0x20>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e22:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <SystemInit+0x20>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e40:	f7ff ffea 	bl	8000e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e46:	490d      	ldr	r1, [pc, #52]	@ (8000e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f002 f979 	bl	8003160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fbb7 	bl	80005e0 <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e80:	080042f4 	.word	0x080042f4
  ldr r2, =_sbss
 8000e84:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e88:	20000668 	.word	0x20000668

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <HAL_Init+0x40>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <HAL_Init+0x40>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	@ (8000ed0 <HAL_Init+0x40>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f90d 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f808 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff fe2a 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_InitTick+0x54>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <HAL_InitTick+0x58>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f917 	bl	8001126 <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 f8ed 	bl	80010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	@ (8000f30 <HAL_InitTick+0x5c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000518 	.word	0x20000518

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000518 	.word	0x20000518

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	@ (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	@ (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	@ 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	@ 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f7ff ff8e 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff47 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff5c 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff8e 	bl	800102c <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffb0 	bl	8001094 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e165      	b.n	8001428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8154 	bne.w	8001422 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d005      	beq.n	8001192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118e:	2b02      	cmp	r3, #2
 8001190:	d130      	bne.n	80011f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 0201 	and.w	r2, r3, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d017      	beq.n	8001230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	69b9      	ldr	r1, [r7, #24]
 8001280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80ae 	beq.w	8001422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001440 <HAL_GPIO_Init+0x300>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001440 <HAL_GPIO_Init+0x300>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001440 <HAL_GPIO_Init+0x300>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e2:	4a58      	ldr	r2, [pc, #352]	@ (8001444 <HAL_GPIO_Init+0x304>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4f      	ldr	r2, [pc, #316]	@ (8001448 <HAL_GPIO_Init+0x308>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d025      	beq.n	800135a <HAL_GPIO_Init+0x21a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4e      	ldr	r2, [pc, #312]	@ (800144c <HAL_GPIO_Init+0x30c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01f      	beq.n	8001356 <HAL_GPIO_Init+0x216>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4d      	ldr	r2, [pc, #308]	@ (8001450 <HAL_GPIO_Init+0x310>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x212>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4c      	ldr	r2, [pc, #304]	@ (8001454 <HAL_GPIO_Init+0x314>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x20e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4b      	ldr	r2, [pc, #300]	@ (8001458 <HAL_GPIO_Init+0x318>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x20a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4a      	ldr	r2, [pc, #296]	@ (800145c <HAL_GPIO_Init+0x31c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x206>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a49      	ldr	r2, [pc, #292]	@ (8001460 <HAL_GPIO_Init+0x320>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x202>
 800133e:	2306      	movs	r3, #6
 8001340:	e00c      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001342:	2307      	movs	r3, #7
 8001344:	e00a      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001346:	2305      	movs	r3, #5
 8001348:	e008      	b.n	800135c <HAL_GPIO_Init+0x21c>
 800134a:	2304      	movs	r3, #4
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x21c>
 800134e:	2303      	movs	r3, #3
 8001350:	e004      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001352:	2302      	movs	r3, #2
 8001354:	e002      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <HAL_GPIO_Init+0x21c>
 800135a:	2300      	movs	r3, #0
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	f002 0203 	and.w	r2, r2, #3
 8001362:	0092      	lsls	r2, r2, #2
 8001364:	4093      	lsls	r3, r2
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800136c:	4935      	ldr	r1, [pc, #212]	@ (8001444 <HAL_GPIO_Init+0x304>)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137a:	4b3a      	ldr	r3, [pc, #232]	@ (8001464 <HAL_GPIO_Init+0x324>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139e:	4a31      	ldr	r2, [pc, #196]	@ (8001464 <HAL_GPIO_Init+0x324>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <HAL_GPIO_Init+0x324>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c8:	4a26      	ldr	r2, [pc, #152]	@ (8001464 <HAL_GPIO_Init+0x324>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ce:	4b25      	ldr	r3, [pc, #148]	@ (8001464 <HAL_GPIO_Init+0x324>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <HAL_GPIO_Init+0x324>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <HAL_GPIO_Init+0x324>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800141c:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <HAL_GPIO_Init+0x324>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3301      	adds	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	f67f ae96 	bls.w	800115c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3724      	adds	r7, #36	@ 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40013800 	.word	0x40013800
 8001448:	40020000 	.word	0x40020000
 800144c:	40020400 	.word	0x40020400
 8001450:	40020800 	.word	0x40020800
 8001454:	40020c00 	.word	0x40020c00
 8001458:	40021000 	.word	0x40021000
 800145c:	40021400 	.word	0x40021400
 8001460:	40021800 	.word	0x40021800
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	041a      	lsls	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	619a      	str	r2, [r3, #24]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b20      	ldr	r3, [pc, #128]	@ (800152c <HAL_PWREx_EnableOverDrive+0x90>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <HAL_PWREx_EnableOverDrive+0x90>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <HAL_PWREx_EnableOverDrive+0x90>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <HAL_PWREx_EnableOverDrive+0x94>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c8:	f7ff fd48 	bl	8000f5c <HAL_GetTick>
 80014cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ce:	e009      	b.n	80014e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014d0:	f7ff fd44 	bl	8000f5c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014de:	d901      	bls.n	80014e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e01f      	b.n	8001524 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <HAL_PWREx_EnableOverDrive+0x98>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f0:	d1ee      	bne.n	80014d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014f2:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f8:	f7ff fd30 	bl	8000f5c <HAL_GetTick>
 80014fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014fe:	e009      	b.n	8001514 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001500:	f7ff fd2c 	bl	8000f5c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800150e:	d901      	bls.n	8001514 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e007      	b.n	8001524 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001514:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <HAL_PWREx_EnableOverDrive+0x98>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001520:	d1ee      	bne.n	8001500 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	420e0040 	.word	0x420e0040
 8001534:	40007000 	.word	0x40007000
 8001538:	420e0044 	.word	0x420e0044

0800153c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0cc      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001550:	4b68      	ldr	r3, [pc, #416]	@ (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d90c      	bls.n	8001578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b65      	ldr	r3, [pc, #404]	@ (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b63      	ldr	r3, [pc, #396]	@ (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0b8      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d020      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001590:	4b59      	ldr	r3, [pc, #356]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4a58      	ldr	r2, [pc, #352]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800159a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a8:	4b53      	ldr	r3, [pc, #332]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a52      	ldr	r2, [pc, #328]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b4:	4b50      	ldr	r3, [pc, #320]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	494d      	ldr	r1, [pc, #308]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d044      	beq.n	800165c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d119      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e07f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d003      	beq.n	80015fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fa:	4b3f      	ldr	r3, [pc, #252]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e06f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160a:	4b3b      	ldr	r3, [pc, #236]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e067      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161a:	4b37      	ldr	r3, [pc, #220]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f023 0203 	bic.w	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4934      	ldr	r1, [pc, #208]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	4313      	orrs	r3, r2
 800162a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800162c:	f7ff fc96 	bl	8000f5c <HAL_GetTick>
 8001630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001632:	e00a      	b.n	800164a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001634:	f7ff fc92 	bl	8000f5c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e04f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	4b2b      	ldr	r3, [pc, #172]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 020c 	and.w	r2, r3, #12
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	429a      	cmp	r2, r3
 800165a:	d1eb      	bne.n	8001634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165c:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d20c      	bcs.n	8001684 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e032      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001690:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4916      	ldr	r1, [pc, #88]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ae:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	490e      	ldr	r1, [pc, #56]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016c2:	f000 f855 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 80016c6:	4602      	mov	r2, r0
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	490a      	ldr	r1, [pc, #40]	@ (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	5ccb      	ldrb	r3, [r1, r3]
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	4a09      	ldr	r2, [pc, #36]	@ (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fbf6 	bl	8000ed4 <HAL_InitTick>

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023c00 	.word	0x40023c00
 80016f8:	40023800 	.word	0x40023800
 80016fc:	080040e8 	.word	0x080040e8
 8001700:	20000000 	.word	0x20000000
 8001704:	20000004 	.word	0x20000004

08001708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800170c:	4b03      	ldr	r3, [pc, #12]	@ (800171c <HAL_RCC_GetHCLKFreq+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000000 	.word	0x20000000

08001720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001724:	f7ff fff0 	bl	8001708 <HAL_RCC_GetHCLKFreq>
 8001728:	4602      	mov	r2, r0
 800172a:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	0a9b      	lsrs	r3, r3, #10
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	4903      	ldr	r1, [pc, #12]	@ (8001744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001736:	5ccb      	ldrb	r3, [r1, r3]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800173c:	4618      	mov	r0, r3
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40023800 	.word	0x40023800
 8001744:	080040f8 	.word	0x080040f8

08001748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800174c:	f7ff ffdc 	bl	8001708 <HAL_RCC_GetHCLKFreq>
 8001750:	4602      	mov	r2, r0
 8001752:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	0b5b      	lsrs	r3, r3, #13
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	4903      	ldr	r1, [pc, #12]	@ (800176c <HAL_RCC_GetPCLK2Freq+0x24>)
 800175e:	5ccb      	ldrb	r3, [r1, r3]
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001764:	4618      	mov	r0, r3
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800
 800176c:	080040f8 	.word	0x080040f8

08001770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001774:	b0ae      	sub	sp, #184	@ 0xb8
 8001776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001796:	4bcb      	ldr	r3, [pc, #812]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	f200 8206 	bhi.w	8001bb0 <HAL_RCC_GetSysClockFreq+0x440>
 80017a4:	a201      	add	r2, pc, #4	@ (adr r2, 80017ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80017a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017aa:	bf00      	nop
 80017ac:	080017e1 	.word	0x080017e1
 80017b0:	08001bb1 	.word	0x08001bb1
 80017b4:	08001bb1 	.word	0x08001bb1
 80017b8:	08001bb1 	.word	0x08001bb1
 80017bc:	080017e9 	.word	0x080017e9
 80017c0:	08001bb1 	.word	0x08001bb1
 80017c4:	08001bb1 	.word	0x08001bb1
 80017c8:	08001bb1 	.word	0x08001bb1
 80017cc:	080017f1 	.word	0x080017f1
 80017d0:	08001bb1 	.word	0x08001bb1
 80017d4:	08001bb1 	.word	0x08001bb1
 80017d8:	08001bb1 	.word	0x08001bb1
 80017dc:	080019e1 	.word	0x080019e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4bb9      	ldr	r3, [pc, #740]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x358>)
 80017e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80017e6:	e1e7      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e8:	4bb8      	ldr	r3, [pc, #736]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x35c>)
 80017ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017ee:	e1e3      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f0:	4bb4      	ldr	r3, [pc, #720]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fc:	4bb1      	ldr	r3, [pc, #708]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d071      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001808:	4bae      	ldr	r3, [pc, #696]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x354>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	099b      	lsrs	r3, r3, #6
 800180e:	2200      	movs	r2, #0
 8001810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001814:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001818:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800181c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001820:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800182a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800182e:	4622      	mov	r2, r4
 8001830:	462b      	mov	r3, r5
 8001832:	f04f 0000 	mov.w	r0, #0
 8001836:	f04f 0100 	mov.w	r1, #0
 800183a:	0159      	lsls	r1, r3, #5
 800183c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001840:	0150      	lsls	r0, r2, #5
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4621      	mov	r1, r4
 8001848:	1a51      	subs	r1, r2, r1
 800184a:	6439      	str	r1, [r7, #64]	@ 0x40
 800184c:	4629      	mov	r1, r5
 800184e:	eb63 0301 	sbc.w	r3, r3, r1
 8001852:	647b      	str	r3, [r7, #68]	@ 0x44
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001860:	4649      	mov	r1, r9
 8001862:	018b      	lsls	r3, r1, #6
 8001864:	4641      	mov	r1, r8
 8001866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800186a:	4641      	mov	r1, r8
 800186c:	018a      	lsls	r2, r1, #6
 800186e:	4641      	mov	r1, r8
 8001870:	1a51      	subs	r1, r2, r1
 8001872:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001874:	4649      	mov	r1, r9
 8001876:	eb63 0301 	sbc.w	r3, r3, r1
 800187a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001888:	4649      	mov	r1, r9
 800188a:	00cb      	lsls	r3, r1, #3
 800188c:	4641      	mov	r1, r8
 800188e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001892:	4641      	mov	r1, r8
 8001894:	00ca      	lsls	r2, r1, #3
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	4603      	mov	r3, r0
 800189c:	4622      	mov	r2, r4
 800189e:	189b      	adds	r3, r3, r2
 80018a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80018a2:	462b      	mov	r3, r5
 80018a4:	460a      	mov	r2, r1
 80018a6:	eb42 0303 	adc.w	r3, r2, r3
 80018aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018b8:	4629      	mov	r1, r5
 80018ba:	024b      	lsls	r3, r1, #9
 80018bc:	4621      	mov	r1, r4
 80018be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018c2:	4621      	mov	r1, r4
 80018c4:	024a      	lsls	r2, r1, #9
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018ce:	2200      	movs	r2, #0
 80018d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80018dc:	f7fe fcf0 	bl	80002c0 <__aeabi_uldivmod>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4613      	mov	r3, r2
 80018e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018ea:	e067      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ec:	4b75      	ldr	r3, [pc, #468]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	099b      	lsrs	r3, r3, #6
 80018f2:	2200      	movs	r2, #0
 80018f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80018fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001904:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001906:	2300      	movs	r3, #0
 8001908:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800190a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800190e:	4622      	mov	r2, r4
 8001910:	462b      	mov	r3, r5
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	0159      	lsls	r1, r3, #5
 800191c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001920:	0150      	lsls	r0, r2, #5
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4621      	mov	r1, r4
 8001928:	1a51      	subs	r1, r2, r1
 800192a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800192c:	4629      	mov	r1, r5
 800192e:	eb63 0301 	sbc.w	r3, r3, r1
 8001932:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001940:	4649      	mov	r1, r9
 8001942:	018b      	lsls	r3, r1, #6
 8001944:	4641      	mov	r1, r8
 8001946:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800194a:	4641      	mov	r1, r8
 800194c:	018a      	lsls	r2, r1, #6
 800194e:	4641      	mov	r1, r8
 8001950:	ebb2 0a01 	subs.w	sl, r2, r1
 8001954:	4649      	mov	r1, r9
 8001956:	eb63 0b01 	sbc.w	fp, r3, r1
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001966:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800196a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800196e:	4692      	mov	sl, r2
 8001970:	469b      	mov	fp, r3
 8001972:	4623      	mov	r3, r4
 8001974:	eb1a 0303 	adds.w	r3, sl, r3
 8001978:	623b      	str	r3, [r7, #32]
 800197a:	462b      	mov	r3, r5
 800197c:	eb4b 0303 	adc.w	r3, fp, r3
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800198e:	4629      	mov	r1, r5
 8001990:	028b      	lsls	r3, r1, #10
 8001992:	4621      	mov	r1, r4
 8001994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001998:	4621      	mov	r1, r4
 800199a:	028a      	lsls	r2, r1, #10
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019a4:	2200      	movs	r2, #0
 80019a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80019a8:	677a      	str	r2, [r7, #116]	@ 0x74
 80019aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80019ae:	f7fe fc87 	bl	80002c0 <__aeabi_uldivmod>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4613      	mov	r3, r2
 80019b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019bc:	4b41      	ldr	r3, [pc, #260]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	3301      	adds	r3, #1
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80019ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019de:	e0eb      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e0:	4b38      	ldr	r3, [pc, #224]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ec:	4b35      	ldr	r3, [pc, #212]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d06b      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f8:	4b32      	ldr	r3, [pc, #200]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	099b      	lsrs	r3, r3, #6
 80019fe:	2200      	movs	r2, #0
 8001a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a10:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a14:	4622      	mov	r2, r4
 8001a16:	462b      	mov	r3, r5
 8001a18:	f04f 0000 	mov.w	r0, #0
 8001a1c:	f04f 0100 	mov.w	r1, #0
 8001a20:	0159      	lsls	r1, r3, #5
 8001a22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a26:	0150      	lsls	r0, r2, #5
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	1a51      	subs	r1, r2, r1
 8001a30:	61b9      	str	r1, [r7, #24]
 8001a32:	4629      	mov	r1, r5
 8001a34:	eb63 0301 	sbc.w	r3, r3, r1
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a46:	4659      	mov	r1, fp
 8001a48:	018b      	lsls	r3, r1, #6
 8001a4a:	4651      	mov	r1, sl
 8001a4c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a50:	4651      	mov	r1, sl
 8001a52:	018a      	lsls	r2, r1, #6
 8001a54:	4651      	mov	r1, sl
 8001a56:	ebb2 0801 	subs.w	r8, r2, r1
 8001a5a:	4659      	mov	r1, fp
 8001a5c:	eb63 0901 	sbc.w	r9, r3, r1
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a74:	4690      	mov	r8, r2
 8001a76:	4699      	mov	r9, r3
 8001a78:	4623      	mov	r3, r4
 8001a7a:	eb18 0303 	adds.w	r3, r8, r3
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	462b      	mov	r3, r5
 8001a82:	eb49 0303 	adc.w	r3, r9, r3
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a94:	4629      	mov	r1, r5
 8001a96:	024b      	lsls	r3, r1, #9
 8001a98:	4621      	mov	r1, r4
 8001a9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	024a      	lsls	r2, r1, #9
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001aaa:	2200      	movs	r2, #0
 8001aac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001aae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ab0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ab4:	f7fe fc04 	bl	80002c0 <__aeabi_uldivmod>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4613      	mov	r3, r2
 8001abe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ac2:	e065      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x420>
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	00f42400 	.word	0x00f42400
 8001acc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	099b      	lsrs	r3, r3, #6
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	4611      	mov	r1, r2
 8001adc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ae0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ae6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001aea:	4642      	mov	r2, r8
 8001aec:	464b      	mov	r3, r9
 8001aee:	f04f 0000 	mov.w	r0, #0
 8001af2:	f04f 0100 	mov.w	r1, #0
 8001af6:	0159      	lsls	r1, r3, #5
 8001af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afc:	0150      	lsls	r0, r2, #5
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4641      	mov	r1, r8
 8001b04:	1a51      	subs	r1, r2, r1
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	4649      	mov	r1, r9
 8001b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	018b      	lsls	r3, r1, #6
 8001b20:	4651      	mov	r1, sl
 8001b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b26:	4651      	mov	r1, sl
 8001b28:	018a      	lsls	r2, r1, #6
 8001b2a:	4651      	mov	r1, sl
 8001b2c:	1a54      	subs	r4, r2, r1
 8001b2e:	4659      	mov	r1, fp
 8001b30:	eb63 0501 	sbc.w	r5, r3, r1
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	00eb      	lsls	r3, r5, #3
 8001b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b42:	00e2      	lsls	r2, r4, #3
 8001b44:	4614      	mov	r4, r2
 8001b46:	461d      	mov	r5, r3
 8001b48:	4643      	mov	r3, r8
 8001b4a:	18e3      	adds	r3, r4, r3
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	464b      	mov	r3, r9
 8001b50:	eb45 0303 	adc.w	r3, r5, r3
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b62:	4629      	mov	r1, r5
 8001b64:	028b      	lsls	r3, r1, #10
 8001b66:	4621      	mov	r1, r4
 8001b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	028a      	lsls	r2, r1, #10
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b78:	2200      	movs	r2, #0
 8001b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b7c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b82:	f7fe fb9d 	bl	80002c0 <__aeabi_uldivmod>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b90:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	0f1b      	lsrs	r3, r3, #28
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ba2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bae:	e003      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	37b8      	adds	r7, #184	@ 0xb8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	00f42400 	.word	0x00f42400

08001bd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e28d      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8083 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bf0:	4b94      	ldr	r3, [pc, #592]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d019      	beq.n	8001c30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bfc:	4b91      	ldr	r3, [pc, #580]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c08:	4b8e      	ldr	r3, [pc, #568]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c14:	d00c      	beq.n	8001c30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c16:	4b8b      	ldr	r3, [pc, #556]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d112      	bne.n	8001c48 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c22:	4b88      	ldr	r3, [pc, #544]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c2e:	d10b      	bne.n	8001c48 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	4b84      	ldr	r3, [pc, #528]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d05b      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x124>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d157      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e25a      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c50:	d106      	bne.n	8001c60 <HAL_RCC_OscConfig+0x90>
 8001c52:	4b7c      	ldr	r3, [pc, #496]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a7b      	ldr	r2, [pc, #492]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e01d      	b.n	8001c9c <HAL_RCC_OscConfig+0xcc>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0xb4>
 8001c6a:	4b76      	ldr	r3, [pc, #472]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a75      	ldr	r2, [pc, #468]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b73      	ldr	r3, [pc, #460]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a72      	ldr	r2, [pc, #456]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e00b      	b.n	8001c9c <HAL_RCC_OscConfig+0xcc>
 8001c84:	4b6f      	ldr	r3, [pc, #444]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a6e      	ldr	r2, [pc, #440]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b6c      	ldr	r3, [pc, #432]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6b      	ldr	r2, [pc, #428]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001c96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d013      	beq.n	8001ccc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f95a 	bl	8000f5c <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff f956 	bl	8000f5c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	@ 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e21f      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	4b61      	ldr	r3, [pc, #388]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0xdc>
 8001cca:	e014      	b.n	8001cf6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f946 	bl	8000f5c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f942 	bl	8000f5c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	@ 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e20b      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	4b57      	ldr	r3, [pc, #348]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x104>
 8001cf2:	e000      	b.n	8001cf6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d06f      	beq.n	8001de2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d02:	4b50      	ldr	r3, [pc, #320]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d017      	beq.n	8001d3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d0e:	4b4d      	ldr	r3, [pc, #308]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d105      	bne.n	8001d26 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d26:	4b47      	ldr	r3, [pc, #284]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d11c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d32:	4b44      	ldr	r3, [pc, #272]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	4b41      	ldr	r3, [pc, #260]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x186>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e1d3      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b3b      	ldr	r3, [pc, #236]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4937      	ldr	r1, [pc, #220]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	e03a      	b.n	8001de2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b34      	ldr	r3, [pc, #208]	@ (8001e48 <HAL_RCC_OscConfig+0x278>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7ff f8ef 	bl	8000f5c <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d82:	f7ff f8eb 	bl	8000f5c <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1b4      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b28      	ldr	r3, [pc, #160]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4925      	ldr	r1, [pc, #148]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	e015      	b.n	8001de2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db6:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <HAL_RCC_OscConfig+0x278>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f8ce 	bl	8000f5c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7ff f8ca 	bl	8000f5c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e193      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d036      	beq.n	8001e5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d016      	beq.n	8001e24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <HAL_RCC_OscConfig+0x27c>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff f8ae 	bl	8000f5c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e04:	f7ff f8aa 	bl	8000f5c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e173      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <HAL_RCC_OscConfig+0x274>)
 8001e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x234>
 8001e22:	e01b      	b.n	8001e5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e24:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <HAL_RCC_OscConfig+0x27c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2a:	f7ff f897 	bl	8000f5c <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	e00e      	b.n	8001e50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e32:	f7ff f893 	bl	8000f5c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d907      	bls.n	8001e50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e15c      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
 8001e44:	40023800 	.word	0x40023800
 8001e48:	42470000 	.word	0x42470000
 8001e4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	4b8a      	ldr	r3, [pc, #552]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ea      	bne.n	8001e32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8097 	beq.w	8001f98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6e:	4b83      	ldr	r3, [pc, #524]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10f      	bne.n	8001e9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	4a7e      	ldr	r2, [pc, #504]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8a:	4b7c      	ldr	r3, [pc, #496]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e96:	2301      	movs	r3, #1
 8001e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9a:	4b79      	ldr	r3, [pc, #484]	@ (8002080 <HAL_RCC_OscConfig+0x4b0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d118      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea6:	4b76      	ldr	r3, [pc, #472]	@ (8002080 <HAL_RCC_OscConfig+0x4b0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a75      	ldr	r2, [pc, #468]	@ (8002080 <HAL_RCC_OscConfig+0x4b0>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff f853 	bl	8000f5c <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eba:	f7ff f84f 	bl	8000f5c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e118      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	4b6c      	ldr	r3, [pc, #432]	@ (8002080 <HAL_RCC_OscConfig+0x4b0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x31e>
 8001ee0:	4b66      	ldr	r3, [pc, #408]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee4:	4a65      	ldr	r2, [pc, #404]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eec:	e01c      	b.n	8001f28 <HAL_RCC_OscConfig+0x358>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x340>
 8001ef6:	4b61      	ldr	r3, [pc, #388]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efa:	4a60      	ldr	r2, [pc, #384]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f02:	4b5e      	ldr	r3, [pc, #376]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f06:	4a5d      	ldr	r2, [pc, #372]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0x358>
 8001f10:	4b5a      	ldr	r3, [pc, #360]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f14:	4a59      	ldr	r2, [pc, #356]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f1c:	4b57      	ldr	r3, [pc, #348]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f20:	4a56      	ldr	r2, [pc, #344]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001f22:	f023 0304 	bic.w	r3, r3, #4
 8001f26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d015      	beq.n	8001f5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f30:	f7ff f814 	bl	8000f5c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f38:	f7ff f810 	bl	8000f5c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e0d7      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0ee      	beq.n	8001f38 <HAL_RCC_OscConfig+0x368>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7fe fffe 	bl	8000f5c <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f64:	f7fe fffa 	bl	8000f5c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e0c1      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7a:	4b40      	ldr	r3, [pc, #256]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1ee      	bne.n	8001f64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	4a3a      	ldr	r2, [pc, #232]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80ad 	beq.w	80020fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fa2:	4b36      	ldr	r3, [pc, #216]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d060      	beq.n	8002070 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d145      	bne.n	8002042 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb6:	4b33      	ldr	r3, [pc, #204]	@ (8002084 <HAL_RCC_OscConfig+0x4b4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe ffce 	bl	8000f5c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7fe ffca 	bl	8000f5c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e093      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd6:	4b29      	ldr	r3, [pc, #164]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69da      	ldr	r2, [r3, #28]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	019b      	lsls	r3, r3, #6
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200c:	071b      	lsls	r3, r3, #28
 800200e:	491b      	ldr	r1, [pc, #108]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002014:	4b1b      	ldr	r3, [pc, #108]	@ (8002084 <HAL_RCC_OscConfig+0x4b4>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7fe ff9f 	bl	8000f5c <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002022:	f7fe ff9b 	bl	8000f5c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e064      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x452>
 8002040:	e05c      	b.n	80020fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <HAL_RCC_OscConfig+0x4b4>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7fe ff88 	bl	8000f5c <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002050:	f7fe ff84 	bl	8000f5c <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e04d      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002062:	4b06      	ldr	r3, [pc, #24]	@ (800207c <HAL_RCC_OscConfig+0x4ac>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x480>
 800206e:	e045      	b.n	80020fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d107      	bne.n	8002088 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e040      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
 800207c:	40023800 	.word	0x40023800
 8002080:	40007000 	.word	0x40007000
 8002084:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002088:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <HAL_RCC_OscConfig+0x538>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d030      	beq.n	80020f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d129      	bne.n	80020f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d122      	bne.n	80020f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d119      	bne.n	80020f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ce:	085b      	lsrs	r3, r3, #1
 80020d0:	3b01      	subs	r3, #1
 80020d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d10f      	bne.n	80020f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e042      	b.n	80021a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fd1a 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	@ 0x24
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800214e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fa09 	bl	8002568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	@ 0x28
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d175      	bne.n	80022b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_UART_Transmit+0x2c>
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e06e      	b.n	80022ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2221      	movs	r2, #33	@ 0x21
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ea:	f7fe feb7 	bl	8000f5c <HAL_GetTick>
 80021ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	88fa      	ldrh	r2, [r7, #6]
 80021f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	88fa      	ldrh	r2, [r7, #6]
 80021fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002204:	d108      	bne.n	8002218 <HAL_UART_Transmit+0x6c>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d104      	bne.n	8002218 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	e003      	b.n	8002220 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002220:	e02e      	b.n	8002280 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2200      	movs	r2, #0
 800222a:	2180      	movs	r1, #128	@ 0x80
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f8df 	bl	80023f0 <UART_WaitOnFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e03a      	b.n	80022ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10b      	bne.n	8002262 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002258:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	3302      	adds	r3, #2
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	e007      	b.n	8002272 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	3301      	adds	r3, #1
 8002270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002284:	b29b      	uxth	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1cb      	bne.n	8002222 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2200      	movs	r2, #0
 8002292:	2140      	movs	r1, #64	@ 0x40
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f8ab 	bl	80023f0 <UART_WaitOnFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e006      	b.n	80022ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e000      	b.n	80022ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b08a      	sub	sp, #40	@ 0x28
 80022c6:	af02      	add	r7, sp, #8
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b20      	cmp	r3, #32
 80022e0:	f040 8081 	bne.w	80023e6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_UART_Receive+0x2e>
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e079      	b.n	80023e8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2222      	movs	r2, #34	@ 0x22
 80022fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002308:	f7fe fe28 	bl	8000f5c <HAL_GetTick>
 800230c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	88fa      	ldrh	r2, [r7, #6]
 8002312:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	88fa      	ldrh	r2, [r7, #6]
 8002318:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002322:	d108      	bne.n	8002336 <HAL_UART_Receive+0x74>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	e003      	b.n	800233e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800233e:	e047      	b.n	80023d0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2200      	movs	r2, #0
 8002348:	2120      	movs	r1, #32
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f850 	bl	80023f0 <UART_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e042      	b.n	80023e8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10c      	bne.n	8002382 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	b29b      	uxth	r3, r3
 8002370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002374:	b29a      	uxth	r2, r3
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	3302      	adds	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	e01f      	b.n	80023c2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800238a:	d007      	beq.n	800239c <HAL_UART_Receive+0xda>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <HAL_UART_Receive+0xe8>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d106      	bne.n	80023aa <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e008      	b.n	80023bc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	3301      	adds	r3, #1
 80023c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1b2      	bne.n	8002340 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
  }
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002400:	e03b      	b.n	800247a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d037      	beq.n	800247a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240a:	f7fe fda7 	bl	8000f5c <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	6a3a      	ldr	r2, [r7, #32]
 8002416:	429a      	cmp	r2, r3
 8002418:	d302      	bcc.n	8002420 <UART_WaitOnFlagUntilTimeout+0x30>
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e03a      	b.n	800249a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d023      	beq.n	800247a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b80      	cmp	r3, #128	@ 0x80
 8002436:	d020      	beq.n	800247a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b40      	cmp	r3, #64	@ 0x40
 800243c:	d01d      	beq.n	800247a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d116      	bne.n	800247a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f81d 	bl	80024a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2208      	movs	r2, #8
 800246c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4013      	ands	r3, r2
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	429a      	cmp	r2, r3
 8002488:	bf0c      	ite	eq
 800248a:	2301      	moveq	r3, #1
 800248c:	2300      	movne	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	429a      	cmp	r2, r3
 8002496:	d0b4      	beq.n	8002402 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b095      	sub	sp, #84	@ 0x54
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	330c      	adds	r3, #12
 80024b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b4:	e853 3f00 	ldrex	r3, [r3]
 80024b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	330c      	adds	r3, #12
 80024c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80024cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024d2:	e841 2300 	strex	r3, r2, [r1]
 80024d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1e5      	bne.n	80024aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3314      	adds	r3, #20
 80024e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	e853 3f00 	ldrex	r3, [r3]
 80024ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3314      	adds	r3, #20
 80024fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002500:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002502:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002506:	e841 2300 	strex	r3, r2, [r1]
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1e5      	bne.n	80024de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	2b01      	cmp	r3, #1
 8002518:	d119      	bne.n	800254e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	330c      	adds	r3, #12
 8002520:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	60bb      	str	r3, [r7, #8]
   return(result);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f023 0310 	bic.w	r3, r3, #16
 8002530:	647b      	str	r3, [r7, #68]	@ 0x44
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800253a:	61ba      	str	r2, [r7, #24]
 800253c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253e:	6979      	ldr	r1, [r7, #20]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	e841 2300 	strex	r3, r2, [r1]
 8002546:	613b      	str	r3, [r7, #16]
   return(result);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e5      	bne.n	800251a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800255c:	bf00      	nop
 800255e:	3754      	adds	r7, #84	@ 0x54
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800256c:	b0c0      	sub	sp, #256	@ 0x100
 800256e:	af00      	add	r7, sp, #0
 8002570:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002584:	68d9      	ldr	r1, [r3, #12]
 8002586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	ea40 0301 	orr.w	r3, r0, r1
 8002590:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	431a      	orrs	r2, r3
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80025c0:	f021 010c 	bic.w	r1, r1, #12
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025ce:	430b      	orrs	r3, r1
 80025d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80025de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e2:	6999      	ldr	r1, [r3, #24]
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	ea40 0301 	orr.w	r3, r0, r1
 80025ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002834 <UART_SetConfig+0x2cc>)
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d005      	beq.n	8002608 <UART_SetConfig+0xa0>
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b8d      	ldr	r3, [pc, #564]	@ (8002838 <UART_SetConfig+0x2d0>)
 8002604:	429a      	cmp	r2, r3
 8002606:	d104      	bne.n	8002612 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002608:	f7ff f89e 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 800260c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002610:	e003      	b.n	800261a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002612:	f7ff f885 	bl	8001720 <HAL_RCC_GetPCLK1Freq>
 8002616:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800261a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002624:	f040 810c 	bne.w	8002840 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800262c:	2200      	movs	r2, #0
 800262e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002632:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002636:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800263a:	4622      	mov	r2, r4
 800263c:	462b      	mov	r3, r5
 800263e:	1891      	adds	r1, r2, r2
 8002640:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002642:	415b      	adcs	r3, r3
 8002644:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002646:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800264a:	4621      	mov	r1, r4
 800264c:	eb12 0801 	adds.w	r8, r2, r1
 8002650:	4629      	mov	r1, r5
 8002652:	eb43 0901 	adc.w	r9, r3, r1
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800266a:	4690      	mov	r8, r2
 800266c:	4699      	mov	r9, r3
 800266e:	4623      	mov	r3, r4
 8002670:	eb18 0303 	adds.w	r3, r8, r3
 8002674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002678:	462b      	mov	r3, r5
 800267a:	eb49 0303 	adc.w	r3, r9, r3
 800267e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800268e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002692:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002696:	460b      	mov	r3, r1
 8002698:	18db      	adds	r3, r3, r3
 800269a:	653b      	str	r3, [r7, #80]	@ 0x50
 800269c:	4613      	mov	r3, r2
 800269e:	eb42 0303 	adc.w	r3, r2, r3
 80026a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80026a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026ac:	f7fd fe08 	bl	80002c0 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4b61      	ldr	r3, [pc, #388]	@ (800283c <UART_SetConfig+0x2d4>)
 80026b6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	011c      	lsls	r4, r3, #4
 80026be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026c2:	2200      	movs	r2, #0
 80026c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026d0:	4642      	mov	r2, r8
 80026d2:	464b      	mov	r3, r9
 80026d4:	1891      	adds	r1, r2, r2
 80026d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80026d8:	415b      	adcs	r3, r3
 80026da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026e0:	4641      	mov	r1, r8
 80026e2:	eb12 0a01 	adds.w	sl, r2, r1
 80026e6:	4649      	mov	r1, r9
 80026e8:	eb43 0b01 	adc.w	fp, r3, r1
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002700:	4692      	mov	sl, r2
 8002702:	469b      	mov	fp, r3
 8002704:	4643      	mov	r3, r8
 8002706:	eb1a 0303 	adds.w	r3, sl, r3
 800270a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800270e:	464b      	mov	r3, r9
 8002710:	eb4b 0303 	adc.w	r3, fp, r3
 8002714:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002724:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002728:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800272c:	460b      	mov	r3, r1
 800272e:	18db      	adds	r3, r3, r3
 8002730:	643b      	str	r3, [r7, #64]	@ 0x40
 8002732:	4613      	mov	r3, r2
 8002734:	eb42 0303 	adc.w	r3, r2, r3
 8002738:	647b      	str	r3, [r7, #68]	@ 0x44
 800273a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800273e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002742:	f7fd fdbd 	bl	80002c0 <__aeabi_uldivmod>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4611      	mov	r1, r2
 800274c:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <UART_SetConfig+0x2d4>)
 800274e:	fba3 2301 	umull	r2, r3, r3, r1
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2264      	movs	r2, #100	@ 0x64
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	1acb      	subs	r3, r1, r3
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002762:	4b36      	ldr	r3, [pc, #216]	@ (800283c <UART_SetConfig+0x2d4>)
 8002764:	fba3 2302 	umull	r2, r3, r3, r2
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002770:	441c      	add	r4, r3
 8002772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002776:	2200      	movs	r2, #0
 8002778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800277c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002780:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002784:	4642      	mov	r2, r8
 8002786:	464b      	mov	r3, r9
 8002788:	1891      	adds	r1, r2, r2
 800278a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800278c:	415b      	adcs	r3, r3
 800278e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002794:	4641      	mov	r1, r8
 8002796:	1851      	adds	r1, r2, r1
 8002798:	6339      	str	r1, [r7, #48]	@ 0x30
 800279a:	4649      	mov	r1, r9
 800279c:	414b      	adcs	r3, r1
 800279e:	637b      	str	r3, [r7, #52]	@ 0x34
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027ac:	4659      	mov	r1, fp
 80027ae:	00cb      	lsls	r3, r1, #3
 80027b0:	4651      	mov	r1, sl
 80027b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b6:	4651      	mov	r1, sl
 80027b8:	00ca      	lsls	r2, r1, #3
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	4642      	mov	r2, r8
 80027c2:	189b      	adds	r3, r3, r2
 80027c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027c8:	464b      	mov	r3, r9
 80027ca:	460a      	mov	r2, r1
 80027cc:	eb42 0303 	adc.w	r3, r2, r3
 80027d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80027e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80027e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80027e8:	460b      	mov	r3, r1
 80027ea:	18db      	adds	r3, r3, r3
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ee:	4613      	mov	r3, r2
 80027f0:	eb42 0303 	adc.w	r3, r2, r3
 80027f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80027fe:	f7fd fd5f 	bl	80002c0 <__aeabi_uldivmod>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <UART_SetConfig+0x2d4>)
 8002808:	fba3 1302 	umull	r1, r3, r3, r2
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	2164      	movs	r1, #100	@ 0x64
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	3332      	adds	r3, #50	@ 0x32
 800281a:	4a08      	ldr	r2, [pc, #32]	@ (800283c <UART_SetConfig+0x2d4>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	f003 0207 	and.w	r2, r3, #7
 8002826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4422      	add	r2, r4
 800282e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002830:	e106      	b.n	8002a40 <UART_SetConfig+0x4d8>
 8002832:	bf00      	nop
 8002834:	40011000 	.word	0x40011000
 8002838:	40011400 	.word	0x40011400
 800283c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002844:	2200      	movs	r2, #0
 8002846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800284a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800284e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002852:	4642      	mov	r2, r8
 8002854:	464b      	mov	r3, r9
 8002856:	1891      	adds	r1, r2, r2
 8002858:	6239      	str	r1, [r7, #32]
 800285a:	415b      	adcs	r3, r3
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
 800285e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002862:	4641      	mov	r1, r8
 8002864:	1854      	adds	r4, r2, r1
 8002866:	4649      	mov	r1, r9
 8002868:	eb43 0501 	adc.w	r5, r3, r1
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	00eb      	lsls	r3, r5, #3
 8002876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800287a:	00e2      	lsls	r2, r4, #3
 800287c:	4614      	mov	r4, r2
 800287e:	461d      	mov	r5, r3
 8002880:	4643      	mov	r3, r8
 8002882:	18e3      	adds	r3, r4, r3
 8002884:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002888:	464b      	mov	r3, r9
 800288a:	eb45 0303 	adc.w	r3, r5, r3
 800288e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800289e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028ae:	4629      	mov	r1, r5
 80028b0:	008b      	lsls	r3, r1, #2
 80028b2:	4621      	mov	r1, r4
 80028b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028b8:	4621      	mov	r1, r4
 80028ba:	008a      	lsls	r2, r1, #2
 80028bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80028c0:	f7fd fcfe 	bl	80002c0 <__aeabi_uldivmod>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4b60      	ldr	r3, [pc, #384]	@ (8002a4c <UART_SetConfig+0x4e4>)
 80028ca:	fba3 2302 	umull	r2, r3, r3, r2
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	011c      	lsls	r4, r3, #4
 80028d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80028e4:	4642      	mov	r2, r8
 80028e6:	464b      	mov	r3, r9
 80028e8:	1891      	adds	r1, r2, r2
 80028ea:	61b9      	str	r1, [r7, #24]
 80028ec:	415b      	adcs	r3, r3
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f4:	4641      	mov	r1, r8
 80028f6:	1851      	adds	r1, r2, r1
 80028f8:	6139      	str	r1, [r7, #16]
 80028fa:	4649      	mov	r1, r9
 80028fc:	414b      	adcs	r3, r1
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800290c:	4659      	mov	r1, fp
 800290e:	00cb      	lsls	r3, r1, #3
 8002910:	4651      	mov	r1, sl
 8002912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002916:	4651      	mov	r1, sl
 8002918:	00ca      	lsls	r2, r1, #3
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	4603      	mov	r3, r0
 8002920:	4642      	mov	r2, r8
 8002922:	189b      	adds	r3, r3, r2
 8002924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002928:	464b      	mov	r3, r9
 800292a:	460a      	mov	r2, r1
 800292c:	eb42 0303 	adc.w	r3, r2, r3
 8002930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800293e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800294c:	4649      	mov	r1, r9
 800294e:	008b      	lsls	r3, r1, #2
 8002950:	4641      	mov	r1, r8
 8002952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002956:	4641      	mov	r1, r8
 8002958:	008a      	lsls	r2, r1, #2
 800295a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800295e:	f7fd fcaf 	bl	80002c0 <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4611      	mov	r1, r2
 8002968:	4b38      	ldr	r3, [pc, #224]	@ (8002a4c <UART_SetConfig+0x4e4>)
 800296a:	fba3 2301 	umull	r2, r3, r3, r1
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2264      	movs	r2, #100	@ 0x64
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	1acb      	subs	r3, r1, r3
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	3332      	adds	r3, #50	@ 0x32
 800297c:	4a33      	ldr	r2, [pc, #204]	@ (8002a4c <UART_SetConfig+0x4e4>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002988:	441c      	add	r4, r3
 800298a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800298e:	2200      	movs	r2, #0
 8002990:	673b      	str	r3, [r7, #112]	@ 0x70
 8002992:	677a      	str	r2, [r7, #116]	@ 0x74
 8002994:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002998:	4642      	mov	r2, r8
 800299a:	464b      	mov	r3, r9
 800299c:	1891      	adds	r1, r2, r2
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	415b      	adcs	r3, r3
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a8:	4641      	mov	r1, r8
 80029aa:	1851      	adds	r1, r2, r1
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	4649      	mov	r1, r9
 80029b0:	414b      	adcs	r3, r1
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029c0:	4659      	mov	r1, fp
 80029c2:	00cb      	lsls	r3, r1, #3
 80029c4:	4651      	mov	r1, sl
 80029c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ca:	4651      	mov	r1, sl
 80029cc:	00ca      	lsls	r2, r1, #3
 80029ce:	4610      	mov	r0, r2
 80029d0:	4619      	mov	r1, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	4642      	mov	r2, r8
 80029d6:	189b      	adds	r3, r3, r2
 80029d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029da:	464b      	mov	r3, r9
 80029dc:	460a      	mov	r2, r1
 80029de:	eb42 0303 	adc.w	r3, r2, r3
 80029e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80029ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80029fc:	4649      	mov	r1, r9
 80029fe:	008b      	lsls	r3, r1, #2
 8002a00:	4641      	mov	r1, r8
 8002a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a06:	4641      	mov	r1, r8
 8002a08:	008a      	lsls	r2, r1, #2
 8002a0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a0e:	f7fd fc57 	bl	80002c0 <__aeabi_uldivmod>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <UART_SetConfig+0x4e4>)
 8002a18:	fba3 1302 	umull	r1, r3, r3, r2
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	2164      	movs	r1, #100	@ 0x64
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	3332      	adds	r3, #50	@ 0x32
 8002a2a:	4a08      	ldr	r2, [pc, #32]	@ (8002a4c <UART_SetConfig+0x4e4>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	f003 020f 	and.w	r2, r3, #15
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4422      	add	r2, r4
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	bf00      	nop
 8002a42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a46:	46bd      	mov	sp, r7
 8002a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4c:	51eb851f 	.word	0x51eb851f

08002a50 <atoi>:
 8002a50:	220a      	movs	r2, #10
 8002a52:	2100      	movs	r1, #0
 8002a54:	f000 b87a 	b.w	8002b4c <strtol>

08002a58 <_strtol_l.constprop.0>:
 8002a58:	2b24      	cmp	r3, #36	@ 0x24
 8002a5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a5e:	4686      	mov	lr, r0
 8002a60:	4690      	mov	r8, r2
 8002a62:	d801      	bhi.n	8002a68 <_strtol_l.constprop.0+0x10>
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d106      	bne.n	8002a76 <_strtol_l.constprop.0+0x1e>
 8002a68:	f000 fb74 	bl	8003154 <__errno>
 8002a6c:	2316      	movs	r3, #22
 8002a6e:	6003      	str	r3, [r0, #0]
 8002a70:	2000      	movs	r0, #0
 8002a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a76:	4834      	ldr	r0, [pc, #208]	@ (8002b48 <_strtol_l.constprop.0+0xf0>)
 8002a78:	460d      	mov	r5, r1
 8002a7a:	462a      	mov	r2, r5
 8002a7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002a80:	5d06      	ldrb	r6, [r0, r4]
 8002a82:	f016 0608 	ands.w	r6, r6, #8
 8002a86:	d1f8      	bne.n	8002a7a <_strtol_l.constprop.0+0x22>
 8002a88:	2c2d      	cmp	r4, #45	@ 0x2d
 8002a8a:	d12d      	bne.n	8002ae8 <_strtol_l.constprop.0+0x90>
 8002a8c:	782c      	ldrb	r4, [r5, #0]
 8002a8e:	2601      	movs	r6, #1
 8002a90:	1c95      	adds	r5, r2, #2
 8002a92:	f033 0210 	bics.w	r2, r3, #16
 8002a96:	d109      	bne.n	8002aac <_strtol_l.constprop.0+0x54>
 8002a98:	2c30      	cmp	r4, #48	@ 0x30
 8002a9a:	d12a      	bne.n	8002af2 <_strtol_l.constprop.0+0x9a>
 8002a9c:	782a      	ldrb	r2, [r5, #0]
 8002a9e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8002aa2:	2a58      	cmp	r2, #88	@ 0x58
 8002aa4:	d125      	bne.n	8002af2 <_strtol_l.constprop.0+0x9a>
 8002aa6:	786c      	ldrb	r4, [r5, #1]
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	3502      	adds	r5, #2
 8002aac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8002ab0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	fbbc f9f3 	udiv	r9, ip, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	fb03 ca19 	mls	sl, r3, r9, ip
 8002ac0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8002ac4:	2f09      	cmp	r7, #9
 8002ac6:	d81b      	bhi.n	8002b00 <_strtol_l.constprop.0+0xa8>
 8002ac8:	463c      	mov	r4, r7
 8002aca:	42a3      	cmp	r3, r4
 8002acc:	dd27      	ble.n	8002b1e <_strtol_l.constprop.0+0xc6>
 8002ace:	1c57      	adds	r7, r2, #1
 8002ad0:	d007      	beq.n	8002ae2 <_strtol_l.constprop.0+0x8a>
 8002ad2:	4581      	cmp	r9, r0
 8002ad4:	d320      	bcc.n	8002b18 <_strtol_l.constprop.0+0xc0>
 8002ad6:	d101      	bne.n	8002adc <_strtol_l.constprop.0+0x84>
 8002ad8:	45a2      	cmp	sl, r4
 8002ada:	db1d      	blt.n	8002b18 <_strtol_l.constprop.0+0xc0>
 8002adc:	fb00 4003 	mla	r0, r0, r3, r4
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002ae6:	e7eb      	b.n	8002ac0 <_strtol_l.constprop.0+0x68>
 8002ae8:	2c2b      	cmp	r4, #43	@ 0x2b
 8002aea:	bf04      	itt	eq
 8002aec:	782c      	ldrbeq	r4, [r5, #0]
 8002aee:	1c95      	addeq	r5, r2, #2
 8002af0:	e7cf      	b.n	8002a92 <_strtol_l.constprop.0+0x3a>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1da      	bne.n	8002aac <_strtol_l.constprop.0+0x54>
 8002af6:	2c30      	cmp	r4, #48	@ 0x30
 8002af8:	bf0c      	ite	eq
 8002afa:	2308      	moveq	r3, #8
 8002afc:	230a      	movne	r3, #10
 8002afe:	e7d5      	b.n	8002aac <_strtol_l.constprop.0+0x54>
 8002b00:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8002b04:	2f19      	cmp	r7, #25
 8002b06:	d801      	bhi.n	8002b0c <_strtol_l.constprop.0+0xb4>
 8002b08:	3c37      	subs	r4, #55	@ 0x37
 8002b0a:	e7de      	b.n	8002aca <_strtol_l.constprop.0+0x72>
 8002b0c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8002b10:	2f19      	cmp	r7, #25
 8002b12:	d804      	bhi.n	8002b1e <_strtol_l.constprop.0+0xc6>
 8002b14:	3c57      	subs	r4, #87	@ 0x57
 8002b16:	e7d8      	b.n	8002aca <_strtol_l.constprop.0+0x72>
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1c:	e7e1      	b.n	8002ae2 <_strtol_l.constprop.0+0x8a>
 8002b1e:	1c53      	adds	r3, r2, #1
 8002b20:	d108      	bne.n	8002b34 <_strtol_l.constprop.0+0xdc>
 8002b22:	2322      	movs	r3, #34	@ 0x22
 8002b24:	f8ce 3000 	str.w	r3, [lr]
 8002b28:	4660      	mov	r0, ip
 8002b2a:	f1b8 0f00 	cmp.w	r8, #0
 8002b2e:	d0a0      	beq.n	8002a72 <_strtol_l.constprop.0+0x1a>
 8002b30:	1e69      	subs	r1, r5, #1
 8002b32:	e006      	b.n	8002b42 <_strtol_l.constprop.0+0xea>
 8002b34:	b106      	cbz	r6, 8002b38 <_strtol_l.constprop.0+0xe0>
 8002b36:	4240      	negs	r0, r0
 8002b38:	f1b8 0f00 	cmp.w	r8, #0
 8002b3c:	d099      	beq.n	8002a72 <_strtol_l.constprop.0+0x1a>
 8002b3e:	2a00      	cmp	r2, #0
 8002b40:	d1f6      	bne.n	8002b30 <_strtol_l.constprop.0+0xd8>
 8002b42:	f8c8 1000 	str.w	r1, [r8]
 8002b46:	e794      	b.n	8002a72 <_strtol_l.constprop.0+0x1a>
 8002b48:	08004101 	.word	0x08004101

08002b4c <strtol>:
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	460a      	mov	r2, r1
 8002b50:	4601      	mov	r1, r0
 8002b52:	4802      	ldr	r0, [pc, #8]	@ (8002b5c <strtol+0x10>)
 8002b54:	6800      	ldr	r0, [r0, #0]
 8002b56:	f7ff bf7f 	b.w	8002a58 <_strtol_l.constprop.0>
 8002b5a:	bf00      	nop
 8002b5c:	20000018 	.word	0x20000018

08002b60 <std>:
 8002b60:	2300      	movs	r3, #0
 8002b62:	b510      	push	{r4, lr}
 8002b64:	4604      	mov	r4, r0
 8002b66:	e9c0 3300 	strd	r3, r3, [r0]
 8002b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b6e:	6083      	str	r3, [r0, #8]
 8002b70:	8181      	strh	r1, [r0, #12]
 8002b72:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b74:	81c2      	strh	r2, [r0, #14]
 8002b76:	6183      	str	r3, [r0, #24]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	305c      	adds	r0, #92	@ 0x5c
 8002b7e:	f000 fa2d 	bl	8002fdc <memset>
 8002b82:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb8 <std+0x58>)
 8002b84:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b86:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <std+0x5c>)
 8002b88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <std+0x60>)
 8002b8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <std+0x64>)
 8002b90:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <std+0x68>)
 8002b94:	6224      	str	r4, [r4, #32]
 8002b96:	429c      	cmp	r4, r3
 8002b98:	d006      	beq.n	8002ba8 <std+0x48>
 8002b9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b9e:	4294      	cmp	r4, r2
 8002ba0:	d002      	beq.n	8002ba8 <std+0x48>
 8002ba2:	33d0      	adds	r3, #208	@ 0xd0
 8002ba4:	429c      	cmp	r4, r3
 8002ba6:	d105      	bne.n	8002bb4 <std+0x54>
 8002ba8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bb0:	f000 bafa 	b.w	80031a8 <__retarget_lock_init_recursive>
 8002bb4:	bd10      	pop	{r4, pc}
 8002bb6:	bf00      	nop
 8002bb8:	08002e2d 	.word	0x08002e2d
 8002bbc:	08002e4f 	.word	0x08002e4f
 8002bc0:	08002e87 	.word	0x08002e87
 8002bc4:	08002eab 	.word	0x08002eab
 8002bc8:	2000051c 	.word	0x2000051c

08002bcc <stdio_exit_handler>:
 8002bcc:	4a02      	ldr	r2, [pc, #8]	@ (8002bd8 <stdio_exit_handler+0xc>)
 8002bce:	4903      	ldr	r1, [pc, #12]	@ (8002bdc <stdio_exit_handler+0x10>)
 8002bd0:	4803      	ldr	r0, [pc, #12]	@ (8002be0 <stdio_exit_handler+0x14>)
 8002bd2:	f000 b869 	b.w	8002ca8 <_fwalk_sglue>
 8002bd6:	bf00      	nop
 8002bd8:	2000000c 	.word	0x2000000c
 8002bdc:	08003d55 	.word	0x08003d55
 8002be0:	2000001c 	.word	0x2000001c

08002be4 <cleanup_stdio>:
 8002be4:	6841      	ldr	r1, [r0, #4]
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <cleanup_stdio+0x34>)
 8002be8:	4299      	cmp	r1, r3
 8002bea:	b510      	push	{r4, lr}
 8002bec:	4604      	mov	r4, r0
 8002bee:	d001      	beq.n	8002bf4 <cleanup_stdio+0x10>
 8002bf0:	f001 f8b0 	bl	8003d54 <_fflush_r>
 8002bf4:	68a1      	ldr	r1, [r4, #8]
 8002bf6:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <cleanup_stdio+0x38>)
 8002bf8:	4299      	cmp	r1, r3
 8002bfa:	d002      	beq.n	8002c02 <cleanup_stdio+0x1e>
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f001 f8a9 	bl	8003d54 <_fflush_r>
 8002c02:	68e1      	ldr	r1, [r4, #12]
 8002c04:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <cleanup_stdio+0x3c>)
 8002c06:	4299      	cmp	r1, r3
 8002c08:	d004      	beq.n	8002c14 <cleanup_stdio+0x30>
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c10:	f001 b8a0 	b.w	8003d54 <_fflush_r>
 8002c14:	bd10      	pop	{r4, pc}
 8002c16:	bf00      	nop
 8002c18:	2000051c 	.word	0x2000051c
 8002c1c:	20000584 	.word	0x20000584
 8002c20:	200005ec 	.word	0x200005ec

08002c24 <global_stdio_init.part.0>:
 8002c24:	b510      	push	{r4, lr}
 8002c26:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <global_stdio_init.part.0+0x30>)
 8002c28:	4c0b      	ldr	r4, [pc, #44]	@ (8002c58 <global_stdio_init.part.0+0x34>)
 8002c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c5c <global_stdio_init.part.0+0x38>)
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	4620      	mov	r0, r4
 8002c30:	2200      	movs	r2, #0
 8002c32:	2104      	movs	r1, #4
 8002c34:	f7ff ff94 	bl	8002b60 <std>
 8002c38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	2109      	movs	r1, #9
 8002c40:	f7ff ff8e 	bl	8002b60 <std>
 8002c44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c48:	2202      	movs	r2, #2
 8002c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c4e:	2112      	movs	r1, #18
 8002c50:	f7ff bf86 	b.w	8002b60 <std>
 8002c54:	20000654 	.word	0x20000654
 8002c58:	2000051c 	.word	0x2000051c
 8002c5c:	08002bcd 	.word	0x08002bcd

08002c60 <__sfp_lock_acquire>:
 8002c60:	4801      	ldr	r0, [pc, #4]	@ (8002c68 <__sfp_lock_acquire+0x8>)
 8002c62:	f000 baa2 	b.w	80031aa <__retarget_lock_acquire_recursive>
 8002c66:	bf00      	nop
 8002c68:	2000065d 	.word	0x2000065d

08002c6c <__sfp_lock_release>:
 8002c6c:	4801      	ldr	r0, [pc, #4]	@ (8002c74 <__sfp_lock_release+0x8>)
 8002c6e:	f000 ba9d 	b.w	80031ac <__retarget_lock_release_recursive>
 8002c72:	bf00      	nop
 8002c74:	2000065d 	.word	0x2000065d

08002c78 <__sinit>:
 8002c78:	b510      	push	{r4, lr}
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	f7ff fff0 	bl	8002c60 <__sfp_lock_acquire>
 8002c80:	6a23      	ldr	r3, [r4, #32]
 8002c82:	b11b      	cbz	r3, 8002c8c <__sinit+0x14>
 8002c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c88:	f7ff bff0 	b.w	8002c6c <__sfp_lock_release>
 8002c8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <__sinit+0x28>)
 8002c8e:	6223      	str	r3, [r4, #32]
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <__sinit+0x2c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f5      	bne.n	8002c84 <__sinit+0xc>
 8002c98:	f7ff ffc4 	bl	8002c24 <global_stdio_init.part.0>
 8002c9c:	e7f2      	b.n	8002c84 <__sinit+0xc>
 8002c9e:	bf00      	nop
 8002ca0:	08002be5 	.word	0x08002be5
 8002ca4:	20000654 	.word	0x20000654

08002ca8 <_fwalk_sglue>:
 8002ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cac:	4607      	mov	r7, r0
 8002cae:	4688      	mov	r8, r1
 8002cb0:	4614      	mov	r4, r2
 8002cb2:	2600      	movs	r6, #0
 8002cb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cb8:	f1b9 0901 	subs.w	r9, r9, #1
 8002cbc:	d505      	bpl.n	8002cca <_fwalk_sglue+0x22>
 8002cbe:	6824      	ldr	r4, [r4, #0]
 8002cc0:	2c00      	cmp	r4, #0
 8002cc2:	d1f7      	bne.n	8002cb4 <_fwalk_sglue+0xc>
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cca:	89ab      	ldrh	r3, [r5, #12]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d907      	bls.n	8002ce0 <_fwalk_sglue+0x38>
 8002cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	d003      	beq.n	8002ce0 <_fwalk_sglue+0x38>
 8002cd8:	4629      	mov	r1, r5
 8002cda:	4638      	mov	r0, r7
 8002cdc:	47c0      	blx	r8
 8002cde:	4306      	orrs	r6, r0
 8002ce0:	3568      	adds	r5, #104	@ 0x68
 8002ce2:	e7e9      	b.n	8002cb8 <_fwalk_sglue+0x10>

08002ce4 <iprintf>:
 8002ce4:	b40f      	push	{r0, r1, r2, r3}
 8002ce6:	b507      	push	{r0, r1, r2, lr}
 8002ce8:	4906      	ldr	r1, [pc, #24]	@ (8002d04 <iprintf+0x20>)
 8002cea:	ab04      	add	r3, sp, #16
 8002cec:	6808      	ldr	r0, [r1, #0]
 8002cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cf2:	6881      	ldr	r1, [r0, #8]
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	f000 fd03 	bl	8003700 <_vfiprintf_r>
 8002cfa:	b003      	add	sp, #12
 8002cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d00:	b004      	add	sp, #16
 8002d02:	4770      	bx	lr
 8002d04:	20000018 	.word	0x20000018

08002d08 <_puts_r>:
 8002d08:	6a03      	ldr	r3, [r0, #32]
 8002d0a:	b570      	push	{r4, r5, r6, lr}
 8002d0c:	6884      	ldr	r4, [r0, #8]
 8002d0e:	4605      	mov	r5, r0
 8002d10:	460e      	mov	r6, r1
 8002d12:	b90b      	cbnz	r3, 8002d18 <_puts_r+0x10>
 8002d14:	f7ff ffb0 	bl	8002c78 <__sinit>
 8002d18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d1a:	07db      	lsls	r3, r3, #31
 8002d1c:	d405      	bmi.n	8002d2a <_puts_r+0x22>
 8002d1e:	89a3      	ldrh	r3, [r4, #12]
 8002d20:	0598      	lsls	r0, r3, #22
 8002d22:	d402      	bmi.n	8002d2a <_puts_r+0x22>
 8002d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d26:	f000 fa40 	bl	80031aa <__retarget_lock_acquire_recursive>
 8002d2a:	89a3      	ldrh	r3, [r4, #12]
 8002d2c:	0719      	lsls	r1, r3, #28
 8002d2e:	d502      	bpl.n	8002d36 <_puts_r+0x2e>
 8002d30:	6923      	ldr	r3, [r4, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d135      	bne.n	8002da2 <_puts_r+0x9a>
 8002d36:	4621      	mov	r1, r4
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f000 f8f9 	bl	8002f30 <__swsetup_r>
 8002d3e:	b380      	cbz	r0, 8002da2 <_puts_r+0x9a>
 8002d40:	f04f 35ff 	mov.w	r5, #4294967295
 8002d44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d46:	07da      	lsls	r2, r3, #31
 8002d48:	d405      	bmi.n	8002d56 <_puts_r+0x4e>
 8002d4a:	89a3      	ldrh	r3, [r4, #12]
 8002d4c:	059b      	lsls	r3, r3, #22
 8002d4e:	d402      	bmi.n	8002d56 <_puts_r+0x4e>
 8002d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d52:	f000 fa2b 	bl	80031ac <__retarget_lock_release_recursive>
 8002d56:	4628      	mov	r0, r5
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	da04      	bge.n	8002d68 <_puts_r+0x60>
 8002d5e:	69a2      	ldr	r2, [r4, #24]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	dc17      	bgt.n	8002d94 <_puts_r+0x8c>
 8002d64:	290a      	cmp	r1, #10
 8002d66:	d015      	beq.n	8002d94 <_puts_r+0x8c>
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	6022      	str	r2, [r4, #0]
 8002d6e:	7019      	strb	r1, [r3, #0]
 8002d70:	68a3      	ldr	r3, [r4, #8]
 8002d72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d76:	3b01      	subs	r3, #1
 8002d78:	60a3      	str	r3, [r4, #8]
 8002d7a:	2900      	cmp	r1, #0
 8002d7c:	d1ed      	bne.n	8002d5a <_puts_r+0x52>
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da11      	bge.n	8002da6 <_puts_r+0x9e>
 8002d82:	4622      	mov	r2, r4
 8002d84:	210a      	movs	r1, #10
 8002d86:	4628      	mov	r0, r5
 8002d88:	f000 f893 	bl	8002eb2 <__swbuf_r>
 8002d8c:	3001      	adds	r0, #1
 8002d8e:	d0d7      	beq.n	8002d40 <_puts_r+0x38>
 8002d90:	250a      	movs	r5, #10
 8002d92:	e7d7      	b.n	8002d44 <_puts_r+0x3c>
 8002d94:	4622      	mov	r2, r4
 8002d96:	4628      	mov	r0, r5
 8002d98:	f000 f88b 	bl	8002eb2 <__swbuf_r>
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	d1e7      	bne.n	8002d70 <_puts_r+0x68>
 8002da0:	e7ce      	b.n	8002d40 <_puts_r+0x38>
 8002da2:	3e01      	subs	r6, #1
 8002da4:	e7e4      	b.n	8002d70 <_puts_r+0x68>
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	6022      	str	r2, [r4, #0]
 8002dac:	220a      	movs	r2, #10
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e7ee      	b.n	8002d90 <_puts_r+0x88>
	...

08002db4 <puts>:
 8002db4:	4b02      	ldr	r3, [pc, #8]	@ (8002dc0 <puts+0xc>)
 8002db6:	4601      	mov	r1, r0
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	f7ff bfa5 	b.w	8002d08 <_puts_r>
 8002dbe:	bf00      	nop
 8002dc0:	20000018 	.word	0x20000018

08002dc4 <sniprintf>:
 8002dc4:	b40c      	push	{r2, r3}
 8002dc6:	b530      	push	{r4, r5, lr}
 8002dc8:	4b17      	ldr	r3, [pc, #92]	@ (8002e28 <sniprintf+0x64>)
 8002dca:	1e0c      	subs	r4, r1, #0
 8002dcc:	681d      	ldr	r5, [r3, #0]
 8002dce:	b09d      	sub	sp, #116	@ 0x74
 8002dd0:	da08      	bge.n	8002de4 <sniprintf+0x20>
 8002dd2:	238b      	movs	r3, #139	@ 0x8b
 8002dd4:	602b      	str	r3, [r5, #0]
 8002dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dda:	b01d      	add	sp, #116	@ 0x74
 8002ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002de0:	b002      	add	sp, #8
 8002de2:	4770      	bx	lr
 8002de4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002de8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002dec:	bf14      	ite	ne
 8002dee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002df2:	4623      	moveq	r3, r4
 8002df4:	9304      	str	r3, [sp, #16]
 8002df6:	9307      	str	r3, [sp, #28]
 8002df8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dfc:	9002      	str	r0, [sp, #8]
 8002dfe:	9006      	str	r0, [sp, #24]
 8002e00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002e04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002e06:	ab21      	add	r3, sp, #132	@ 0x84
 8002e08:	a902      	add	r1, sp, #8
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	f000 fb51 	bl	80034b4 <_svfiprintf_r>
 8002e12:	1c43      	adds	r3, r0, #1
 8002e14:	bfbc      	itt	lt
 8002e16:	238b      	movlt	r3, #139	@ 0x8b
 8002e18:	602b      	strlt	r3, [r5, #0]
 8002e1a:	2c00      	cmp	r4, #0
 8002e1c:	d0dd      	beq.n	8002dda <sniprintf+0x16>
 8002e1e:	9b02      	ldr	r3, [sp, #8]
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	e7d9      	b.n	8002dda <sniprintf+0x16>
 8002e26:	bf00      	nop
 8002e28:	20000018 	.word	0x20000018

08002e2c <__sread>:
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	460c      	mov	r4, r1
 8002e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e34:	f000 f96a 	bl	800310c <_read_r>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	bfab      	itete	ge
 8002e3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8002e40:	181b      	addge	r3, r3, r0
 8002e42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e46:	bfac      	ite	ge
 8002e48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e4a:	81a3      	strhlt	r3, [r4, #12]
 8002e4c:	bd10      	pop	{r4, pc}

08002e4e <__swrite>:
 8002e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e52:	461f      	mov	r7, r3
 8002e54:	898b      	ldrh	r3, [r1, #12]
 8002e56:	05db      	lsls	r3, r3, #23
 8002e58:	4605      	mov	r5, r0
 8002e5a:	460c      	mov	r4, r1
 8002e5c:	4616      	mov	r6, r2
 8002e5e:	d505      	bpl.n	8002e6c <__swrite+0x1e>
 8002e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e64:	2302      	movs	r3, #2
 8002e66:	2200      	movs	r2, #0
 8002e68:	f000 f93e 	bl	80030e8 <_lseek_r>
 8002e6c:	89a3      	ldrh	r3, [r4, #12]
 8002e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e76:	81a3      	strh	r3, [r4, #12]
 8002e78:	4632      	mov	r2, r6
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e82:	f000 b955 	b.w	8003130 <_write_r>

08002e86 <__sseek>:
 8002e86:	b510      	push	{r4, lr}
 8002e88:	460c      	mov	r4, r1
 8002e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e8e:	f000 f92b 	bl	80030e8 <_lseek_r>
 8002e92:	1c43      	adds	r3, r0, #1
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	bf15      	itete	ne
 8002e98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002ea2:	81a3      	strheq	r3, [r4, #12]
 8002ea4:	bf18      	it	ne
 8002ea6:	81a3      	strhne	r3, [r4, #12]
 8002ea8:	bd10      	pop	{r4, pc}

08002eaa <__sclose>:
 8002eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eae:	f000 b90b 	b.w	80030c8 <_close_r>

08002eb2 <__swbuf_r>:
 8002eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb4:	460e      	mov	r6, r1
 8002eb6:	4614      	mov	r4, r2
 8002eb8:	4605      	mov	r5, r0
 8002eba:	b118      	cbz	r0, 8002ec4 <__swbuf_r+0x12>
 8002ebc:	6a03      	ldr	r3, [r0, #32]
 8002ebe:	b90b      	cbnz	r3, 8002ec4 <__swbuf_r+0x12>
 8002ec0:	f7ff feda 	bl	8002c78 <__sinit>
 8002ec4:	69a3      	ldr	r3, [r4, #24]
 8002ec6:	60a3      	str	r3, [r4, #8]
 8002ec8:	89a3      	ldrh	r3, [r4, #12]
 8002eca:	071a      	lsls	r2, r3, #28
 8002ecc:	d501      	bpl.n	8002ed2 <__swbuf_r+0x20>
 8002ece:	6923      	ldr	r3, [r4, #16]
 8002ed0:	b943      	cbnz	r3, 8002ee4 <__swbuf_r+0x32>
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	f000 f82b 	bl	8002f30 <__swsetup_r>
 8002eda:	b118      	cbz	r0, 8002ee4 <__swbuf_r+0x32>
 8002edc:	f04f 37ff 	mov.w	r7, #4294967295
 8002ee0:	4638      	mov	r0, r7
 8002ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	6922      	ldr	r2, [r4, #16]
 8002ee8:	1a98      	subs	r0, r3, r2
 8002eea:	6963      	ldr	r3, [r4, #20]
 8002eec:	b2f6      	uxtb	r6, r6
 8002eee:	4283      	cmp	r3, r0
 8002ef0:	4637      	mov	r7, r6
 8002ef2:	dc05      	bgt.n	8002f00 <__swbuf_r+0x4e>
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	f000 ff2c 	bl	8003d54 <_fflush_r>
 8002efc:	2800      	cmp	r0, #0
 8002efe:	d1ed      	bne.n	8002edc <__swbuf_r+0x2a>
 8002f00:	68a3      	ldr	r3, [r4, #8]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	60a3      	str	r3, [r4, #8]
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	6022      	str	r2, [r4, #0]
 8002f0c:	701e      	strb	r6, [r3, #0]
 8002f0e:	6962      	ldr	r2, [r4, #20]
 8002f10:	1c43      	adds	r3, r0, #1
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d004      	beq.n	8002f20 <__swbuf_r+0x6e>
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	07db      	lsls	r3, r3, #31
 8002f1a:	d5e1      	bpl.n	8002ee0 <__swbuf_r+0x2e>
 8002f1c:	2e0a      	cmp	r6, #10
 8002f1e:	d1df      	bne.n	8002ee0 <__swbuf_r+0x2e>
 8002f20:	4621      	mov	r1, r4
 8002f22:	4628      	mov	r0, r5
 8002f24:	f000 ff16 	bl	8003d54 <_fflush_r>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d0d9      	beq.n	8002ee0 <__swbuf_r+0x2e>
 8002f2c:	e7d6      	b.n	8002edc <__swbuf_r+0x2a>
	...

08002f30 <__swsetup_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	4b29      	ldr	r3, [pc, #164]	@ (8002fd8 <__swsetup_r+0xa8>)
 8002f34:	4605      	mov	r5, r0
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	460c      	mov	r4, r1
 8002f3a:	b118      	cbz	r0, 8002f44 <__swsetup_r+0x14>
 8002f3c:	6a03      	ldr	r3, [r0, #32]
 8002f3e:	b90b      	cbnz	r3, 8002f44 <__swsetup_r+0x14>
 8002f40:	f7ff fe9a 	bl	8002c78 <__sinit>
 8002f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f48:	0719      	lsls	r1, r3, #28
 8002f4a:	d422      	bmi.n	8002f92 <__swsetup_r+0x62>
 8002f4c:	06da      	lsls	r2, r3, #27
 8002f4e:	d407      	bmi.n	8002f60 <__swsetup_r+0x30>
 8002f50:	2209      	movs	r2, #9
 8002f52:	602a      	str	r2, [r5, #0]
 8002f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f58:	81a3      	strh	r3, [r4, #12]
 8002f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5e:	e033      	b.n	8002fc8 <__swsetup_r+0x98>
 8002f60:	0758      	lsls	r0, r3, #29
 8002f62:	d512      	bpl.n	8002f8a <__swsetup_r+0x5a>
 8002f64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f66:	b141      	cbz	r1, 8002f7a <__swsetup_r+0x4a>
 8002f68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f6c:	4299      	cmp	r1, r3
 8002f6e:	d002      	beq.n	8002f76 <__swsetup_r+0x46>
 8002f70:	4628      	mov	r0, r5
 8002f72:	f000 f943 	bl	80031fc <_free_r>
 8002f76:	2300      	movs	r3, #0
 8002f78:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f7a:	89a3      	ldrh	r3, [r4, #12]
 8002f7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f80:	81a3      	strh	r3, [r4, #12]
 8002f82:	2300      	movs	r3, #0
 8002f84:	6063      	str	r3, [r4, #4]
 8002f86:	6923      	ldr	r3, [r4, #16]
 8002f88:	6023      	str	r3, [r4, #0]
 8002f8a:	89a3      	ldrh	r3, [r4, #12]
 8002f8c:	f043 0308 	orr.w	r3, r3, #8
 8002f90:	81a3      	strh	r3, [r4, #12]
 8002f92:	6923      	ldr	r3, [r4, #16]
 8002f94:	b94b      	cbnz	r3, 8002faa <__swsetup_r+0x7a>
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa0:	d003      	beq.n	8002faa <__swsetup_r+0x7a>
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f000 ff35 	bl	8003e14 <__smakebuf_r>
 8002faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fae:	f013 0201 	ands.w	r2, r3, #1
 8002fb2:	d00a      	beq.n	8002fca <__swsetup_r+0x9a>
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	60a2      	str	r2, [r4, #8]
 8002fb8:	6962      	ldr	r2, [r4, #20]
 8002fba:	4252      	negs	r2, r2
 8002fbc:	61a2      	str	r2, [r4, #24]
 8002fbe:	6922      	ldr	r2, [r4, #16]
 8002fc0:	b942      	cbnz	r2, 8002fd4 <__swsetup_r+0xa4>
 8002fc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002fc6:	d1c5      	bne.n	8002f54 <__swsetup_r+0x24>
 8002fc8:	bd38      	pop	{r3, r4, r5, pc}
 8002fca:	0799      	lsls	r1, r3, #30
 8002fcc:	bf58      	it	pl
 8002fce:	6962      	ldrpl	r2, [r4, #20]
 8002fd0:	60a2      	str	r2, [r4, #8]
 8002fd2:	e7f4      	b.n	8002fbe <__swsetup_r+0x8e>
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	e7f7      	b.n	8002fc8 <__swsetup_r+0x98>
 8002fd8:	20000018 	.word	0x20000018

08002fdc <memset>:
 8002fdc:	4402      	add	r2, r0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d100      	bne.n	8002fe6 <memset+0xa>
 8002fe4:	4770      	bx	lr
 8002fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fea:	e7f9      	b.n	8002fe0 <memset+0x4>

08002fec <strncmp>:
 8002fec:	b510      	push	{r4, lr}
 8002fee:	b16a      	cbz	r2, 800300c <strncmp+0x20>
 8002ff0:	3901      	subs	r1, #1
 8002ff2:	1884      	adds	r4, r0, r2
 8002ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ff8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d103      	bne.n	8003008 <strncmp+0x1c>
 8003000:	42a0      	cmp	r0, r4
 8003002:	d001      	beq.n	8003008 <strncmp+0x1c>
 8003004:	2a00      	cmp	r2, #0
 8003006:	d1f5      	bne.n	8002ff4 <strncmp+0x8>
 8003008:	1ad0      	subs	r0, r2, r3
 800300a:	bd10      	pop	{r4, pc}
 800300c:	4610      	mov	r0, r2
 800300e:	e7fc      	b.n	800300a <strncmp+0x1e>

08003010 <strtok>:
 8003010:	4b16      	ldr	r3, [pc, #88]	@ (800306c <strtok+0x5c>)
 8003012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003016:	681f      	ldr	r7, [r3, #0]
 8003018:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800301a:	4605      	mov	r5, r0
 800301c:	460e      	mov	r6, r1
 800301e:	b9ec      	cbnz	r4, 800305c <strtok+0x4c>
 8003020:	2050      	movs	r0, #80	@ 0x50
 8003022:	f000 f935 	bl	8003290 <malloc>
 8003026:	4602      	mov	r2, r0
 8003028:	6478      	str	r0, [r7, #68]	@ 0x44
 800302a:	b920      	cbnz	r0, 8003036 <strtok+0x26>
 800302c:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <strtok+0x60>)
 800302e:	4811      	ldr	r0, [pc, #68]	@ (8003074 <strtok+0x64>)
 8003030:	215b      	movs	r1, #91	@ 0x5b
 8003032:	f000 f8c5 	bl	80031c0 <__assert_func>
 8003036:	e9c0 4400 	strd	r4, r4, [r0]
 800303a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800303e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003042:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8003046:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800304a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800304e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8003052:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8003056:	6184      	str	r4, [r0, #24]
 8003058:	7704      	strb	r4, [r0, #28]
 800305a:	6244      	str	r4, [r0, #36]	@ 0x24
 800305c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800305e:	4631      	mov	r1, r6
 8003060:	4628      	mov	r0, r5
 8003062:	2301      	movs	r3, #1
 8003064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003068:	f000 b806 	b.w	8003078 <__strtok_r>
 800306c:	20000018 	.word	0x20000018
 8003070:	08004201 	.word	0x08004201
 8003074:	08004218 	.word	0x08004218

08003078 <__strtok_r>:
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307a:	4604      	mov	r4, r0
 800307c:	b908      	cbnz	r0, 8003082 <__strtok_r+0xa>
 800307e:	6814      	ldr	r4, [r2, #0]
 8003080:	b144      	cbz	r4, 8003094 <__strtok_r+0x1c>
 8003082:	4620      	mov	r0, r4
 8003084:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003088:	460f      	mov	r7, r1
 800308a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800308e:	b91e      	cbnz	r6, 8003098 <__strtok_r+0x20>
 8003090:	b965      	cbnz	r5, 80030ac <__strtok_r+0x34>
 8003092:	6015      	str	r5, [r2, #0]
 8003094:	2000      	movs	r0, #0
 8003096:	e005      	b.n	80030a4 <__strtok_r+0x2c>
 8003098:	42b5      	cmp	r5, r6
 800309a:	d1f6      	bne.n	800308a <__strtok_r+0x12>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <__strtok_r+0xa>
 80030a0:	6014      	str	r4, [r2, #0]
 80030a2:	7003      	strb	r3, [r0, #0]
 80030a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a6:	461c      	mov	r4, r3
 80030a8:	e00c      	b.n	80030c4 <__strtok_r+0x4c>
 80030aa:	b915      	cbnz	r5, 80030b2 <__strtok_r+0x3a>
 80030ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80030b0:	460e      	mov	r6, r1
 80030b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80030b6:	42ab      	cmp	r3, r5
 80030b8:	d1f7      	bne.n	80030aa <__strtok_r+0x32>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f3      	beq.n	80030a6 <__strtok_r+0x2e>
 80030be:	2300      	movs	r3, #0
 80030c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80030c4:	6014      	str	r4, [r2, #0]
 80030c6:	e7ed      	b.n	80030a4 <__strtok_r+0x2c>

080030c8 <_close_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	4d06      	ldr	r5, [pc, #24]	@ (80030e4 <_close_r+0x1c>)
 80030cc:	2300      	movs	r3, #0
 80030ce:	4604      	mov	r4, r0
 80030d0:	4608      	mov	r0, r1
 80030d2:	602b      	str	r3, [r5, #0]
 80030d4:	f7fd fe35 	bl	8000d42 <_close>
 80030d8:	1c43      	adds	r3, r0, #1
 80030da:	d102      	bne.n	80030e2 <_close_r+0x1a>
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	b103      	cbz	r3, 80030e2 <_close_r+0x1a>
 80030e0:	6023      	str	r3, [r4, #0]
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
 80030e4:	20000658 	.word	0x20000658

080030e8 <_lseek_r>:
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	4d07      	ldr	r5, [pc, #28]	@ (8003108 <_lseek_r+0x20>)
 80030ec:	4604      	mov	r4, r0
 80030ee:	4608      	mov	r0, r1
 80030f0:	4611      	mov	r1, r2
 80030f2:	2200      	movs	r2, #0
 80030f4:	602a      	str	r2, [r5, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f7fd fe4a 	bl	8000d90 <_lseek>
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	d102      	bne.n	8003106 <_lseek_r+0x1e>
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	b103      	cbz	r3, 8003106 <_lseek_r+0x1e>
 8003104:	6023      	str	r3, [r4, #0]
 8003106:	bd38      	pop	{r3, r4, r5, pc}
 8003108:	20000658 	.word	0x20000658

0800310c <_read_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4d07      	ldr	r5, [pc, #28]	@ (800312c <_read_r+0x20>)
 8003110:	4604      	mov	r4, r0
 8003112:	4608      	mov	r0, r1
 8003114:	4611      	mov	r1, r2
 8003116:	2200      	movs	r2, #0
 8003118:	602a      	str	r2, [r5, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	f7fd fdf4 	bl	8000d08 <_read>
 8003120:	1c43      	adds	r3, r0, #1
 8003122:	d102      	bne.n	800312a <_read_r+0x1e>
 8003124:	682b      	ldr	r3, [r5, #0]
 8003126:	b103      	cbz	r3, 800312a <_read_r+0x1e>
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	bd38      	pop	{r3, r4, r5, pc}
 800312c:	20000658 	.word	0x20000658

08003130 <_write_r>:
 8003130:	b538      	push	{r3, r4, r5, lr}
 8003132:	4d07      	ldr	r5, [pc, #28]	@ (8003150 <_write_r+0x20>)
 8003134:	4604      	mov	r4, r0
 8003136:	4608      	mov	r0, r1
 8003138:	4611      	mov	r1, r2
 800313a:	2200      	movs	r2, #0
 800313c:	602a      	str	r2, [r5, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	f7fd fcd0 	bl	8000ae4 <_write>
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	d102      	bne.n	800314e <_write_r+0x1e>
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	b103      	cbz	r3, 800314e <_write_r+0x1e>
 800314c:	6023      	str	r3, [r4, #0]
 800314e:	bd38      	pop	{r3, r4, r5, pc}
 8003150:	20000658 	.word	0x20000658

08003154 <__errno>:
 8003154:	4b01      	ldr	r3, [pc, #4]	@ (800315c <__errno+0x8>)
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	20000018 	.word	0x20000018

08003160 <__libc_init_array>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	4d0d      	ldr	r5, [pc, #52]	@ (8003198 <__libc_init_array+0x38>)
 8003164:	4c0d      	ldr	r4, [pc, #52]	@ (800319c <__libc_init_array+0x3c>)
 8003166:	1b64      	subs	r4, r4, r5
 8003168:	10a4      	asrs	r4, r4, #2
 800316a:	2600      	movs	r6, #0
 800316c:	42a6      	cmp	r6, r4
 800316e:	d109      	bne.n	8003184 <__libc_init_array+0x24>
 8003170:	4d0b      	ldr	r5, [pc, #44]	@ (80031a0 <__libc_init_array+0x40>)
 8003172:	4c0c      	ldr	r4, [pc, #48]	@ (80031a4 <__libc_init_array+0x44>)
 8003174:	f000 ff66 	bl	8004044 <_init>
 8003178:	1b64      	subs	r4, r4, r5
 800317a:	10a4      	asrs	r4, r4, #2
 800317c:	2600      	movs	r6, #0
 800317e:	42a6      	cmp	r6, r4
 8003180:	d105      	bne.n	800318e <__libc_init_array+0x2e>
 8003182:	bd70      	pop	{r4, r5, r6, pc}
 8003184:	f855 3b04 	ldr.w	r3, [r5], #4
 8003188:	4798      	blx	r3
 800318a:	3601      	adds	r6, #1
 800318c:	e7ee      	b.n	800316c <__libc_init_array+0xc>
 800318e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003192:	4798      	blx	r3
 8003194:	3601      	adds	r6, #1
 8003196:	e7f2      	b.n	800317e <__libc_init_array+0x1e>
 8003198:	080042ec 	.word	0x080042ec
 800319c:	080042ec 	.word	0x080042ec
 80031a0:	080042ec 	.word	0x080042ec
 80031a4:	080042f0 	.word	0x080042f0

080031a8 <__retarget_lock_init_recursive>:
 80031a8:	4770      	bx	lr

080031aa <__retarget_lock_acquire_recursive>:
 80031aa:	4770      	bx	lr

080031ac <__retarget_lock_release_recursive>:
 80031ac:	4770      	bx	lr

080031ae <strcpy>:
 80031ae:	4603      	mov	r3, r0
 80031b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031b4:	f803 2b01 	strb.w	r2, [r3], #1
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	d1f9      	bne.n	80031b0 <strcpy+0x2>
 80031bc:	4770      	bx	lr
	...

080031c0 <__assert_func>:
 80031c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80031c2:	4614      	mov	r4, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b09      	ldr	r3, [pc, #36]	@ (80031ec <__assert_func+0x2c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4605      	mov	r5, r0
 80031cc:	68d8      	ldr	r0, [r3, #12]
 80031ce:	b954      	cbnz	r4, 80031e6 <__assert_func+0x26>
 80031d0:	4b07      	ldr	r3, [pc, #28]	@ (80031f0 <__assert_func+0x30>)
 80031d2:	461c      	mov	r4, r3
 80031d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80031d8:	9100      	str	r1, [sp, #0]
 80031da:	462b      	mov	r3, r5
 80031dc:	4905      	ldr	r1, [pc, #20]	@ (80031f4 <__assert_func+0x34>)
 80031de:	f000 fde1 	bl	8003da4 <fiprintf>
 80031e2:	f000 fead 	bl	8003f40 <abort>
 80031e6:	4b04      	ldr	r3, [pc, #16]	@ (80031f8 <__assert_func+0x38>)
 80031e8:	e7f4      	b.n	80031d4 <__assert_func+0x14>
 80031ea:	bf00      	nop
 80031ec:	20000018 	.word	0x20000018
 80031f0:	080042ad 	.word	0x080042ad
 80031f4:	0800427f 	.word	0x0800427f
 80031f8:	08004272 	.word	0x08004272

080031fc <_free_r>:
 80031fc:	b538      	push	{r3, r4, r5, lr}
 80031fe:	4605      	mov	r5, r0
 8003200:	2900      	cmp	r1, #0
 8003202:	d041      	beq.n	8003288 <_free_r+0x8c>
 8003204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003208:	1f0c      	subs	r4, r1, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	bfb8      	it	lt
 800320e:	18e4      	addlt	r4, r4, r3
 8003210:	f000 f8e8 	bl	80033e4 <__malloc_lock>
 8003214:	4a1d      	ldr	r2, [pc, #116]	@ (800328c <_free_r+0x90>)
 8003216:	6813      	ldr	r3, [r2, #0]
 8003218:	b933      	cbnz	r3, 8003228 <_free_r+0x2c>
 800321a:	6063      	str	r3, [r4, #4]
 800321c:	6014      	str	r4, [r2, #0]
 800321e:	4628      	mov	r0, r5
 8003220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003224:	f000 b8e4 	b.w	80033f0 <__malloc_unlock>
 8003228:	42a3      	cmp	r3, r4
 800322a:	d908      	bls.n	800323e <_free_r+0x42>
 800322c:	6820      	ldr	r0, [r4, #0]
 800322e:	1821      	adds	r1, r4, r0
 8003230:	428b      	cmp	r3, r1
 8003232:	bf01      	itttt	eq
 8003234:	6819      	ldreq	r1, [r3, #0]
 8003236:	685b      	ldreq	r3, [r3, #4]
 8003238:	1809      	addeq	r1, r1, r0
 800323a:	6021      	streq	r1, [r4, #0]
 800323c:	e7ed      	b.n	800321a <_free_r+0x1e>
 800323e:	461a      	mov	r2, r3
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	b10b      	cbz	r3, 8003248 <_free_r+0x4c>
 8003244:	42a3      	cmp	r3, r4
 8003246:	d9fa      	bls.n	800323e <_free_r+0x42>
 8003248:	6811      	ldr	r1, [r2, #0]
 800324a:	1850      	adds	r0, r2, r1
 800324c:	42a0      	cmp	r0, r4
 800324e:	d10b      	bne.n	8003268 <_free_r+0x6c>
 8003250:	6820      	ldr	r0, [r4, #0]
 8003252:	4401      	add	r1, r0
 8003254:	1850      	adds	r0, r2, r1
 8003256:	4283      	cmp	r3, r0
 8003258:	6011      	str	r1, [r2, #0]
 800325a:	d1e0      	bne.n	800321e <_free_r+0x22>
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	6053      	str	r3, [r2, #4]
 8003262:	4408      	add	r0, r1
 8003264:	6010      	str	r0, [r2, #0]
 8003266:	e7da      	b.n	800321e <_free_r+0x22>
 8003268:	d902      	bls.n	8003270 <_free_r+0x74>
 800326a:	230c      	movs	r3, #12
 800326c:	602b      	str	r3, [r5, #0]
 800326e:	e7d6      	b.n	800321e <_free_r+0x22>
 8003270:	6820      	ldr	r0, [r4, #0]
 8003272:	1821      	adds	r1, r4, r0
 8003274:	428b      	cmp	r3, r1
 8003276:	bf04      	itt	eq
 8003278:	6819      	ldreq	r1, [r3, #0]
 800327a:	685b      	ldreq	r3, [r3, #4]
 800327c:	6063      	str	r3, [r4, #4]
 800327e:	bf04      	itt	eq
 8003280:	1809      	addeq	r1, r1, r0
 8003282:	6021      	streq	r1, [r4, #0]
 8003284:	6054      	str	r4, [r2, #4]
 8003286:	e7ca      	b.n	800321e <_free_r+0x22>
 8003288:	bd38      	pop	{r3, r4, r5, pc}
 800328a:	bf00      	nop
 800328c:	20000664 	.word	0x20000664

08003290 <malloc>:
 8003290:	4b02      	ldr	r3, [pc, #8]	@ (800329c <malloc+0xc>)
 8003292:	4601      	mov	r1, r0
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	f000 b825 	b.w	80032e4 <_malloc_r>
 800329a:	bf00      	nop
 800329c:	20000018 	.word	0x20000018

080032a0 <sbrk_aligned>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4e0f      	ldr	r6, [pc, #60]	@ (80032e0 <sbrk_aligned+0x40>)
 80032a4:	460c      	mov	r4, r1
 80032a6:	6831      	ldr	r1, [r6, #0]
 80032a8:	4605      	mov	r5, r0
 80032aa:	b911      	cbnz	r1, 80032b2 <sbrk_aligned+0x12>
 80032ac:	f000 fe2a 	bl	8003f04 <_sbrk_r>
 80032b0:	6030      	str	r0, [r6, #0]
 80032b2:	4621      	mov	r1, r4
 80032b4:	4628      	mov	r0, r5
 80032b6:	f000 fe25 	bl	8003f04 <_sbrk_r>
 80032ba:	1c43      	adds	r3, r0, #1
 80032bc:	d103      	bne.n	80032c6 <sbrk_aligned+0x26>
 80032be:	f04f 34ff 	mov.w	r4, #4294967295
 80032c2:	4620      	mov	r0, r4
 80032c4:	bd70      	pop	{r4, r5, r6, pc}
 80032c6:	1cc4      	adds	r4, r0, #3
 80032c8:	f024 0403 	bic.w	r4, r4, #3
 80032cc:	42a0      	cmp	r0, r4
 80032ce:	d0f8      	beq.n	80032c2 <sbrk_aligned+0x22>
 80032d0:	1a21      	subs	r1, r4, r0
 80032d2:	4628      	mov	r0, r5
 80032d4:	f000 fe16 	bl	8003f04 <_sbrk_r>
 80032d8:	3001      	adds	r0, #1
 80032da:	d1f2      	bne.n	80032c2 <sbrk_aligned+0x22>
 80032dc:	e7ef      	b.n	80032be <sbrk_aligned+0x1e>
 80032de:	bf00      	nop
 80032e0:	20000660 	.word	0x20000660

080032e4 <_malloc_r>:
 80032e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032e8:	1ccd      	adds	r5, r1, #3
 80032ea:	f025 0503 	bic.w	r5, r5, #3
 80032ee:	3508      	adds	r5, #8
 80032f0:	2d0c      	cmp	r5, #12
 80032f2:	bf38      	it	cc
 80032f4:	250c      	movcc	r5, #12
 80032f6:	2d00      	cmp	r5, #0
 80032f8:	4606      	mov	r6, r0
 80032fa:	db01      	blt.n	8003300 <_malloc_r+0x1c>
 80032fc:	42a9      	cmp	r1, r5
 80032fe:	d904      	bls.n	800330a <_malloc_r+0x26>
 8003300:	230c      	movs	r3, #12
 8003302:	6033      	str	r3, [r6, #0]
 8003304:	2000      	movs	r0, #0
 8003306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800330a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80033e0 <_malloc_r+0xfc>
 800330e:	f000 f869 	bl	80033e4 <__malloc_lock>
 8003312:	f8d8 3000 	ldr.w	r3, [r8]
 8003316:	461c      	mov	r4, r3
 8003318:	bb44      	cbnz	r4, 800336c <_malloc_r+0x88>
 800331a:	4629      	mov	r1, r5
 800331c:	4630      	mov	r0, r6
 800331e:	f7ff ffbf 	bl	80032a0 <sbrk_aligned>
 8003322:	1c43      	adds	r3, r0, #1
 8003324:	4604      	mov	r4, r0
 8003326:	d158      	bne.n	80033da <_malloc_r+0xf6>
 8003328:	f8d8 4000 	ldr.w	r4, [r8]
 800332c:	4627      	mov	r7, r4
 800332e:	2f00      	cmp	r7, #0
 8003330:	d143      	bne.n	80033ba <_malloc_r+0xd6>
 8003332:	2c00      	cmp	r4, #0
 8003334:	d04b      	beq.n	80033ce <_malloc_r+0xea>
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	4639      	mov	r1, r7
 800333a:	4630      	mov	r0, r6
 800333c:	eb04 0903 	add.w	r9, r4, r3
 8003340:	f000 fde0 	bl	8003f04 <_sbrk_r>
 8003344:	4581      	cmp	r9, r0
 8003346:	d142      	bne.n	80033ce <_malloc_r+0xea>
 8003348:	6821      	ldr	r1, [r4, #0]
 800334a:	1a6d      	subs	r5, r5, r1
 800334c:	4629      	mov	r1, r5
 800334e:	4630      	mov	r0, r6
 8003350:	f7ff ffa6 	bl	80032a0 <sbrk_aligned>
 8003354:	3001      	adds	r0, #1
 8003356:	d03a      	beq.n	80033ce <_malloc_r+0xea>
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	442b      	add	r3, r5
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	f8d8 3000 	ldr.w	r3, [r8]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	bb62      	cbnz	r2, 80033c0 <_malloc_r+0xdc>
 8003366:	f8c8 7000 	str.w	r7, [r8]
 800336a:	e00f      	b.n	800338c <_malloc_r+0xa8>
 800336c:	6822      	ldr	r2, [r4, #0]
 800336e:	1b52      	subs	r2, r2, r5
 8003370:	d420      	bmi.n	80033b4 <_malloc_r+0xd0>
 8003372:	2a0b      	cmp	r2, #11
 8003374:	d917      	bls.n	80033a6 <_malloc_r+0xc2>
 8003376:	1961      	adds	r1, r4, r5
 8003378:	42a3      	cmp	r3, r4
 800337a:	6025      	str	r5, [r4, #0]
 800337c:	bf18      	it	ne
 800337e:	6059      	strne	r1, [r3, #4]
 8003380:	6863      	ldr	r3, [r4, #4]
 8003382:	bf08      	it	eq
 8003384:	f8c8 1000 	streq.w	r1, [r8]
 8003388:	5162      	str	r2, [r4, r5]
 800338a:	604b      	str	r3, [r1, #4]
 800338c:	4630      	mov	r0, r6
 800338e:	f000 f82f 	bl	80033f0 <__malloc_unlock>
 8003392:	f104 000b 	add.w	r0, r4, #11
 8003396:	1d23      	adds	r3, r4, #4
 8003398:	f020 0007 	bic.w	r0, r0, #7
 800339c:	1ac2      	subs	r2, r0, r3
 800339e:	bf1c      	itt	ne
 80033a0:	1a1b      	subne	r3, r3, r0
 80033a2:	50a3      	strne	r3, [r4, r2]
 80033a4:	e7af      	b.n	8003306 <_malloc_r+0x22>
 80033a6:	6862      	ldr	r2, [r4, #4]
 80033a8:	42a3      	cmp	r3, r4
 80033aa:	bf0c      	ite	eq
 80033ac:	f8c8 2000 	streq.w	r2, [r8]
 80033b0:	605a      	strne	r2, [r3, #4]
 80033b2:	e7eb      	b.n	800338c <_malloc_r+0xa8>
 80033b4:	4623      	mov	r3, r4
 80033b6:	6864      	ldr	r4, [r4, #4]
 80033b8:	e7ae      	b.n	8003318 <_malloc_r+0x34>
 80033ba:	463c      	mov	r4, r7
 80033bc:	687f      	ldr	r7, [r7, #4]
 80033be:	e7b6      	b.n	800332e <_malloc_r+0x4a>
 80033c0:	461a      	mov	r2, r3
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	d1fb      	bne.n	80033c0 <_malloc_r+0xdc>
 80033c8:	2300      	movs	r3, #0
 80033ca:	6053      	str	r3, [r2, #4]
 80033cc:	e7de      	b.n	800338c <_malloc_r+0xa8>
 80033ce:	230c      	movs	r3, #12
 80033d0:	6033      	str	r3, [r6, #0]
 80033d2:	4630      	mov	r0, r6
 80033d4:	f000 f80c 	bl	80033f0 <__malloc_unlock>
 80033d8:	e794      	b.n	8003304 <_malloc_r+0x20>
 80033da:	6005      	str	r5, [r0, #0]
 80033dc:	e7d6      	b.n	800338c <_malloc_r+0xa8>
 80033de:	bf00      	nop
 80033e0:	20000664 	.word	0x20000664

080033e4 <__malloc_lock>:
 80033e4:	4801      	ldr	r0, [pc, #4]	@ (80033ec <__malloc_lock+0x8>)
 80033e6:	f7ff bee0 	b.w	80031aa <__retarget_lock_acquire_recursive>
 80033ea:	bf00      	nop
 80033ec:	2000065c 	.word	0x2000065c

080033f0 <__malloc_unlock>:
 80033f0:	4801      	ldr	r0, [pc, #4]	@ (80033f8 <__malloc_unlock+0x8>)
 80033f2:	f7ff bedb 	b.w	80031ac <__retarget_lock_release_recursive>
 80033f6:	bf00      	nop
 80033f8:	2000065c 	.word	0x2000065c

080033fc <__ssputs_r>:
 80033fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003400:	688e      	ldr	r6, [r1, #8]
 8003402:	461f      	mov	r7, r3
 8003404:	42be      	cmp	r6, r7
 8003406:	680b      	ldr	r3, [r1, #0]
 8003408:	4682      	mov	sl, r0
 800340a:	460c      	mov	r4, r1
 800340c:	4690      	mov	r8, r2
 800340e:	d82d      	bhi.n	800346c <__ssputs_r+0x70>
 8003410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003414:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003418:	d026      	beq.n	8003468 <__ssputs_r+0x6c>
 800341a:	6965      	ldr	r5, [r4, #20]
 800341c:	6909      	ldr	r1, [r1, #16]
 800341e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003422:	eba3 0901 	sub.w	r9, r3, r1
 8003426:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800342a:	1c7b      	adds	r3, r7, #1
 800342c:	444b      	add	r3, r9
 800342e:	106d      	asrs	r5, r5, #1
 8003430:	429d      	cmp	r5, r3
 8003432:	bf38      	it	cc
 8003434:	461d      	movcc	r5, r3
 8003436:	0553      	lsls	r3, r2, #21
 8003438:	d527      	bpl.n	800348a <__ssputs_r+0x8e>
 800343a:	4629      	mov	r1, r5
 800343c:	f7ff ff52 	bl	80032e4 <_malloc_r>
 8003440:	4606      	mov	r6, r0
 8003442:	b360      	cbz	r0, 800349e <__ssputs_r+0xa2>
 8003444:	6921      	ldr	r1, [r4, #16]
 8003446:	464a      	mov	r2, r9
 8003448:	f000 fd6c 	bl	8003f24 <memcpy>
 800344c:	89a3      	ldrh	r3, [r4, #12]
 800344e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003456:	81a3      	strh	r3, [r4, #12]
 8003458:	6126      	str	r6, [r4, #16]
 800345a:	6165      	str	r5, [r4, #20]
 800345c:	444e      	add	r6, r9
 800345e:	eba5 0509 	sub.w	r5, r5, r9
 8003462:	6026      	str	r6, [r4, #0]
 8003464:	60a5      	str	r5, [r4, #8]
 8003466:	463e      	mov	r6, r7
 8003468:	42be      	cmp	r6, r7
 800346a:	d900      	bls.n	800346e <__ssputs_r+0x72>
 800346c:	463e      	mov	r6, r7
 800346e:	6820      	ldr	r0, [r4, #0]
 8003470:	4632      	mov	r2, r6
 8003472:	4641      	mov	r1, r8
 8003474:	f000 fd0a 	bl	8003e8c <memmove>
 8003478:	68a3      	ldr	r3, [r4, #8]
 800347a:	1b9b      	subs	r3, r3, r6
 800347c:	60a3      	str	r3, [r4, #8]
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	4433      	add	r3, r6
 8003482:	6023      	str	r3, [r4, #0]
 8003484:	2000      	movs	r0, #0
 8003486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800348a:	462a      	mov	r2, r5
 800348c:	f000 fd5f 	bl	8003f4e <_realloc_r>
 8003490:	4606      	mov	r6, r0
 8003492:	2800      	cmp	r0, #0
 8003494:	d1e0      	bne.n	8003458 <__ssputs_r+0x5c>
 8003496:	6921      	ldr	r1, [r4, #16]
 8003498:	4650      	mov	r0, sl
 800349a:	f7ff feaf 	bl	80031fc <_free_r>
 800349e:	230c      	movs	r3, #12
 80034a0:	f8ca 3000 	str.w	r3, [sl]
 80034a4:	89a3      	ldrh	r3, [r4, #12]
 80034a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034aa:	81a3      	strh	r3, [r4, #12]
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	e7e9      	b.n	8003486 <__ssputs_r+0x8a>
	...

080034b4 <_svfiprintf_r>:
 80034b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b8:	4698      	mov	r8, r3
 80034ba:	898b      	ldrh	r3, [r1, #12]
 80034bc:	061b      	lsls	r3, r3, #24
 80034be:	b09d      	sub	sp, #116	@ 0x74
 80034c0:	4607      	mov	r7, r0
 80034c2:	460d      	mov	r5, r1
 80034c4:	4614      	mov	r4, r2
 80034c6:	d510      	bpl.n	80034ea <_svfiprintf_r+0x36>
 80034c8:	690b      	ldr	r3, [r1, #16]
 80034ca:	b973      	cbnz	r3, 80034ea <_svfiprintf_r+0x36>
 80034cc:	2140      	movs	r1, #64	@ 0x40
 80034ce:	f7ff ff09 	bl	80032e4 <_malloc_r>
 80034d2:	6028      	str	r0, [r5, #0]
 80034d4:	6128      	str	r0, [r5, #16]
 80034d6:	b930      	cbnz	r0, 80034e6 <_svfiprintf_r+0x32>
 80034d8:	230c      	movs	r3, #12
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	b01d      	add	sp, #116	@ 0x74
 80034e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034e6:	2340      	movs	r3, #64	@ 0x40
 80034e8:	616b      	str	r3, [r5, #20]
 80034ea:	2300      	movs	r3, #0
 80034ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80034ee:	2320      	movs	r3, #32
 80034f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80034f8:	2330      	movs	r3, #48	@ 0x30
 80034fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003698 <_svfiprintf_r+0x1e4>
 80034fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003502:	f04f 0901 	mov.w	r9, #1
 8003506:	4623      	mov	r3, r4
 8003508:	469a      	mov	sl, r3
 800350a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800350e:	b10a      	cbz	r2, 8003514 <_svfiprintf_r+0x60>
 8003510:	2a25      	cmp	r2, #37	@ 0x25
 8003512:	d1f9      	bne.n	8003508 <_svfiprintf_r+0x54>
 8003514:	ebba 0b04 	subs.w	fp, sl, r4
 8003518:	d00b      	beq.n	8003532 <_svfiprintf_r+0x7e>
 800351a:	465b      	mov	r3, fp
 800351c:	4622      	mov	r2, r4
 800351e:	4629      	mov	r1, r5
 8003520:	4638      	mov	r0, r7
 8003522:	f7ff ff6b 	bl	80033fc <__ssputs_r>
 8003526:	3001      	adds	r0, #1
 8003528:	f000 80a7 	beq.w	800367a <_svfiprintf_r+0x1c6>
 800352c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800352e:	445a      	add	r2, fp
 8003530:	9209      	str	r2, [sp, #36]	@ 0x24
 8003532:	f89a 3000 	ldrb.w	r3, [sl]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 809f 	beq.w	800367a <_svfiprintf_r+0x1c6>
 800353c:	2300      	movs	r3, #0
 800353e:	f04f 32ff 	mov.w	r2, #4294967295
 8003542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003546:	f10a 0a01 	add.w	sl, sl, #1
 800354a:	9304      	str	r3, [sp, #16]
 800354c:	9307      	str	r3, [sp, #28]
 800354e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003552:	931a      	str	r3, [sp, #104]	@ 0x68
 8003554:	4654      	mov	r4, sl
 8003556:	2205      	movs	r2, #5
 8003558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800355c:	484e      	ldr	r0, [pc, #312]	@ (8003698 <_svfiprintf_r+0x1e4>)
 800355e:	f7fc fe5f 	bl	8000220 <memchr>
 8003562:	9a04      	ldr	r2, [sp, #16]
 8003564:	b9d8      	cbnz	r0, 800359e <_svfiprintf_r+0xea>
 8003566:	06d0      	lsls	r0, r2, #27
 8003568:	bf44      	itt	mi
 800356a:	2320      	movmi	r3, #32
 800356c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003570:	0711      	lsls	r1, r2, #28
 8003572:	bf44      	itt	mi
 8003574:	232b      	movmi	r3, #43	@ 0x2b
 8003576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800357a:	f89a 3000 	ldrb.w	r3, [sl]
 800357e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003580:	d015      	beq.n	80035ae <_svfiprintf_r+0xfa>
 8003582:	9a07      	ldr	r2, [sp, #28]
 8003584:	4654      	mov	r4, sl
 8003586:	2000      	movs	r0, #0
 8003588:	f04f 0c0a 	mov.w	ip, #10
 800358c:	4621      	mov	r1, r4
 800358e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003592:	3b30      	subs	r3, #48	@ 0x30
 8003594:	2b09      	cmp	r3, #9
 8003596:	d94b      	bls.n	8003630 <_svfiprintf_r+0x17c>
 8003598:	b1b0      	cbz	r0, 80035c8 <_svfiprintf_r+0x114>
 800359a:	9207      	str	r2, [sp, #28]
 800359c:	e014      	b.n	80035c8 <_svfiprintf_r+0x114>
 800359e:	eba0 0308 	sub.w	r3, r0, r8
 80035a2:	fa09 f303 	lsl.w	r3, r9, r3
 80035a6:	4313      	orrs	r3, r2
 80035a8:	9304      	str	r3, [sp, #16]
 80035aa:	46a2      	mov	sl, r4
 80035ac:	e7d2      	b.n	8003554 <_svfiprintf_r+0xa0>
 80035ae:	9b03      	ldr	r3, [sp, #12]
 80035b0:	1d19      	adds	r1, r3, #4
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	9103      	str	r1, [sp, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	bfbb      	ittet	lt
 80035ba:	425b      	neglt	r3, r3
 80035bc:	f042 0202 	orrlt.w	r2, r2, #2
 80035c0:	9307      	strge	r3, [sp, #28]
 80035c2:	9307      	strlt	r3, [sp, #28]
 80035c4:	bfb8      	it	lt
 80035c6:	9204      	strlt	r2, [sp, #16]
 80035c8:	7823      	ldrb	r3, [r4, #0]
 80035ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80035cc:	d10a      	bne.n	80035e4 <_svfiprintf_r+0x130>
 80035ce:	7863      	ldrb	r3, [r4, #1]
 80035d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80035d2:	d132      	bne.n	800363a <_svfiprintf_r+0x186>
 80035d4:	9b03      	ldr	r3, [sp, #12]
 80035d6:	1d1a      	adds	r2, r3, #4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	9203      	str	r2, [sp, #12]
 80035dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035e0:	3402      	adds	r4, #2
 80035e2:	9305      	str	r3, [sp, #20]
 80035e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80036a8 <_svfiprintf_r+0x1f4>
 80035e8:	7821      	ldrb	r1, [r4, #0]
 80035ea:	2203      	movs	r2, #3
 80035ec:	4650      	mov	r0, sl
 80035ee:	f7fc fe17 	bl	8000220 <memchr>
 80035f2:	b138      	cbz	r0, 8003604 <_svfiprintf_r+0x150>
 80035f4:	9b04      	ldr	r3, [sp, #16]
 80035f6:	eba0 000a 	sub.w	r0, r0, sl
 80035fa:	2240      	movs	r2, #64	@ 0x40
 80035fc:	4082      	lsls	r2, r0
 80035fe:	4313      	orrs	r3, r2
 8003600:	3401      	adds	r4, #1
 8003602:	9304      	str	r3, [sp, #16]
 8003604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003608:	4824      	ldr	r0, [pc, #144]	@ (800369c <_svfiprintf_r+0x1e8>)
 800360a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800360e:	2206      	movs	r2, #6
 8003610:	f7fc fe06 	bl	8000220 <memchr>
 8003614:	2800      	cmp	r0, #0
 8003616:	d036      	beq.n	8003686 <_svfiprintf_r+0x1d2>
 8003618:	4b21      	ldr	r3, [pc, #132]	@ (80036a0 <_svfiprintf_r+0x1ec>)
 800361a:	bb1b      	cbnz	r3, 8003664 <_svfiprintf_r+0x1b0>
 800361c:	9b03      	ldr	r3, [sp, #12]
 800361e:	3307      	adds	r3, #7
 8003620:	f023 0307 	bic.w	r3, r3, #7
 8003624:	3308      	adds	r3, #8
 8003626:	9303      	str	r3, [sp, #12]
 8003628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800362a:	4433      	add	r3, r6
 800362c:	9309      	str	r3, [sp, #36]	@ 0x24
 800362e:	e76a      	b.n	8003506 <_svfiprintf_r+0x52>
 8003630:	fb0c 3202 	mla	r2, ip, r2, r3
 8003634:	460c      	mov	r4, r1
 8003636:	2001      	movs	r0, #1
 8003638:	e7a8      	b.n	800358c <_svfiprintf_r+0xd8>
 800363a:	2300      	movs	r3, #0
 800363c:	3401      	adds	r4, #1
 800363e:	9305      	str	r3, [sp, #20]
 8003640:	4619      	mov	r1, r3
 8003642:	f04f 0c0a 	mov.w	ip, #10
 8003646:	4620      	mov	r0, r4
 8003648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800364c:	3a30      	subs	r2, #48	@ 0x30
 800364e:	2a09      	cmp	r2, #9
 8003650:	d903      	bls.n	800365a <_svfiprintf_r+0x1a6>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0c6      	beq.n	80035e4 <_svfiprintf_r+0x130>
 8003656:	9105      	str	r1, [sp, #20]
 8003658:	e7c4      	b.n	80035e4 <_svfiprintf_r+0x130>
 800365a:	fb0c 2101 	mla	r1, ip, r1, r2
 800365e:	4604      	mov	r4, r0
 8003660:	2301      	movs	r3, #1
 8003662:	e7f0      	b.n	8003646 <_svfiprintf_r+0x192>
 8003664:	ab03      	add	r3, sp, #12
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	462a      	mov	r2, r5
 800366a:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <_svfiprintf_r+0x1f0>)
 800366c:	a904      	add	r1, sp, #16
 800366e:	4638      	mov	r0, r7
 8003670:	f3af 8000 	nop.w
 8003674:	1c42      	adds	r2, r0, #1
 8003676:	4606      	mov	r6, r0
 8003678:	d1d6      	bne.n	8003628 <_svfiprintf_r+0x174>
 800367a:	89ab      	ldrh	r3, [r5, #12]
 800367c:	065b      	lsls	r3, r3, #25
 800367e:	f53f af2d 	bmi.w	80034dc <_svfiprintf_r+0x28>
 8003682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003684:	e72c      	b.n	80034e0 <_svfiprintf_r+0x2c>
 8003686:	ab03      	add	r3, sp, #12
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	462a      	mov	r2, r5
 800368c:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <_svfiprintf_r+0x1f0>)
 800368e:	a904      	add	r1, sp, #16
 8003690:	4638      	mov	r0, r7
 8003692:	f000 f9bb 	bl	8003a0c <_printf_i>
 8003696:	e7ed      	b.n	8003674 <_svfiprintf_r+0x1c0>
 8003698:	080042ae 	.word	0x080042ae
 800369c:	080042b8 	.word	0x080042b8
 80036a0:	00000000 	.word	0x00000000
 80036a4:	080033fd 	.word	0x080033fd
 80036a8:	080042b4 	.word	0x080042b4

080036ac <__sfputc_r>:
 80036ac:	6893      	ldr	r3, [r2, #8]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	b410      	push	{r4}
 80036b4:	6093      	str	r3, [r2, #8]
 80036b6:	da08      	bge.n	80036ca <__sfputc_r+0x1e>
 80036b8:	6994      	ldr	r4, [r2, #24]
 80036ba:	42a3      	cmp	r3, r4
 80036bc:	db01      	blt.n	80036c2 <__sfputc_r+0x16>
 80036be:	290a      	cmp	r1, #10
 80036c0:	d103      	bne.n	80036ca <__sfputc_r+0x1e>
 80036c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036c6:	f7ff bbf4 	b.w	8002eb2 <__swbuf_r>
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	1c58      	adds	r0, r3, #1
 80036ce:	6010      	str	r0, [r2, #0]
 80036d0:	7019      	strb	r1, [r3, #0]
 80036d2:	4608      	mov	r0, r1
 80036d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d8:	4770      	bx	lr

080036da <__sfputs_r>:
 80036da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036dc:	4606      	mov	r6, r0
 80036de:	460f      	mov	r7, r1
 80036e0:	4614      	mov	r4, r2
 80036e2:	18d5      	adds	r5, r2, r3
 80036e4:	42ac      	cmp	r4, r5
 80036e6:	d101      	bne.n	80036ec <__sfputs_r+0x12>
 80036e8:	2000      	movs	r0, #0
 80036ea:	e007      	b.n	80036fc <__sfputs_r+0x22>
 80036ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f0:	463a      	mov	r2, r7
 80036f2:	4630      	mov	r0, r6
 80036f4:	f7ff ffda 	bl	80036ac <__sfputc_r>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d1f3      	bne.n	80036e4 <__sfputs_r+0xa>
 80036fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003700 <_vfiprintf_r>:
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	460d      	mov	r5, r1
 8003706:	b09d      	sub	sp, #116	@ 0x74
 8003708:	4614      	mov	r4, r2
 800370a:	4698      	mov	r8, r3
 800370c:	4606      	mov	r6, r0
 800370e:	b118      	cbz	r0, 8003718 <_vfiprintf_r+0x18>
 8003710:	6a03      	ldr	r3, [r0, #32]
 8003712:	b90b      	cbnz	r3, 8003718 <_vfiprintf_r+0x18>
 8003714:	f7ff fab0 	bl	8002c78 <__sinit>
 8003718:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800371a:	07d9      	lsls	r1, r3, #31
 800371c:	d405      	bmi.n	800372a <_vfiprintf_r+0x2a>
 800371e:	89ab      	ldrh	r3, [r5, #12]
 8003720:	059a      	lsls	r2, r3, #22
 8003722:	d402      	bmi.n	800372a <_vfiprintf_r+0x2a>
 8003724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003726:	f7ff fd40 	bl	80031aa <__retarget_lock_acquire_recursive>
 800372a:	89ab      	ldrh	r3, [r5, #12]
 800372c:	071b      	lsls	r3, r3, #28
 800372e:	d501      	bpl.n	8003734 <_vfiprintf_r+0x34>
 8003730:	692b      	ldr	r3, [r5, #16]
 8003732:	b99b      	cbnz	r3, 800375c <_vfiprintf_r+0x5c>
 8003734:	4629      	mov	r1, r5
 8003736:	4630      	mov	r0, r6
 8003738:	f7ff fbfa 	bl	8002f30 <__swsetup_r>
 800373c:	b170      	cbz	r0, 800375c <_vfiprintf_r+0x5c>
 800373e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003740:	07dc      	lsls	r4, r3, #31
 8003742:	d504      	bpl.n	800374e <_vfiprintf_r+0x4e>
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	b01d      	add	sp, #116	@ 0x74
 800374a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374e:	89ab      	ldrh	r3, [r5, #12]
 8003750:	0598      	lsls	r0, r3, #22
 8003752:	d4f7      	bmi.n	8003744 <_vfiprintf_r+0x44>
 8003754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003756:	f7ff fd29 	bl	80031ac <__retarget_lock_release_recursive>
 800375a:	e7f3      	b.n	8003744 <_vfiprintf_r+0x44>
 800375c:	2300      	movs	r3, #0
 800375e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003760:	2320      	movs	r3, #32
 8003762:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003766:	f8cd 800c 	str.w	r8, [sp, #12]
 800376a:	2330      	movs	r3, #48	@ 0x30
 800376c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800391c <_vfiprintf_r+0x21c>
 8003770:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003774:	f04f 0901 	mov.w	r9, #1
 8003778:	4623      	mov	r3, r4
 800377a:	469a      	mov	sl, r3
 800377c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003780:	b10a      	cbz	r2, 8003786 <_vfiprintf_r+0x86>
 8003782:	2a25      	cmp	r2, #37	@ 0x25
 8003784:	d1f9      	bne.n	800377a <_vfiprintf_r+0x7a>
 8003786:	ebba 0b04 	subs.w	fp, sl, r4
 800378a:	d00b      	beq.n	80037a4 <_vfiprintf_r+0xa4>
 800378c:	465b      	mov	r3, fp
 800378e:	4622      	mov	r2, r4
 8003790:	4629      	mov	r1, r5
 8003792:	4630      	mov	r0, r6
 8003794:	f7ff ffa1 	bl	80036da <__sfputs_r>
 8003798:	3001      	adds	r0, #1
 800379a:	f000 80a7 	beq.w	80038ec <_vfiprintf_r+0x1ec>
 800379e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037a0:	445a      	add	r2, fp
 80037a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80037a4:	f89a 3000 	ldrb.w	r3, [sl]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 809f 	beq.w	80038ec <_vfiprintf_r+0x1ec>
 80037ae:	2300      	movs	r3, #0
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295
 80037b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037b8:	f10a 0a01 	add.w	sl, sl, #1
 80037bc:	9304      	str	r3, [sp, #16]
 80037be:	9307      	str	r3, [sp, #28]
 80037c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80037c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80037c6:	4654      	mov	r4, sl
 80037c8:	2205      	movs	r2, #5
 80037ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ce:	4853      	ldr	r0, [pc, #332]	@ (800391c <_vfiprintf_r+0x21c>)
 80037d0:	f7fc fd26 	bl	8000220 <memchr>
 80037d4:	9a04      	ldr	r2, [sp, #16]
 80037d6:	b9d8      	cbnz	r0, 8003810 <_vfiprintf_r+0x110>
 80037d8:	06d1      	lsls	r1, r2, #27
 80037da:	bf44      	itt	mi
 80037dc:	2320      	movmi	r3, #32
 80037de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037e2:	0713      	lsls	r3, r2, #28
 80037e4:	bf44      	itt	mi
 80037e6:	232b      	movmi	r3, #43	@ 0x2b
 80037e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037ec:	f89a 3000 	ldrb.w	r3, [sl]
 80037f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80037f2:	d015      	beq.n	8003820 <_vfiprintf_r+0x120>
 80037f4:	9a07      	ldr	r2, [sp, #28]
 80037f6:	4654      	mov	r4, sl
 80037f8:	2000      	movs	r0, #0
 80037fa:	f04f 0c0a 	mov.w	ip, #10
 80037fe:	4621      	mov	r1, r4
 8003800:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003804:	3b30      	subs	r3, #48	@ 0x30
 8003806:	2b09      	cmp	r3, #9
 8003808:	d94b      	bls.n	80038a2 <_vfiprintf_r+0x1a2>
 800380a:	b1b0      	cbz	r0, 800383a <_vfiprintf_r+0x13a>
 800380c:	9207      	str	r2, [sp, #28]
 800380e:	e014      	b.n	800383a <_vfiprintf_r+0x13a>
 8003810:	eba0 0308 	sub.w	r3, r0, r8
 8003814:	fa09 f303 	lsl.w	r3, r9, r3
 8003818:	4313      	orrs	r3, r2
 800381a:	9304      	str	r3, [sp, #16]
 800381c:	46a2      	mov	sl, r4
 800381e:	e7d2      	b.n	80037c6 <_vfiprintf_r+0xc6>
 8003820:	9b03      	ldr	r3, [sp, #12]
 8003822:	1d19      	adds	r1, r3, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	9103      	str	r1, [sp, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	bfbb      	ittet	lt
 800382c:	425b      	neglt	r3, r3
 800382e:	f042 0202 	orrlt.w	r2, r2, #2
 8003832:	9307      	strge	r3, [sp, #28]
 8003834:	9307      	strlt	r3, [sp, #28]
 8003836:	bfb8      	it	lt
 8003838:	9204      	strlt	r2, [sp, #16]
 800383a:	7823      	ldrb	r3, [r4, #0]
 800383c:	2b2e      	cmp	r3, #46	@ 0x2e
 800383e:	d10a      	bne.n	8003856 <_vfiprintf_r+0x156>
 8003840:	7863      	ldrb	r3, [r4, #1]
 8003842:	2b2a      	cmp	r3, #42	@ 0x2a
 8003844:	d132      	bne.n	80038ac <_vfiprintf_r+0x1ac>
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	1d1a      	adds	r2, r3, #4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	9203      	str	r2, [sp, #12]
 800384e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003852:	3402      	adds	r4, #2
 8003854:	9305      	str	r3, [sp, #20]
 8003856:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800392c <_vfiprintf_r+0x22c>
 800385a:	7821      	ldrb	r1, [r4, #0]
 800385c:	2203      	movs	r2, #3
 800385e:	4650      	mov	r0, sl
 8003860:	f7fc fcde 	bl	8000220 <memchr>
 8003864:	b138      	cbz	r0, 8003876 <_vfiprintf_r+0x176>
 8003866:	9b04      	ldr	r3, [sp, #16]
 8003868:	eba0 000a 	sub.w	r0, r0, sl
 800386c:	2240      	movs	r2, #64	@ 0x40
 800386e:	4082      	lsls	r2, r0
 8003870:	4313      	orrs	r3, r2
 8003872:	3401      	adds	r4, #1
 8003874:	9304      	str	r3, [sp, #16]
 8003876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800387a:	4829      	ldr	r0, [pc, #164]	@ (8003920 <_vfiprintf_r+0x220>)
 800387c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003880:	2206      	movs	r2, #6
 8003882:	f7fc fccd 	bl	8000220 <memchr>
 8003886:	2800      	cmp	r0, #0
 8003888:	d03f      	beq.n	800390a <_vfiprintf_r+0x20a>
 800388a:	4b26      	ldr	r3, [pc, #152]	@ (8003924 <_vfiprintf_r+0x224>)
 800388c:	bb1b      	cbnz	r3, 80038d6 <_vfiprintf_r+0x1d6>
 800388e:	9b03      	ldr	r3, [sp, #12]
 8003890:	3307      	adds	r3, #7
 8003892:	f023 0307 	bic.w	r3, r3, #7
 8003896:	3308      	adds	r3, #8
 8003898:	9303      	str	r3, [sp, #12]
 800389a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800389c:	443b      	add	r3, r7
 800389e:	9309      	str	r3, [sp, #36]	@ 0x24
 80038a0:	e76a      	b.n	8003778 <_vfiprintf_r+0x78>
 80038a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80038a6:	460c      	mov	r4, r1
 80038a8:	2001      	movs	r0, #1
 80038aa:	e7a8      	b.n	80037fe <_vfiprintf_r+0xfe>
 80038ac:	2300      	movs	r3, #0
 80038ae:	3401      	adds	r4, #1
 80038b0:	9305      	str	r3, [sp, #20]
 80038b2:	4619      	mov	r1, r3
 80038b4:	f04f 0c0a 	mov.w	ip, #10
 80038b8:	4620      	mov	r0, r4
 80038ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038be:	3a30      	subs	r2, #48	@ 0x30
 80038c0:	2a09      	cmp	r2, #9
 80038c2:	d903      	bls.n	80038cc <_vfiprintf_r+0x1cc>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0c6      	beq.n	8003856 <_vfiprintf_r+0x156>
 80038c8:	9105      	str	r1, [sp, #20]
 80038ca:	e7c4      	b.n	8003856 <_vfiprintf_r+0x156>
 80038cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80038d0:	4604      	mov	r4, r0
 80038d2:	2301      	movs	r3, #1
 80038d4:	e7f0      	b.n	80038b8 <_vfiprintf_r+0x1b8>
 80038d6:	ab03      	add	r3, sp, #12
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	462a      	mov	r2, r5
 80038dc:	4b12      	ldr	r3, [pc, #72]	@ (8003928 <_vfiprintf_r+0x228>)
 80038de:	a904      	add	r1, sp, #16
 80038e0:	4630      	mov	r0, r6
 80038e2:	f3af 8000 	nop.w
 80038e6:	4607      	mov	r7, r0
 80038e8:	1c78      	adds	r0, r7, #1
 80038ea:	d1d6      	bne.n	800389a <_vfiprintf_r+0x19a>
 80038ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80038ee:	07d9      	lsls	r1, r3, #31
 80038f0:	d405      	bmi.n	80038fe <_vfiprintf_r+0x1fe>
 80038f2:	89ab      	ldrh	r3, [r5, #12]
 80038f4:	059a      	lsls	r2, r3, #22
 80038f6:	d402      	bmi.n	80038fe <_vfiprintf_r+0x1fe>
 80038f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80038fa:	f7ff fc57 	bl	80031ac <__retarget_lock_release_recursive>
 80038fe:	89ab      	ldrh	r3, [r5, #12]
 8003900:	065b      	lsls	r3, r3, #25
 8003902:	f53f af1f 	bmi.w	8003744 <_vfiprintf_r+0x44>
 8003906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003908:	e71e      	b.n	8003748 <_vfiprintf_r+0x48>
 800390a:	ab03      	add	r3, sp, #12
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	462a      	mov	r2, r5
 8003910:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <_vfiprintf_r+0x228>)
 8003912:	a904      	add	r1, sp, #16
 8003914:	4630      	mov	r0, r6
 8003916:	f000 f879 	bl	8003a0c <_printf_i>
 800391a:	e7e4      	b.n	80038e6 <_vfiprintf_r+0x1e6>
 800391c:	080042ae 	.word	0x080042ae
 8003920:	080042b8 	.word	0x080042b8
 8003924:	00000000 	.word	0x00000000
 8003928:	080036db 	.word	0x080036db
 800392c:	080042b4 	.word	0x080042b4

08003930 <_printf_common>:
 8003930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003934:	4616      	mov	r6, r2
 8003936:	4698      	mov	r8, r3
 8003938:	688a      	ldr	r2, [r1, #8]
 800393a:	690b      	ldr	r3, [r1, #16]
 800393c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003940:	4293      	cmp	r3, r2
 8003942:	bfb8      	it	lt
 8003944:	4613      	movlt	r3, r2
 8003946:	6033      	str	r3, [r6, #0]
 8003948:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800394c:	4607      	mov	r7, r0
 800394e:	460c      	mov	r4, r1
 8003950:	b10a      	cbz	r2, 8003956 <_printf_common+0x26>
 8003952:	3301      	adds	r3, #1
 8003954:	6033      	str	r3, [r6, #0]
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	0699      	lsls	r1, r3, #26
 800395a:	bf42      	ittt	mi
 800395c:	6833      	ldrmi	r3, [r6, #0]
 800395e:	3302      	addmi	r3, #2
 8003960:	6033      	strmi	r3, [r6, #0]
 8003962:	6825      	ldr	r5, [r4, #0]
 8003964:	f015 0506 	ands.w	r5, r5, #6
 8003968:	d106      	bne.n	8003978 <_printf_common+0x48>
 800396a:	f104 0a19 	add.w	sl, r4, #25
 800396e:	68e3      	ldr	r3, [r4, #12]
 8003970:	6832      	ldr	r2, [r6, #0]
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	42ab      	cmp	r3, r5
 8003976:	dc26      	bgt.n	80039c6 <_printf_common+0x96>
 8003978:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800397c:	6822      	ldr	r2, [r4, #0]
 800397e:	3b00      	subs	r3, #0
 8003980:	bf18      	it	ne
 8003982:	2301      	movne	r3, #1
 8003984:	0692      	lsls	r2, r2, #26
 8003986:	d42b      	bmi.n	80039e0 <_printf_common+0xb0>
 8003988:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800398c:	4641      	mov	r1, r8
 800398e:	4638      	mov	r0, r7
 8003990:	47c8      	blx	r9
 8003992:	3001      	adds	r0, #1
 8003994:	d01e      	beq.n	80039d4 <_printf_common+0xa4>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	6922      	ldr	r2, [r4, #16]
 800399a:	f003 0306 	and.w	r3, r3, #6
 800399e:	2b04      	cmp	r3, #4
 80039a0:	bf02      	ittt	eq
 80039a2:	68e5      	ldreq	r5, [r4, #12]
 80039a4:	6833      	ldreq	r3, [r6, #0]
 80039a6:	1aed      	subeq	r5, r5, r3
 80039a8:	68a3      	ldr	r3, [r4, #8]
 80039aa:	bf0c      	ite	eq
 80039ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b0:	2500      	movne	r5, #0
 80039b2:	4293      	cmp	r3, r2
 80039b4:	bfc4      	itt	gt
 80039b6:	1a9b      	subgt	r3, r3, r2
 80039b8:	18ed      	addgt	r5, r5, r3
 80039ba:	2600      	movs	r6, #0
 80039bc:	341a      	adds	r4, #26
 80039be:	42b5      	cmp	r5, r6
 80039c0:	d11a      	bne.n	80039f8 <_printf_common+0xc8>
 80039c2:	2000      	movs	r0, #0
 80039c4:	e008      	b.n	80039d8 <_printf_common+0xa8>
 80039c6:	2301      	movs	r3, #1
 80039c8:	4652      	mov	r2, sl
 80039ca:	4641      	mov	r1, r8
 80039cc:	4638      	mov	r0, r7
 80039ce:	47c8      	blx	r9
 80039d0:	3001      	adds	r0, #1
 80039d2:	d103      	bne.n	80039dc <_printf_common+0xac>
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039dc:	3501      	adds	r5, #1
 80039de:	e7c6      	b.n	800396e <_printf_common+0x3e>
 80039e0:	18e1      	adds	r1, r4, r3
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	2030      	movs	r0, #48	@ 0x30
 80039e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039ea:	4422      	add	r2, r4
 80039ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039f4:	3302      	adds	r3, #2
 80039f6:	e7c7      	b.n	8003988 <_printf_common+0x58>
 80039f8:	2301      	movs	r3, #1
 80039fa:	4622      	mov	r2, r4
 80039fc:	4641      	mov	r1, r8
 80039fe:	4638      	mov	r0, r7
 8003a00:	47c8      	blx	r9
 8003a02:	3001      	adds	r0, #1
 8003a04:	d0e6      	beq.n	80039d4 <_printf_common+0xa4>
 8003a06:	3601      	adds	r6, #1
 8003a08:	e7d9      	b.n	80039be <_printf_common+0x8e>
	...

08003a0c <_printf_i>:
 8003a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a10:	7e0f      	ldrb	r7, [r1, #24]
 8003a12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a14:	2f78      	cmp	r7, #120	@ 0x78
 8003a16:	4691      	mov	r9, r2
 8003a18:	4680      	mov	r8, r0
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	469a      	mov	sl, r3
 8003a1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a22:	d807      	bhi.n	8003a34 <_printf_i+0x28>
 8003a24:	2f62      	cmp	r7, #98	@ 0x62
 8003a26:	d80a      	bhi.n	8003a3e <_printf_i+0x32>
 8003a28:	2f00      	cmp	r7, #0
 8003a2a:	f000 80d2 	beq.w	8003bd2 <_printf_i+0x1c6>
 8003a2e:	2f58      	cmp	r7, #88	@ 0x58
 8003a30:	f000 80b9 	beq.w	8003ba6 <_printf_i+0x19a>
 8003a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a3c:	e03a      	b.n	8003ab4 <_printf_i+0xa8>
 8003a3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a42:	2b15      	cmp	r3, #21
 8003a44:	d8f6      	bhi.n	8003a34 <_printf_i+0x28>
 8003a46:	a101      	add	r1, pc, #4	@ (adr r1, 8003a4c <_printf_i+0x40>)
 8003a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a4c:	08003aa5 	.word	0x08003aa5
 8003a50:	08003ab9 	.word	0x08003ab9
 8003a54:	08003a35 	.word	0x08003a35
 8003a58:	08003a35 	.word	0x08003a35
 8003a5c:	08003a35 	.word	0x08003a35
 8003a60:	08003a35 	.word	0x08003a35
 8003a64:	08003ab9 	.word	0x08003ab9
 8003a68:	08003a35 	.word	0x08003a35
 8003a6c:	08003a35 	.word	0x08003a35
 8003a70:	08003a35 	.word	0x08003a35
 8003a74:	08003a35 	.word	0x08003a35
 8003a78:	08003bb9 	.word	0x08003bb9
 8003a7c:	08003ae3 	.word	0x08003ae3
 8003a80:	08003b73 	.word	0x08003b73
 8003a84:	08003a35 	.word	0x08003a35
 8003a88:	08003a35 	.word	0x08003a35
 8003a8c:	08003bdb 	.word	0x08003bdb
 8003a90:	08003a35 	.word	0x08003a35
 8003a94:	08003ae3 	.word	0x08003ae3
 8003a98:	08003a35 	.word	0x08003a35
 8003a9c:	08003a35 	.word	0x08003a35
 8003aa0:	08003b7b 	.word	0x08003b7b
 8003aa4:	6833      	ldr	r3, [r6, #0]
 8003aa6:	1d1a      	adds	r2, r3, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6032      	str	r2, [r6, #0]
 8003aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ab0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e09d      	b.n	8003bf4 <_printf_i+0x1e8>
 8003ab8:	6833      	ldr	r3, [r6, #0]
 8003aba:	6820      	ldr	r0, [r4, #0]
 8003abc:	1d19      	adds	r1, r3, #4
 8003abe:	6031      	str	r1, [r6, #0]
 8003ac0:	0606      	lsls	r6, r0, #24
 8003ac2:	d501      	bpl.n	8003ac8 <_printf_i+0xbc>
 8003ac4:	681d      	ldr	r5, [r3, #0]
 8003ac6:	e003      	b.n	8003ad0 <_printf_i+0xc4>
 8003ac8:	0645      	lsls	r5, r0, #25
 8003aca:	d5fb      	bpl.n	8003ac4 <_printf_i+0xb8>
 8003acc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ad0:	2d00      	cmp	r5, #0
 8003ad2:	da03      	bge.n	8003adc <_printf_i+0xd0>
 8003ad4:	232d      	movs	r3, #45	@ 0x2d
 8003ad6:	426d      	negs	r5, r5
 8003ad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003adc:	4859      	ldr	r0, [pc, #356]	@ (8003c44 <_printf_i+0x238>)
 8003ade:	230a      	movs	r3, #10
 8003ae0:	e011      	b.n	8003b06 <_printf_i+0xfa>
 8003ae2:	6821      	ldr	r1, [r4, #0]
 8003ae4:	6833      	ldr	r3, [r6, #0]
 8003ae6:	0608      	lsls	r0, r1, #24
 8003ae8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003aec:	d402      	bmi.n	8003af4 <_printf_i+0xe8>
 8003aee:	0649      	lsls	r1, r1, #25
 8003af0:	bf48      	it	mi
 8003af2:	b2ad      	uxthmi	r5, r5
 8003af4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003af6:	4853      	ldr	r0, [pc, #332]	@ (8003c44 <_printf_i+0x238>)
 8003af8:	6033      	str	r3, [r6, #0]
 8003afa:	bf14      	ite	ne
 8003afc:	230a      	movne	r3, #10
 8003afe:	2308      	moveq	r3, #8
 8003b00:	2100      	movs	r1, #0
 8003b02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b06:	6866      	ldr	r6, [r4, #4]
 8003b08:	60a6      	str	r6, [r4, #8]
 8003b0a:	2e00      	cmp	r6, #0
 8003b0c:	bfa2      	ittt	ge
 8003b0e:	6821      	ldrge	r1, [r4, #0]
 8003b10:	f021 0104 	bicge.w	r1, r1, #4
 8003b14:	6021      	strge	r1, [r4, #0]
 8003b16:	b90d      	cbnz	r5, 8003b1c <_printf_i+0x110>
 8003b18:	2e00      	cmp	r6, #0
 8003b1a:	d04b      	beq.n	8003bb4 <_printf_i+0x1a8>
 8003b1c:	4616      	mov	r6, r2
 8003b1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b22:	fb03 5711 	mls	r7, r3, r1, r5
 8003b26:	5dc7      	ldrb	r7, [r0, r7]
 8003b28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b2c:	462f      	mov	r7, r5
 8003b2e:	42bb      	cmp	r3, r7
 8003b30:	460d      	mov	r5, r1
 8003b32:	d9f4      	bls.n	8003b1e <_printf_i+0x112>
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d10b      	bne.n	8003b50 <_printf_i+0x144>
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	07df      	lsls	r7, r3, #31
 8003b3c:	d508      	bpl.n	8003b50 <_printf_i+0x144>
 8003b3e:	6923      	ldr	r3, [r4, #16]
 8003b40:	6861      	ldr	r1, [r4, #4]
 8003b42:	4299      	cmp	r1, r3
 8003b44:	bfde      	ittt	le
 8003b46:	2330      	movle	r3, #48	@ 0x30
 8003b48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b50:	1b92      	subs	r2, r2, r6
 8003b52:	6122      	str	r2, [r4, #16]
 8003b54:	f8cd a000 	str.w	sl, [sp]
 8003b58:	464b      	mov	r3, r9
 8003b5a:	aa03      	add	r2, sp, #12
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	4640      	mov	r0, r8
 8003b60:	f7ff fee6 	bl	8003930 <_printf_common>
 8003b64:	3001      	adds	r0, #1
 8003b66:	d14a      	bne.n	8003bfe <_printf_i+0x1f2>
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6c:	b004      	add	sp, #16
 8003b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	f043 0320 	orr.w	r3, r3, #32
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	4833      	ldr	r0, [pc, #204]	@ (8003c48 <_printf_i+0x23c>)
 8003b7c:	2778      	movs	r7, #120	@ 0x78
 8003b7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	6831      	ldr	r1, [r6, #0]
 8003b86:	061f      	lsls	r7, r3, #24
 8003b88:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b8c:	d402      	bmi.n	8003b94 <_printf_i+0x188>
 8003b8e:	065f      	lsls	r7, r3, #25
 8003b90:	bf48      	it	mi
 8003b92:	b2ad      	uxthmi	r5, r5
 8003b94:	6031      	str	r1, [r6, #0]
 8003b96:	07d9      	lsls	r1, r3, #31
 8003b98:	bf44      	itt	mi
 8003b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8003b9e:	6023      	strmi	r3, [r4, #0]
 8003ba0:	b11d      	cbz	r5, 8003baa <_printf_i+0x19e>
 8003ba2:	2310      	movs	r3, #16
 8003ba4:	e7ac      	b.n	8003b00 <_printf_i+0xf4>
 8003ba6:	4827      	ldr	r0, [pc, #156]	@ (8003c44 <_printf_i+0x238>)
 8003ba8:	e7e9      	b.n	8003b7e <_printf_i+0x172>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	f023 0320 	bic.w	r3, r3, #32
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	e7f6      	b.n	8003ba2 <_printf_i+0x196>
 8003bb4:	4616      	mov	r6, r2
 8003bb6:	e7bd      	b.n	8003b34 <_printf_i+0x128>
 8003bb8:	6833      	ldr	r3, [r6, #0]
 8003bba:	6825      	ldr	r5, [r4, #0]
 8003bbc:	6961      	ldr	r1, [r4, #20]
 8003bbe:	1d18      	adds	r0, r3, #4
 8003bc0:	6030      	str	r0, [r6, #0]
 8003bc2:	062e      	lsls	r6, r5, #24
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	d501      	bpl.n	8003bcc <_printf_i+0x1c0>
 8003bc8:	6019      	str	r1, [r3, #0]
 8003bca:	e002      	b.n	8003bd2 <_printf_i+0x1c6>
 8003bcc:	0668      	lsls	r0, r5, #25
 8003bce:	d5fb      	bpl.n	8003bc8 <_printf_i+0x1bc>
 8003bd0:	8019      	strh	r1, [r3, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6123      	str	r3, [r4, #16]
 8003bd6:	4616      	mov	r6, r2
 8003bd8:	e7bc      	b.n	8003b54 <_printf_i+0x148>
 8003bda:	6833      	ldr	r3, [r6, #0]
 8003bdc:	1d1a      	adds	r2, r3, #4
 8003bde:	6032      	str	r2, [r6, #0]
 8003be0:	681e      	ldr	r6, [r3, #0]
 8003be2:	6862      	ldr	r2, [r4, #4]
 8003be4:	2100      	movs	r1, #0
 8003be6:	4630      	mov	r0, r6
 8003be8:	f7fc fb1a 	bl	8000220 <memchr>
 8003bec:	b108      	cbz	r0, 8003bf2 <_printf_i+0x1e6>
 8003bee:	1b80      	subs	r0, r0, r6
 8003bf0:	6060      	str	r0, [r4, #4]
 8003bf2:	6863      	ldr	r3, [r4, #4]
 8003bf4:	6123      	str	r3, [r4, #16]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bfc:	e7aa      	b.n	8003b54 <_printf_i+0x148>
 8003bfe:	6923      	ldr	r3, [r4, #16]
 8003c00:	4632      	mov	r2, r6
 8003c02:	4649      	mov	r1, r9
 8003c04:	4640      	mov	r0, r8
 8003c06:	47d0      	blx	sl
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d0ad      	beq.n	8003b68 <_printf_i+0x15c>
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	079b      	lsls	r3, r3, #30
 8003c10:	d413      	bmi.n	8003c3a <_printf_i+0x22e>
 8003c12:	68e0      	ldr	r0, [r4, #12]
 8003c14:	9b03      	ldr	r3, [sp, #12]
 8003c16:	4298      	cmp	r0, r3
 8003c18:	bfb8      	it	lt
 8003c1a:	4618      	movlt	r0, r3
 8003c1c:	e7a6      	b.n	8003b6c <_printf_i+0x160>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	4632      	mov	r2, r6
 8003c22:	4649      	mov	r1, r9
 8003c24:	4640      	mov	r0, r8
 8003c26:	47d0      	blx	sl
 8003c28:	3001      	adds	r0, #1
 8003c2a:	d09d      	beq.n	8003b68 <_printf_i+0x15c>
 8003c2c:	3501      	adds	r5, #1
 8003c2e:	68e3      	ldr	r3, [r4, #12]
 8003c30:	9903      	ldr	r1, [sp, #12]
 8003c32:	1a5b      	subs	r3, r3, r1
 8003c34:	42ab      	cmp	r3, r5
 8003c36:	dcf2      	bgt.n	8003c1e <_printf_i+0x212>
 8003c38:	e7eb      	b.n	8003c12 <_printf_i+0x206>
 8003c3a:	2500      	movs	r5, #0
 8003c3c:	f104 0619 	add.w	r6, r4, #25
 8003c40:	e7f5      	b.n	8003c2e <_printf_i+0x222>
 8003c42:	bf00      	nop
 8003c44:	080042bf 	.word	0x080042bf
 8003c48:	080042d0 	.word	0x080042d0

08003c4c <__sflush_r>:
 8003c4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c54:	0716      	lsls	r6, r2, #28
 8003c56:	4605      	mov	r5, r0
 8003c58:	460c      	mov	r4, r1
 8003c5a:	d454      	bmi.n	8003d06 <__sflush_r+0xba>
 8003c5c:	684b      	ldr	r3, [r1, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	dc02      	bgt.n	8003c68 <__sflush_r+0x1c>
 8003c62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	dd48      	ble.n	8003cfa <__sflush_r+0xae>
 8003c68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c6a:	2e00      	cmp	r6, #0
 8003c6c:	d045      	beq.n	8003cfa <__sflush_r+0xae>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003c74:	682f      	ldr	r7, [r5, #0]
 8003c76:	6a21      	ldr	r1, [r4, #32]
 8003c78:	602b      	str	r3, [r5, #0]
 8003c7a:	d030      	beq.n	8003cde <__sflush_r+0x92>
 8003c7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	0759      	lsls	r1, r3, #29
 8003c82:	d505      	bpl.n	8003c90 <__sflush_r+0x44>
 8003c84:	6863      	ldr	r3, [r4, #4]
 8003c86:	1ad2      	subs	r2, r2, r3
 8003c88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003c8a:	b10b      	cbz	r3, 8003c90 <__sflush_r+0x44>
 8003c8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c8e:	1ad2      	subs	r2, r2, r3
 8003c90:	2300      	movs	r3, #0
 8003c92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c94:	6a21      	ldr	r1, [r4, #32]
 8003c96:	4628      	mov	r0, r5
 8003c98:	47b0      	blx	r6
 8003c9a:	1c43      	adds	r3, r0, #1
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	d106      	bne.n	8003cae <__sflush_r+0x62>
 8003ca0:	6829      	ldr	r1, [r5, #0]
 8003ca2:	291d      	cmp	r1, #29
 8003ca4:	d82b      	bhi.n	8003cfe <__sflush_r+0xb2>
 8003ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8003d50 <__sflush_r+0x104>)
 8003ca8:	410a      	asrs	r2, r1
 8003caa:	07d6      	lsls	r6, r2, #31
 8003cac:	d427      	bmi.n	8003cfe <__sflush_r+0xb2>
 8003cae:	2200      	movs	r2, #0
 8003cb0:	6062      	str	r2, [r4, #4]
 8003cb2:	04d9      	lsls	r1, r3, #19
 8003cb4:	6922      	ldr	r2, [r4, #16]
 8003cb6:	6022      	str	r2, [r4, #0]
 8003cb8:	d504      	bpl.n	8003cc4 <__sflush_r+0x78>
 8003cba:	1c42      	adds	r2, r0, #1
 8003cbc:	d101      	bne.n	8003cc2 <__sflush_r+0x76>
 8003cbe:	682b      	ldr	r3, [r5, #0]
 8003cc0:	b903      	cbnz	r3, 8003cc4 <__sflush_r+0x78>
 8003cc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8003cc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003cc6:	602f      	str	r7, [r5, #0]
 8003cc8:	b1b9      	cbz	r1, 8003cfa <__sflush_r+0xae>
 8003cca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003cce:	4299      	cmp	r1, r3
 8003cd0:	d002      	beq.n	8003cd8 <__sflush_r+0x8c>
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f7ff fa92 	bl	80031fc <_free_r>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	6363      	str	r3, [r4, #52]	@ 0x34
 8003cdc:	e00d      	b.n	8003cfa <__sflush_r+0xae>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	47b0      	blx	r6
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	1c50      	adds	r0, r2, #1
 8003ce8:	d1c9      	bne.n	8003c7e <__sflush_r+0x32>
 8003cea:	682b      	ldr	r3, [r5, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0c6      	beq.n	8003c7e <__sflush_r+0x32>
 8003cf0:	2b1d      	cmp	r3, #29
 8003cf2:	d001      	beq.n	8003cf8 <__sflush_r+0xac>
 8003cf4:	2b16      	cmp	r3, #22
 8003cf6:	d11e      	bne.n	8003d36 <__sflush_r+0xea>
 8003cf8:	602f      	str	r7, [r5, #0]
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	e022      	b.n	8003d44 <__sflush_r+0xf8>
 8003cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d02:	b21b      	sxth	r3, r3
 8003d04:	e01b      	b.n	8003d3e <__sflush_r+0xf2>
 8003d06:	690f      	ldr	r7, [r1, #16]
 8003d08:	2f00      	cmp	r7, #0
 8003d0a:	d0f6      	beq.n	8003cfa <__sflush_r+0xae>
 8003d0c:	0793      	lsls	r3, r2, #30
 8003d0e:	680e      	ldr	r6, [r1, #0]
 8003d10:	bf08      	it	eq
 8003d12:	694b      	ldreq	r3, [r1, #20]
 8003d14:	600f      	str	r7, [r1, #0]
 8003d16:	bf18      	it	ne
 8003d18:	2300      	movne	r3, #0
 8003d1a:	eba6 0807 	sub.w	r8, r6, r7
 8003d1e:	608b      	str	r3, [r1, #8]
 8003d20:	f1b8 0f00 	cmp.w	r8, #0
 8003d24:	dde9      	ble.n	8003cfa <__sflush_r+0xae>
 8003d26:	6a21      	ldr	r1, [r4, #32]
 8003d28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003d2a:	4643      	mov	r3, r8
 8003d2c:	463a      	mov	r2, r7
 8003d2e:	4628      	mov	r0, r5
 8003d30:	47b0      	blx	r6
 8003d32:	2800      	cmp	r0, #0
 8003d34:	dc08      	bgt.n	8003d48 <__sflush_r+0xfc>
 8003d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d3e:	81a3      	strh	r3, [r4, #12]
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d48:	4407      	add	r7, r0
 8003d4a:	eba8 0800 	sub.w	r8, r8, r0
 8003d4e:	e7e7      	b.n	8003d20 <__sflush_r+0xd4>
 8003d50:	dfbffffe 	.word	0xdfbffffe

08003d54 <_fflush_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	690b      	ldr	r3, [r1, #16]
 8003d58:	4605      	mov	r5, r0
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	b913      	cbnz	r3, 8003d64 <_fflush_r+0x10>
 8003d5e:	2500      	movs	r5, #0
 8003d60:	4628      	mov	r0, r5
 8003d62:	bd38      	pop	{r3, r4, r5, pc}
 8003d64:	b118      	cbz	r0, 8003d6e <_fflush_r+0x1a>
 8003d66:	6a03      	ldr	r3, [r0, #32]
 8003d68:	b90b      	cbnz	r3, 8003d6e <_fflush_r+0x1a>
 8003d6a:	f7fe ff85 	bl	8002c78 <__sinit>
 8003d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f3      	beq.n	8003d5e <_fflush_r+0xa>
 8003d76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003d78:	07d0      	lsls	r0, r2, #31
 8003d7a:	d404      	bmi.n	8003d86 <_fflush_r+0x32>
 8003d7c:	0599      	lsls	r1, r3, #22
 8003d7e:	d402      	bmi.n	8003d86 <_fflush_r+0x32>
 8003d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d82:	f7ff fa12 	bl	80031aa <__retarget_lock_acquire_recursive>
 8003d86:	4628      	mov	r0, r5
 8003d88:	4621      	mov	r1, r4
 8003d8a:	f7ff ff5f 	bl	8003c4c <__sflush_r>
 8003d8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d90:	07da      	lsls	r2, r3, #31
 8003d92:	4605      	mov	r5, r0
 8003d94:	d4e4      	bmi.n	8003d60 <_fflush_r+0xc>
 8003d96:	89a3      	ldrh	r3, [r4, #12]
 8003d98:	059b      	lsls	r3, r3, #22
 8003d9a:	d4e1      	bmi.n	8003d60 <_fflush_r+0xc>
 8003d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d9e:	f7ff fa05 	bl	80031ac <__retarget_lock_release_recursive>
 8003da2:	e7dd      	b.n	8003d60 <_fflush_r+0xc>

08003da4 <fiprintf>:
 8003da4:	b40e      	push	{r1, r2, r3}
 8003da6:	b503      	push	{r0, r1, lr}
 8003da8:	4601      	mov	r1, r0
 8003daa:	ab03      	add	r3, sp, #12
 8003dac:	4805      	ldr	r0, [pc, #20]	@ (8003dc4 <fiprintf+0x20>)
 8003dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db2:	6800      	ldr	r0, [r0, #0]
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	f7ff fca3 	bl	8003700 <_vfiprintf_r>
 8003dba:	b002      	add	sp, #8
 8003dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc0:	b003      	add	sp, #12
 8003dc2:	4770      	bx	lr
 8003dc4:	20000018 	.word	0x20000018

08003dc8 <__swhatbuf_r>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	460c      	mov	r4, r1
 8003dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd0:	2900      	cmp	r1, #0
 8003dd2:	b096      	sub	sp, #88	@ 0x58
 8003dd4:	4615      	mov	r5, r2
 8003dd6:	461e      	mov	r6, r3
 8003dd8:	da0d      	bge.n	8003df6 <__swhatbuf_r+0x2e>
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	bf14      	ite	ne
 8003de6:	2340      	movne	r3, #64	@ 0x40
 8003de8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003dec:	2000      	movs	r0, #0
 8003dee:	6031      	str	r1, [r6, #0]
 8003df0:	602b      	str	r3, [r5, #0]
 8003df2:	b016      	add	sp, #88	@ 0x58
 8003df4:	bd70      	pop	{r4, r5, r6, pc}
 8003df6:	466a      	mov	r2, sp
 8003df8:	f000 f862 	bl	8003ec0 <_fstat_r>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	dbec      	blt.n	8003dda <__swhatbuf_r+0x12>
 8003e00:	9901      	ldr	r1, [sp, #4]
 8003e02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e0a:	4259      	negs	r1, r3
 8003e0c:	4159      	adcs	r1, r3
 8003e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e12:	e7eb      	b.n	8003dec <__swhatbuf_r+0x24>

08003e14 <__smakebuf_r>:
 8003e14:	898b      	ldrh	r3, [r1, #12]
 8003e16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e18:	079d      	lsls	r5, r3, #30
 8003e1a:	4606      	mov	r6, r0
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	d507      	bpl.n	8003e30 <__smakebuf_r+0x1c>
 8003e20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	6123      	str	r3, [r4, #16]
 8003e28:	2301      	movs	r3, #1
 8003e2a:	6163      	str	r3, [r4, #20]
 8003e2c:	b003      	add	sp, #12
 8003e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e30:	ab01      	add	r3, sp, #4
 8003e32:	466a      	mov	r2, sp
 8003e34:	f7ff ffc8 	bl	8003dc8 <__swhatbuf_r>
 8003e38:	9f00      	ldr	r7, [sp, #0]
 8003e3a:	4605      	mov	r5, r0
 8003e3c:	4639      	mov	r1, r7
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f7ff fa50 	bl	80032e4 <_malloc_r>
 8003e44:	b948      	cbnz	r0, 8003e5a <__smakebuf_r+0x46>
 8003e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e4a:	059a      	lsls	r2, r3, #22
 8003e4c:	d4ee      	bmi.n	8003e2c <__smakebuf_r+0x18>
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	f043 0302 	orr.w	r3, r3, #2
 8003e56:	81a3      	strh	r3, [r4, #12]
 8003e58:	e7e2      	b.n	8003e20 <__smakebuf_r+0xc>
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	6020      	str	r0, [r4, #0]
 8003e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e62:	81a3      	strh	r3, [r4, #12]
 8003e64:	9b01      	ldr	r3, [sp, #4]
 8003e66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003e6a:	b15b      	cbz	r3, 8003e84 <__smakebuf_r+0x70>
 8003e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e70:	4630      	mov	r0, r6
 8003e72:	f000 f837 	bl	8003ee4 <_isatty_r>
 8003e76:	b128      	cbz	r0, 8003e84 <__smakebuf_r+0x70>
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	81a3      	strh	r3, [r4, #12]
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	431d      	orrs	r5, r3
 8003e88:	81a5      	strh	r5, [r4, #12]
 8003e8a:	e7cf      	b.n	8003e2c <__smakebuf_r+0x18>

08003e8c <memmove>:
 8003e8c:	4288      	cmp	r0, r1
 8003e8e:	b510      	push	{r4, lr}
 8003e90:	eb01 0402 	add.w	r4, r1, r2
 8003e94:	d902      	bls.n	8003e9c <memmove+0x10>
 8003e96:	4284      	cmp	r4, r0
 8003e98:	4623      	mov	r3, r4
 8003e9a:	d807      	bhi.n	8003eac <memmove+0x20>
 8003e9c:	1e43      	subs	r3, r0, #1
 8003e9e:	42a1      	cmp	r1, r4
 8003ea0:	d008      	beq.n	8003eb4 <memmove+0x28>
 8003ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003eaa:	e7f8      	b.n	8003e9e <memmove+0x12>
 8003eac:	4402      	add	r2, r0
 8003eae:	4601      	mov	r1, r0
 8003eb0:	428a      	cmp	r2, r1
 8003eb2:	d100      	bne.n	8003eb6 <memmove+0x2a>
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ebe:	e7f7      	b.n	8003eb0 <memmove+0x24>

08003ec0 <_fstat_r>:
 8003ec0:	b538      	push	{r3, r4, r5, lr}
 8003ec2:	4d07      	ldr	r5, [pc, #28]	@ (8003ee0 <_fstat_r+0x20>)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	4608      	mov	r0, r1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	602b      	str	r3, [r5, #0]
 8003ece:	f7fc ff44 	bl	8000d5a <_fstat>
 8003ed2:	1c43      	adds	r3, r0, #1
 8003ed4:	d102      	bne.n	8003edc <_fstat_r+0x1c>
 8003ed6:	682b      	ldr	r3, [r5, #0]
 8003ed8:	b103      	cbz	r3, 8003edc <_fstat_r+0x1c>
 8003eda:	6023      	str	r3, [r4, #0]
 8003edc:	bd38      	pop	{r3, r4, r5, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000658 	.word	0x20000658

08003ee4 <_isatty_r>:
 8003ee4:	b538      	push	{r3, r4, r5, lr}
 8003ee6:	4d06      	ldr	r5, [pc, #24]	@ (8003f00 <_isatty_r+0x1c>)
 8003ee8:	2300      	movs	r3, #0
 8003eea:	4604      	mov	r4, r0
 8003eec:	4608      	mov	r0, r1
 8003eee:	602b      	str	r3, [r5, #0]
 8003ef0:	f7fc ff43 	bl	8000d7a <_isatty>
 8003ef4:	1c43      	adds	r3, r0, #1
 8003ef6:	d102      	bne.n	8003efe <_isatty_r+0x1a>
 8003ef8:	682b      	ldr	r3, [r5, #0]
 8003efa:	b103      	cbz	r3, 8003efe <_isatty_r+0x1a>
 8003efc:	6023      	str	r3, [r4, #0]
 8003efe:	bd38      	pop	{r3, r4, r5, pc}
 8003f00:	20000658 	.word	0x20000658

08003f04 <_sbrk_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4d06      	ldr	r5, [pc, #24]	@ (8003f20 <_sbrk_r+0x1c>)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	602b      	str	r3, [r5, #0]
 8003f10:	f7fc ff4c 	bl	8000dac <_sbrk>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d102      	bne.n	8003f1e <_sbrk_r+0x1a>
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	b103      	cbz	r3, 8003f1e <_sbrk_r+0x1a>
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
 8003f20:	20000658 	.word	0x20000658

08003f24 <memcpy>:
 8003f24:	440a      	add	r2, r1
 8003f26:	4291      	cmp	r1, r2
 8003f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f2c:	d100      	bne.n	8003f30 <memcpy+0xc>
 8003f2e:	4770      	bx	lr
 8003f30:	b510      	push	{r4, lr}
 8003f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f3a:	4291      	cmp	r1, r2
 8003f3c:	d1f9      	bne.n	8003f32 <memcpy+0xe>
 8003f3e:	bd10      	pop	{r4, pc}

08003f40 <abort>:
 8003f40:	b508      	push	{r3, lr}
 8003f42:	2006      	movs	r0, #6
 8003f44:	f000 f85a 	bl	8003ffc <raise>
 8003f48:	2001      	movs	r0, #1
 8003f4a:	f7fc fed2 	bl	8000cf2 <_exit>

08003f4e <_realloc_r>:
 8003f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f52:	4680      	mov	r8, r0
 8003f54:	4615      	mov	r5, r2
 8003f56:	460c      	mov	r4, r1
 8003f58:	b921      	cbnz	r1, 8003f64 <_realloc_r+0x16>
 8003f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5e:	4611      	mov	r1, r2
 8003f60:	f7ff b9c0 	b.w	80032e4 <_malloc_r>
 8003f64:	b92a      	cbnz	r2, 8003f72 <_realloc_r+0x24>
 8003f66:	f7ff f949 	bl	80031fc <_free_r>
 8003f6a:	2400      	movs	r4, #0
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f72:	f000 f85f 	bl	8004034 <_malloc_usable_size_r>
 8003f76:	4285      	cmp	r5, r0
 8003f78:	4606      	mov	r6, r0
 8003f7a:	d802      	bhi.n	8003f82 <_realloc_r+0x34>
 8003f7c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f80:	d8f4      	bhi.n	8003f6c <_realloc_r+0x1e>
 8003f82:	4629      	mov	r1, r5
 8003f84:	4640      	mov	r0, r8
 8003f86:	f7ff f9ad 	bl	80032e4 <_malloc_r>
 8003f8a:	4607      	mov	r7, r0
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	d0ec      	beq.n	8003f6a <_realloc_r+0x1c>
 8003f90:	42b5      	cmp	r5, r6
 8003f92:	462a      	mov	r2, r5
 8003f94:	4621      	mov	r1, r4
 8003f96:	bf28      	it	cs
 8003f98:	4632      	movcs	r2, r6
 8003f9a:	f7ff ffc3 	bl	8003f24 <memcpy>
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	f7ff f92b 	bl	80031fc <_free_r>
 8003fa6:	463c      	mov	r4, r7
 8003fa8:	e7e0      	b.n	8003f6c <_realloc_r+0x1e>

08003faa <_raise_r>:
 8003faa:	291f      	cmp	r1, #31
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4605      	mov	r5, r0
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	d904      	bls.n	8003fbe <_raise_r+0x14>
 8003fb4:	2316      	movs	r3, #22
 8003fb6:	6003      	str	r3, [r0, #0]
 8003fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
 8003fbe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003fc0:	b112      	cbz	r2, 8003fc8 <_raise_r+0x1e>
 8003fc2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003fc6:	b94b      	cbnz	r3, 8003fdc <_raise_r+0x32>
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f000 f831 	bl	8004030 <_getpid_r>
 8003fce:	4622      	mov	r2, r4
 8003fd0:	4601      	mov	r1, r0
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fd8:	f000 b818 	b.w	800400c <_kill_r>
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d00a      	beq.n	8003ff6 <_raise_r+0x4c>
 8003fe0:	1c59      	adds	r1, r3, #1
 8003fe2:	d103      	bne.n	8003fec <_raise_r+0x42>
 8003fe4:	2316      	movs	r3, #22
 8003fe6:	6003      	str	r3, [r0, #0]
 8003fe8:	2001      	movs	r0, #1
 8003fea:	e7e7      	b.n	8003fbc <_raise_r+0x12>
 8003fec:	2100      	movs	r1, #0
 8003fee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	4798      	blx	r3
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e7e0      	b.n	8003fbc <_raise_r+0x12>
	...

08003ffc <raise>:
 8003ffc:	4b02      	ldr	r3, [pc, #8]	@ (8004008 <raise+0xc>)
 8003ffe:	4601      	mov	r1, r0
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	f7ff bfd2 	b.w	8003faa <_raise_r>
 8004006:	bf00      	nop
 8004008:	20000018 	.word	0x20000018

0800400c <_kill_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4d07      	ldr	r5, [pc, #28]	@ (800402c <_kill_r+0x20>)
 8004010:	2300      	movs	r3, #0
 8004012:	4604      	mov	r4, r0
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	602b      	str	r3, [r5, #0]
 800401a:	f7fc fe5a 	bl	8000cd2 <_kill>
 800401e:	1c43      	adds	r3, r0, #1
 8004020:	d102      	bne.n	8004028 <_kill_r+0x1c>
 8004022:	682b      	ldr	r3, [r5, #0]
 8004024:	b103      	cbz	r3, 8004028 <_kill_r+0x1c>
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	bd38      	pop	{r3, r4, r5, pc}
 800402a:	bf00      	nop
 800402c:	20000658 	.word	0x20000658

08004030 <_getpid_r>:
 8004030:	f7fc be47 	b.w	8000cc2 <_getpid>

08004034 <_malloc_usable_size_r>:
 8004034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004038:	1f18      	subs	r0, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	bfbc      	itt	lt
 800403e:	580b      	ldrlt	r3, [r1, r0]
 8004040:	18c0      	addlt	r0, r0, r3
 8004042:	4770      	bx	lr

08004044 <_init>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	bf00      	nop
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr

08004050 <_fini>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr
